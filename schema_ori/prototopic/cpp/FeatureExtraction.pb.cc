// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FeatureExtraction.proto

#include "FeatureExtraction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vlam {
namespace sa {
constexpr FeatureExtractionIn::FeatureExtractionIn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stvpsensordata_(nullptr)
  , stenhancedimage_(nullptr){}
struct FeatureExtractionInDefaultTypeInternal {
  constexpr FeatureExtractionInDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureExtractionInDefaultTypeInternal() {}
  union {
    FeatureExtractionIn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureExtractionInDefaultTypeInternal _FeatureExtractionIn_default_instance_;
constexpr FeatureExtractionOut::FeatureExtractionOut(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstplacevectorlist_(nullptr)
  , arstlocalfeaturelist_(nullptr){}
struct FeatureExtractionOutDefaultTypeInternal {
  constexpr FeatureExtractionOutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FeatureExtractionOutDefaultTypeInternal() {}
  union {
    FeatureExtractionOut _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FeatureExtractionOutDefaultTypeInternal _FeatureExtractionOut_default_instance_;
}  // namespace sa
}  // namespace vlam
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_FeatureExtraction_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_FeatureExtraction_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_FeatureExtraction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_FeatureExtraction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlam::sa::FeatureExtractionIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlam::sa::FeatureExtractionIn, stvpsensordata_),
  PROTOBUF_FIELD_OFFSET(::vlam::sa::FeatureExtractionIn, stenhancedimage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vlam::sa::FeatureExtractionOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vlam::sa::FeatureExtractionOut, arstplacevectorlist_),
  PROTOBUF_FIELD_OFFSET(::vlam::sa::FeatureExtractionOut, arstlocalfeaturelist_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vlam::sa::FeatureExtractionIn)},
  { 7, -1, sizeof(::vlam::sa::FeatureExtractionOut)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlam::sa::_FeatureExtractionIn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vlam::sa::_FeatureExtractionOut_default_instance_),
};

const char descriptor_table_protodef_FeatureExtraction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027FeatureExtraction.proto\022\007vlam.sa\032\021plac"
  "evector.proto\032\022localfeature.proto\032\014vp_ms"
  "g.proto\032\017vp_camera.proto\"o\n\023FeatureExtra"
  "ctionIn\022&\n\016stVPSensorData\030\001 \001(\0132\016.vpdata"
  ".VPData\0220\n\017stEnhancedImage\030\002 \001(\0132\027.vpdat"
  "a.camera.Camera_t\"\202\001\n\024FeatureExtractionO"
  "ut\0223\n\023arstPlaceVectorList\030\013 \001(\0132\026.VgeoDB"
  ".PlaceVectorSet\0225\n\024arstLocalFeatureList\030"
  "\014 \001(\0132\027.VgeoDB.LocalFeatureSetB\030\n\026vlam.f"
  "eatureextractionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_FeatureExtraction_2eproto_deps[4] = {
  &::descriptor_table_localfeature_2eproto,
  &::descriptor_table_placevector_2eproto,
  &::descriptor_table_vp_5fcamera_2eproto,
  &::descriptor_table_vp_5fmsg_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_FeatureExtraction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FeatureExtraction_2eproto = {
  false, false, 384, descriptor_table_protodef_FeatureExtraction_2eproto, "FeatureExtraction.proto", 
  &descriptor_table_FeatureExtraction_2eproto_once, descriptor_table_FeatureExtraction_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_FeatureExtraction_2eproto::offsets,
  file_level_metadata_FeatureExtraction_2eproto, file_level_enum_descriptors_FeatureExtraction_2eproto, file_level_service_descriptors_FeatureExtraction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_FeatureExtraction_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_FeatureExtraction_2eproto);
  return descriptor_table_FeatureExtraction_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_FeatureExtraction_2eproto(&descriptor_table_FeatureExtraction_2eproto);
namespace vlam {
namespace sa {

// ===================================================================

class FeatureExtractionIn::_Internal {
 public:
  static const ::vpdata::VPData& stvpsensordata(const FeatureExtractionIn* msg);
  static const ::vpdata::camera::Camera_t& stenhancedimage(const FeatureExtractionIn* msg);
};

const ::vpdata::VPData&
FeatureExtractionIn::_Internal::stvpsensordata(const FeatureExtractionIn* msg) {
  return *msg->stvpsensordata_;
}
const ::vpdata::camera::Camera_t&
FeatureExtractionIn::_Internal::stenhancedimage(const FeatureExtractionIn* msg) {
  return *msg->stenhancedimage_;
}
void FeatureExtractionIn::clear_stvpsensordata() {
  if (GetArena() == nullptr && stvpsensordata_ != nullptr) {
    delete stvpsensordata_;
  }
  stvpsensordata_ = nullptr;
}
void FeatureExtractionIn::clear_stenhancedimage() {
  if (GetArena() == nullptr && stenhancedimage_ != nullptr) {
    delete stenhancedimage_;
  }
  stenhancedimage_ = nullptr;
}
FeatureExtractionIn::FeatureExtractionIn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlam.sa.FeatureExtractionIn)
}
FeatureExtractionIn::FeatureExtractionIn(const FeatureExtractionIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stvpsensordata()) {
    stvpsensordata_ = new ::vpdata::VPData(*from.stvpsensordata_);
  } else {
    stvpsensordata_ = nullptr;
  }
  if (from._internal_has_stenhancedimage()) {
    stenhancedimage_ = new ::vpdata::camera::Camera_t(*from.stenhancedimage_);
  } else {
    stenhancedimage_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlam.sa.FeatureExtractionIn)
}

void FeatureExtractionIn::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stvpsensordata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stenhancedimage_) -
    reinterpret_cast<char*>(&stvpsensordata_)) + sizeof(stenhancedimage_));
}

FeatureExtractionIn::~FeatureExtractionIn() {
  // @@protoc_insertion_point(destructor:vlam.sa.FeatureExtractionIn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureExtractionIn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stvpsensordata_;
  if (this != internal_default_instance()) delete stenhancedimage_;
}

void FeatureExtractionIn::ArenaDtor(void* object) {
  FeatureExtractionIn* _this = reinterpret_cast< FeatureExtractionIn* >(object);
  (void)_this;
}
void FeatureExtractionIn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureExtractionIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureExtractionIn::Clear() {
// @@protoc_insertion_point(message_clear_start:vlam.sa.FeatureExtractionIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stvpsensordata_ != nullptr) {
    delete stvpsensordata_;
  }
  stvpsensordata_ = nullptr;
  if (GetArena() == nullptr && stenhancedimage_ != nullptr) {
    delete stenhancedimage_;
  }
  stenhancedimage_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureExtractionIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vpdata.VPData stVPSensorData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpsensordata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vpdata.camera.Camera_t stEnhancedImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stenhancedimage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureExtractionIn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlam.sa.FeatureExtractionIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vpdata.VPData stVPSensorData = 1;
  if (this->has_stvpsensordata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stvpsensordata(this), target, stream);
  }

  // .vpdata.camera.Camera_t stEnhancedImage = 2;
  if (this->has_stenhancedimage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stenhancedimage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlam.sa.FeatureExtractionIn)
  return target;
}

size_t FeatureExtractionIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlam.sa.FeatureExtractionIn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vpdata.VPData stVPSensorData = 1;
  if (this->has_stvpsensordata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpsensordata_);
  }

  // .vpdata.camera.Camera_t stEnhancedImage = 2;
  if (this->has_stenhancedimage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stenhancedimage_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureExtractionIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlam.sa.FeatureExtractionIn)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureExtractionIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureExtractionIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlam.sa.FeatureExtractionIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlam.sa.FeatureExtractionIn)
    MergeFrom(*source);
  }
}

void FeatureExtractionIn::MergeFrom(const FeatureExtractionIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlam.sa.FeatureExtractionIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stvpsensordata()) {
    _internal_mutable_stvpsensordata()->::vpdata::VPData::MergeFrom(from._internal_stvpsensordata());
  }
  if (from.has_stenhancedimage()) {
    _internal_mutable_stenhancedimage()->::vpdata::camera::Camera_t::MergeFrom(from._internal_stenhancedimage());
  }
}

void FeatureExtractionIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlam.sa.FeatureExtractionIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureExtractionIn::CopyFrom(const FeatureExtractionIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlam.sa.FeatureExtractionIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureExtractionIn::IsInitialized() const {
  return true;
}

void FeatureExtractionIn::InternalSwap(FeatureExtractionIn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeatureExtractionIn, stenhancedimage_)
      + sizeof(FeatureExtractionIn::stenhancedimage_)
      - PROTOBUF_FIELD_OFFSET(FeatureExtractionIn, stvpsensordata_)>(
          reinterpret_cast<char*>(&stvpsensordata_),
          reinterpret_cast<char*>(&other->stvpsensordata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureExtractionIn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FeatureExtractionOut::_Internal {
 public:
  static const ::VgeoDB::PlaceVectorSet& arstplacevectorlist(const FeatureExtractionOut* msg);
  static const ::VgeoDB::LocalFeatureSet& arstlocalfeaturelist(const FeatureExtractionOut* msg);
};

const ::VgeoDB::PlaceVectorSet&
FeatureExtractionOut::_Internal::arstplacevectorlist(const FeatureExtractionOut* msg) {
  return *msg->arstplacevectorlist_;
}
const ::VgeoDB::LocalFeatureSet&
FeatureExtractionOut::_Internal::arstlocalfeaturelist(const FeatureExtractionOut* msg) {
  return *msg->arstlocalfeaturelist_;
}
void FeatureExtractionOut::clear_arstplacevectorlist() {
  if (GetArena() == nullptr && arstplacevectorlist_ != nullptr) {
    delete arstplacevectorlist_;
  }
  arstplacevectorlist_ = nullptr;
}
void FeatureExtractionOut::clear_arstlocalfeaturelist() {
  if (GetArena() == nullptr && arstlocalfeaturelist_ != nullptr) {
    delete arstlocalfeaturelist_;
  }
  arstlocalfeaturelist_ = nullptr;
}
FeatureExtractionOut::FeatureExtractionOut(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vlam.sa.FeatureExtractionOut)
}
FeatureExtractionOut::FeatureExtractionOut(const FeatureExtractionOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_arstplacevectorlist()) {
    arstplacevectorlist_ = new ::VgeoDB::PlaceVectorSet(*from.arstplacevectorlist_);
  } else {
    arstplacevectorlist_ = nullptr;
  }
  if (from._internal_has_arstlocalfeaturelist()) {
    arstlocalfeaturelist_ = new ::VgeoDB::LocalFeatureSet(*from.arstlocalfeaturelist_);
  } else {
    arstlocalfeaturelist_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vlam.sa.FeatureExtractionOut)
}

void FeatureExtractionOut::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&arstplacevectorlist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&arstlocalfeaturelist_) -
    reinterpret_cast<char*>(&arstplacevectorlist_)) + sizeof(arstlocalfeaturelist_));
}

FeatureExtractionOut::~FeatureExtractionOut() {
  // @@protoc_insertion_point(destructor:vlam.sa.FeatureExtractionOut)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureExtractionOut::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete arstplacevectorlist_;
  if (this != internal_default_instance()) delete arstlocalfeaturelist_;
}

void FeatureExtractionOut::ArenaDtor(void* object) {
  FeatureExtractionOut* _this = reinterpret_cast< FeatureExtractionOut* >(object);
  (void)_this;
}
void FeatureExtractionOut::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureExtractionOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeatureExtractionOut::Clear() {
// @@protoc_insertion_point(message_clear_start:vlam.sa.FeatureExtractionOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && arstplacevectorlist_ != nullptr) {
    delete arstplacevectorlist_;
  }
  arstplacevectorlist_ = nullptr;
  if (GetArena() == nullptr && arstlocalfeaturelist_ != nullptr) {
    delete arstlocalfeaturelist_;
  }
  arstlocalfeaturelist_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureExtractionOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.PlaceVectorSet arstPlaceVectorList = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_arstplacevectorlist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.LocalFeatureSet arstLocalFeatureList = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_arstlocalfeaturelist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureExtractionOut::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vlam.sa.FeatureExtractionOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.PlaceVectorSet arstPlaceVectorList = 11;
  if (this->has_arstplacevectorlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::arstplacevectorlist(this), target, stream);
  }

  // .VgeoDB.LocalFeatureSet arstLocalFeatureList = 12;
  if (this->has_arstlocalfeaturelist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::arstlocalfeaturelist(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vlam.sa.FeatureExtractionOut)
  return target;
}

size_t FeatureExtractionOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vlam.sa.FeatureExtractionOut)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VgeoDB.PlaceVectorSet arstPlaceVectorList = 11;
  if (this->has_arstplacevectorlist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arstplacevectorlist_);
  }

  // .VgeoDB.LocalFeatureSet arstLocalFeatureList = 12;
  if (this->has_arstlocalfeaturelist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *arstlocalfeaturelist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureExtractionOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vlam.sa.FeatureExtractionOut)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureExtractionOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureExtractionOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vlam.sa.FeatureExtractionOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vlam.sa.FeatureExtractionOut)
    MergeFrom(*source);
  }
}

void FeatureExtractionOut::MergeFrom(const FeatureExtractionOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vlam.sa.FeatureExtractionOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_arstplacevectorlist()) {
    _internal_mutable_arstplacevectorlist()->::VgeoDB::PlaceVectorSet::MergeFrom(from._internal_arstplacevectorlist());
  }
  if (from.has_arstlocalfeaturelist()) {
    _internal_mutable_arstlocalfeaturelist()->::VgeoDB::LocalFeatureSet::MergeFrom(from._internal_arstlocalfeaturelist());
  }
}

void FeatureExtractionOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vlam.sa.FeatureExtractionOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureExtractionOut::CopyFrom(const FeatureExtractionOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vlam.sa.FeatureExtractionOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureExtractionOut::IsInitialized() const {
  return true;
}

void FeatureExtractionOut::InternalSwap(FeatureExtractionOut* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeatureExtractionOut, arstlocalfeaturelist_)
      + sizeof(FeatureExtractionOut::arstlocalfeaturelist_)
      - PROTOBUF_FIELD_OFFSET(FeatureExtractionOut, arstplacevectorlist_)>(
          reinterpret_cast<char*>(&arstplacevectorlist_),
          reinterpret_cast<char*>(&other->arstplacevectorlist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureExtractionOut::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sa
}  // namespace vlam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vlam::sa::FeatureExtractionIn* Arena::CreateMaybeMessage< ::vlam::sa::FeatureExtractionIn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlam::sa::FeatureExtractionIn >(arena);
}
template<> PROTOBUF_NOINLINE ::vlam::sa::FeatureExtractionOut* Arena::CreateMaybeMessage< ::vlam::sa::FeatureExtractionOut >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vlam::sa::FeatureExtractionOut >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
