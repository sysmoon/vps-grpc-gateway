// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localfeature.proto

#include "localfeature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace VgeoDB {
constexpr SuperPointDesc_t::SuperPointDesc_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arfdescriptor_()
  , _arfdescriptor_cached_byte_size_()
  , etype_(0)
{}
struct SuperPointDesc_tDefaultTypeInternal {
  constexpr SuperPointDesc_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SuperPointDesc_tDefaultTypeInternal() {}
  union {
    SuperPointDesc_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SuperPointDesc_tDefaultTypeInternal _SuperPointDesc_t_default_instance_;
constexpr KP2DDesc_t::KP2DDesc_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arfdescriptor_()
  , _arfdescriptor_cached_byte_size_()
  , etype_(0)
{}
struct KP2DDesc_tDefaultTypeInternal {
  constexpr KP2DDesc_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KP2DDesc_tDefaultTypeInternal() {}
  union {
    KP2DDesc_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KP2DDesc_tDefaultTypeInternal _KP2DDesc_t_default_instance_;
constexpr LocalFeatureDesc::LocalFeatureDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct LocalFeatureDescDefaultTypeInternal {
  constexpr LocalFeatureDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureDescDefaultTypeInternal() {}
  union {
    LocalFeatureDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureDescDefaultTypeInternal _LocalFeatureDesc_default_instance_;
constexpr LocalFeatMeta_t::LocalFeatMeta_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streflocation_(nullptr)
  , un64uniqueid_(PROTOBUF_ULONGLONG(0))
  , un64keypointcount_(PROTOBUF_ULONGLONG(0))
  , un64groupid_(PROTOBUF_ULONGLONG(0)){}
struct LocalFeatMeta_tDefaultTypeInternal {
  constexpr LocalFeatMeta_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatMeta_tDefaultTypeInternal() {}
  union {
    LocalFeatMeta_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatMeta_tDefaultTypeInternal _LocalFeatMeta_t_default_instance_;
constexpr KeyPoint_t::KeyPoint_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arun64keyframeuniqueid_()
  , _arun64keyframeuniqueid_cached_byte_size_()
  , arun64keyframeindex_()
  , _arun64keyframeindex_cached_byte_size_()
  , arstkeypointimage_()
  , stlocation_(nullptr)
  , udescriptor_(nullptr)
  , un64index_(PROTOBUF_ULONGLONG(0))
  , un64timestamp_(PROTOBUF_ULONGLONG(0))
  , fsimilarity_(0){}
struct KeyPoint_tDefaultTypeInternal {
  constexpr KeyPoint_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyPoint_tDefaultTypeInternal() {}
  union {
    KeyPoint_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyPoint_tDefaultTypeInternal _KeyPoint_t_default_instance_;
constexpr LocalFeature::LocalFeature(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stkeypoint_()
  , stmeta_(nullptr){}
struct LocalFeatureDefaultTypeInternal {
  constexpr LocalFeatureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureDefaultTypeInternal() {}
  union {
    LocalFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureDefaultTypeInternal _LocalFeature_default_instance_;
constexpr LocalFeatureSet::LocalFeatureSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstlocalfeature_(){}
struct LocalFeatureSetDefaultTypeInternal {
  constexpr LocalFeatureSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureSetDefaultTypeInternal() {}
  union {
    LocalFeatureSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureSetDefaultTypeInternal _LocalFeatureSet_default_instance_;
}  // namespace VgeoDB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_localfeature_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_localfeature_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_localfeature_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_localfeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::SuperPointDesc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::SuperPointDesc_t, arfdescriptor_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::SuperPointDesc_t, etype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KP2DDesc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KP2DDesc_t, arfdescriptor_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KP2DDesc_t, etype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatureDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatureDesc, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatureDesc, uLocalFeature_t_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatMeta_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatMeta_t, un64uniqueid_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatMeta_t, un64keypointcount_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatMeta_t, un64groupid_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatMeta_t, streflocation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, un64index_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, un64timestamp_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, stlocation_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, udescriptor_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, arun64keyframeuniqueid_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, arun64keyframeindex_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, arstkeypointimage_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::KeyPoint_t, fsimilarity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeature, stmeta_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeature, stkeypoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatureSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::LocalFeatureSet, arstlocalfeature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VgeoDB::SuperPointDesc_t)},
  { 7, -1, sizeof(::VgeoDB::KP2DDesc_t)},
  { 14, -1, sizeof(::VgeoDB::LocalFeatureDesc)},
  { 22, -1, sizeof(::VgeoDB::LocalFeatMeta_t)},
  { 31, -1, sizeof(::VgeoDB::KeyPoint_t)},
  { 44, -1, sizeof(::VgeoDB::LocalFeature)},
  { 51, -1, sizeof(::VgeoDB::LocalFeatureSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_SuperPointDesc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_KP2DDesc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_LocalFeatureDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_LocalFeatMeta_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_KeyPoint_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_LocalFeature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_LocalFeatureSet_default_instance_),
};

const char descriptor_table_protodef_localfeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022localfeature.proto\022\006VgeoDB\032\023vgeodb_com"
  "mon.proto\"}\n\020SuperPointDesc_t\022\031\n\rarfDesc"
  "riptor\030\002 \003(\002B\002\020\001\0221\n\005eType\030\003 \001(\0162\".VgeoDB"
  ".SuperPointDesc_t.eDescType\"\033\n\teDescType"
  "\022\016\n\nSPP_512_v1\020\000\"r\n\nKP2DDesc_t\022\031\n\rarfDes"
  "criptor\030\002 \003(\002B\002\020\001\022+\n\005eType\030\003 \001(\0162\034.VgeoD"
  "B.KP2DDesc_t.eDescType\"\034\n\teDescType\022\017\n\013K"
  "P2D_256_v1\020\000\"~\n\020LocalFeatureDesc\022-\n\tstSP"
  "PDesc\030\003 \001(\0132\030.VgeoDB.SuperPointDesc_tH\000\022"
  "(\n\nstKP2DDesc\030\004 \001(\0132\022.VgeoDB.KP2DDesc_tH"
  "\000B\021\n\017uLocalFeature_t\"\206\001\n\017LocalFeatMeta_t"
  "\022\024\n\014un64UniqueID\030\001 \001(\004\022\031\n\021un64KeyPointCo"
  "unt\030\002 \001(\004\022\023\n\013un64GroupID\030\003 \001(\004\022-\n\rstRefL"
  "ocation\030\004 \001(\0132\026.VgeoDB.common.XYZ64_t\"\240\002"
  "\n\nKeyPoint_t\022\021\n\tun64Index\030\001 \001(\004\022\025\n\run64T"
  "imestamp\030\002 \001(\004\022*\n\nstLocation\030\003 \001(\0132\026.Vge"
  "oDB.common.XYZ32_t\022-\n\013uDescriptor\030\004 \001(\0132"
  "\030.VgeoDB.LocalFeatureDesc\022\"\n\026arun64Keyfr"
  "ameUniqueID\030\005 \003(\004B\002\020\001\022\037\n\023arun64KeyframeI"
  "ndex\030\006 \003(\004B\002\020\001\0223\n\021arstKeyPointImage\030\007 \003("
  "\0132\030.VgeoDB.common.UVPoint_t\022\023\n\013fSimilari"
  "ty\030\013 \001(\002\"_\n\014LocalFeature\022\'\n\006stMeta\030\001 \001(\013"
  "2\027.VgeoDB.LocalFeatMeta_t\022&\n\nstKeypoint\030"
  "\002 \003(\0132\022.VgeoDB.KeyPoint_t\"A\n\017LocalFeatur"
  "eSet\022.\n\020arstLocalFeature\030\001 \003(\0132\024.VgeoDB."
  "LocalFeatureB\033\n\023vgeodb.localfeatureB\004lfd"
  "bb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_localfeature_2eproto_deps[1] = {
  &::descriptor_table_vgeodb_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_localfeature_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localfeature_2eproto = {
  false, false, 1049, descriptor_table_protodef_localfeature_2eproto, "localfeature.proto", 
  &descriptor_table_localfeature_2eproto_once, descriptor_table_localfeature_2eproto_deps, 1, 7,
  schemas, file_default_instances, TableStruct_localfeature_2eproto::offsets,
  file_level_metadata_localfeature_2eproto, file_level_enum_descriptors_localfeature_2eproto, file_level_service_descriptors_localfeature_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_localfeature_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_localfeature_2eproto);
  return descriptor_table_localfeature_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_localfeature_2eproto(&descriptor_table_localfeature_2eproto);
namespace VgeoDB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SuperPointDesc_t_eDescType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_localfeature_2eproto);
  return file_level_enum_descriptors_localfeature_2eproto[0];
}
bool SuperPointDesc_t_eDescType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SuperPointDesc_t_eDescType SuperPointDesc_t::SPP_512_v1;
constexpr SuperPointDesc_t_eDescType SuperPointDesc_t::eDescType_MIN;
constexpr SuperPointDesc_t_eDescType SuperPointDesc_t::eDescType_MAX;
constexpr int SuperPointDesc_t::eDescType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KP2DDesc_t_eDescType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_localfeature_2eproto);
  return file_level_enum_descriptors_localfeature_2eproto[1];
}
bool KP2DDesc_t_eDescType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr KP2DDesc_t_eDescType KP2DDesc_t::KP2D_256_v1;
constexpr KP2DDesc_t_eDescType KP2DDesc_t::eDescType_MIN;
constexpr KP2DDesc_t_eDescType KP2DDesc_t::eDescType_MAX;
constexpr int KP2DDesc_t::eDescType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class SuperPointDesc_t::_Internal {
 public:
};

SuperPointDesc_t::SuperPointDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arfdescriptor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.SuperPointDesc_t)
}
SuperPointDesc_t::SuperPointDesc_t(const SuperPointDesc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arfdescriptor_(from.arfdescriptor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  etype_ = from.etype_;
  // @@protoc_insertion_point(copy_constructor:VgeoDB.SuperPointDesc_t)
}

void SuperPointDesc_t::SharedCtor() {
etype_ = 0;
}

SuperPointDesc_t::~SuperPointDesc_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.SuperPointDesc_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SuperPointDesc_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SuperPointDesc_t::ArenaDtor(void* object) {
  SuperPointDesc_t* _this = reinterpret_cast< SuperPointDesc_t* >(object);
  (void)_this;
}
void SuperPointDesc_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SuperPointDesc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SuperPointDesc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.SuperPointDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arfdescriptor_.Clear();
  etype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SuperPointDesc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float arfDescriptor = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arfdescriptor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_arfdescriptor(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.SuperPointDesc_t.eDescType eType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_etype(static_cast<::VgeoDB::SuperPointDesc_t_eDescType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SuperPointDesc_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.SuperPointDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float arfDescriptor = 2 [packed = true];
  if (this->_internal_arfdescriptor_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_arfdescriptor(), target);
  }

  // .VgeoDB.SuperPointDesc_t.eDescType eType = 3;
  if (this->etype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_etype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.SuperPointDesc_t)
  return target;
}

size_t SuperPointDesc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.SuperPointDesc_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arfDescriptor = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arfdescriptor_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arfdescriptor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .VgeoDB.SuperPointDesc_t.eDescType eType = 3;
  if (this->etype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuperPointDesc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.SuperPointDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const SuperPointDesc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SuperPointDesc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.SuperPointDesc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.SuperPointDesc_t)
    MergeFrom(*source);
  }
}

void SuperPointDesc_t::MergeFrom(const SuperPointDesc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.SuperPointDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arfdescriptor_.MergeFrom(from.arfdescriptor_);
  if (from.etype() != 0) {
    _internal_set_etype(from._internal_etype());
  }
}

void SuperPointDesc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.SuperPointDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperPointDesc_t::CopyFrom(const SuperPointDesc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.SuperPointDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperPointDesc_t::IsInitialized() const {
  return true;
}

void SuperPointDesc_t::InternalSwap(SuperPointDesc_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arfdescriptor_.InternalSwap(&other->arfdescriptor_);
  swap(etype_, other->etype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SuperPointDesc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KP2DDesc_t::_Internal {
 public:
};

KP2DDesc_t::KP2DDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arfdescriptor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.KP2DDesc_t)
}
KP2DDesc_t::KP2DDesc_t(const KP2DDesc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arfdescriptor_(from.arfdescriptor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  etype_ = from.etype_;
  // @@protoc_insertion_point(copy_constructor:VgeoDB.KP2DDesc_t)
}

void KP2DDesc_t::SharedCtor() {
etype_ = 0;
}

KP2DDesc_t::~KP2DDesc_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.KP2DDesc_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KP2DDesc_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KP2DDesc_t::ArenaDtor(void* object) {
  KP2DDesc_t* _this = reinterpret_cast< KP2DDesc_t* >(object);
  (void)_this;
}
void KP2DDesc_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KP2DDesc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KP2DDesc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.KP2DDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arfdescriptor_.Clear();
  etype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KP2DDesc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float arfDescriptor = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arfdescriptor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_arfdescriptor(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.KP2DDesc_t.eDescType eType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_etype(static_cast<::VgeoDB::KP2DDesc_t_eDescType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KP2DDesc_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.KP2DDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float arfDescriptor = 2 [packed = true];
  if (this->_internal_arfdescriptor_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_arfdescriptor(), target);
  }

  // .VgeoDB.KP2DDesc_t.eDescType eType = 3;
  if (this->etype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_etype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.KP2DDesc_t)
  return target;
}

size_t KP2DDesc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.KP2DDesc_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arfDescriptor = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arfdescriptor_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arfdescriptor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .VgeoDB.KP2DDesc_t.eDescType eType = 3;
  if (this->etype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KP2DDesc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.KP2DDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const KP2DDesc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KP2DDesc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.KP2DDesc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.KP2DDesc_t)
    MergeFrom(*source);
  }
}

void KP2DDesc_t::MergeFrom(const KP2DDesc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.KP2DDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arfdescriptor_.MergeFrom(from.arfdescriptor_);
  if (from.etype() != 0) {
    _internal_set_etype(from._internal_etype());
  }
}

void KP2DDesc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.KP2DDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KP2DDesc_t::CopyFrom(const KP2DDesc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.KP2DDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KP2DDesc_t::IsInitialized() const {
  return true;
}

void KP2DDesc_t::InternalSwap(KP2DDesc_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arfdescriptor_.InternalSwap(&other->arfdescriptor_);
  swap(etype_, other->etype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KP2DDesc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatureDesc::_Internal {
 public:
  static const ::VgeoDB::SuperPointDesc_t& stsppdesc(const LocalFeatureDesc* msg);
  static const ::VgeoDB::KP2DDesc_t& stkp2ddesc(const LocalFeatureDesc* msg);
};

const ::VgeoDB::SuperPointDesc_t&
LocalFeatureDesc::_Internal::stsppdesc(const LocalFeatureDesc* msg) {
  return *msg->uLocalFeature_t_.stsppdesc_;
}
const ::VgeoDB::KP2DDesc_t&
LocalFeatureDesc::_Internal::stkp2ddesc(const LocalFeatureDesc* msg) {
  return *msg->uLocalFeature_t_.stkp2ddesc_;
}
void LocalFeatureDesc::set_allocated_stsppdesc(::VgeoDB::SuperPointDesc_t* stsppdesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_uLocalFeature_t();
  if (stsppdesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stsppdesc);
    if (message_arena != submessage_arena) {
      stsppdesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stsppdesc, submessage_arena);
    }
    set_has_stsppdesc();
    uLocalFeature_t_.stsppdesc_ = stsppdesc;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.LocalFeatureDesc.stSPPDesc)
}
void LocalFeatureDesc::set_allocated_stkp2ddesc(::VgeoDB::KP2DDesc_t* stkp2ddesc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_uLocalFeature_t();
  if (stkp2ddesc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stkp2ddesc);
    if (message_arena != submessage_arena) {
      stkp2ddesc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stkp2ddesc, submessage_arena);
    }
    set_has_stkp2ddesc();
    uLocalFeature_t_.stkp2ddesc_ = stkp2ddesc;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.LocalFeatureDesc.stKP2DDesc)
}
LocalFeatureDesc::LocalFeatureDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.LocalFeatureDesc)
}
LocalFeatureDesc::LocalFeatureDesc(const LocalFeatureDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_uLocalFeature_t();
  switch (from.uLocalFeature_t_case()) {
    case kStSPPDesc: {
      _internal_mutable_stsppdesc()->::VgeoDB::SuperPointDesc_t::MergeFrom(from._internal_stsppdesc());
      break;
    }
    case kStKP2DDesc: {
      _internal_mutable_stkp2ddesc()->::VgeoDB::KP2DDesc_t::MergeFrom(from._internal_stkp2ddesc());
      break;
    }
    case ULOCALFEATURE_T_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.LocalFeatureDesc)
}

void LocalFeatureDesc::SharedCtor() {
clear_has_uLocalFeature_t();
}

LocalFeatureDesc::~LocalFeatureDesc() {
  // @@protoc_insertion_point(destructor:VgeoDB.LocalFeatureDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatureDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_uLocalFeature_t()) {
    clear_uLocalFeature_t();
  }
}

void LocalFeatureDesc::ArenaDtor(void* object) {
  LocalFeatureDesc* _this = reinterpret_cast< LocalFeatureDesc* >(object);
  (void)_this;
}
void LocalFeatureDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatureDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatureDesc::clear_uLocalFeature_t() {
// @@protoc_insertion_point(one_of_clear_start:VgeoDB.LocalFeatureDesc)
  switch (uLocalFeature_t_case()) {
    case kStSPPDesc: {
      if (GetArena() == nullptr) {
        delete uLocalFeature_t_.stsppdesc_;
      }
      break;
    }
    case kStKP2DDesc: {
      if (GetArena() == nullptr) {
        delete uLocalFeature_t_.stkp2ddesc_;
      }
      break;
    }
    case ULOCALFEATURE_T_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ULOCALFEATURE_T_NOT_SET;
}


void LocalFeatureDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.LocalFeatureDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_uLocalFeature_t();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatureDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.SuperPointDesc_t stSPPDesc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsppdesc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.KP2DDesc_t stKP2DDesc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stkp2ddesc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatureDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.LocalFeatureDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.SuperPointDesc_t stSPPDesc = 3;
  if (_internal_has_stsppdesc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stsppdesc(this), target, stream);
  }

  // .VgeoDB.KP2DDesc_t stKP2DDesc = 4;
  if (_internal_has_stkp2ddesc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stkp2ddesc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.LocalFeatureDesc)
  return target;
}

size_t LocalFeatureDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.LocalFeatureDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (uLocalFeature_t_case()) {
    // .VgeoDB.SuperPointDesc_t stSPPDesc = 3;
    case kStSPPDesc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uLocalFeature_t_.stsppdesc_);
      break;
    }
    // .VgeoDB.KP2DDesc_t stKP2DDesc = 4;
    case kStKP2DDesc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uLocalFeature_t_.stkp2ddesc_);
      break;
    }
    case ULOCALFEATURE_T_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatureDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.LocalFeatureDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatureDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatureDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.LocalFeatureDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.LocalFeatureDesc)
    MergeFrom(*source);
  }
}

void LocalFeatureDesc::MergeFrom(const LocalFeatureDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.LocalFeatureDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.uLocalFeature_t_case()) {
    case kStSPPDesc: {
      _internal_mutable_stsppdesc()->::VgeoDB::SuperPointDesc_t::MergeFrom(from._internal_stsppdesc());
      break;
    }
    case kStKP2DDesc: {
      _internal_mutable_stkp2ddesc()->::VgeoDB::KP2DDesc_t::MergeFrom(from._internal_stkp2ddesc());
      break;
    }
    case ULOCALFEATURE_T_NOT_SET: {
      break;
    }
  }
}

void LocalFeatureDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.LocalFeatureDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatureDesc::CopyFrom(const LocalFeatureDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.LocalFeatureDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatureDesc::IsInitialized() const {
  return true;
}

void LocalFeatureDesc::InternalSwap(LocalFeatureDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(uLocalFeature_t_, other->uLocalFeature_t_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatureDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatMeta_t::_Internal {
 public:
  static const ::VgeoDB::common::XYZ64_t& streflocation(const LocalFeatMeta_t* msg);
};

const ::VgeoDB::common::XYZ64_t&
LocalFeatMeta_t::_Internal::streflocation(const LocalFeatMeta_t* msg) {
  return *msg->streflocation_;
}
void LocalFeatMeta_t::clear_streflocation() {
  if (GetArena() == nullptr && streflocation_ != nullptr) {
    delete streflocation_;
  }
  streflocation_ = nullptr;
}
LocalFeatMeta_t::LocalFeatMeta_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.LocalFeatMeta_t)
}
LocalFeatMeta_t::LocalFeatMeta_t(const LocalFeatMeta_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streflocation()) {
    streflocation_ = new ::VgeoDB::common::XYZ64_t(*from.streflocation_);
  } else {
    streflocation_ = nullptr;
  }
  ::memcpy(&un64uniqueid_, &from.un64uniqueid_,
    static_cast<size_t>(reinterpret_cast<char*>(&un64groupid_) -
    reinterpret_cast<char*>(&un64uniqueid_)) + sizeof(un64groupid_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.LocalFeatMeta_t)
}

void LocalFeatMeta_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&streflocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&un64groupid_) -
    reinterpret_cast<char*>(&streflocation_)) + sizeof(un64groupid_));
}

LocalFeatMeta_t::~LocalFeatMeta_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.LocalFeatMeta_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatMeta_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streflocation_;
}

void LocalFeatMeta_t::ArenaDtor(void* object) {
  LocalFeatMeta_t* _this = reinterpret_cast< LocalFeatMeta_t* >(object);
  (void)_this;
}
void LocalFeatMeta_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatMeta_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatMeta_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.LocalFeatMeta_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && streflocation_ != nullptr) {
    delete streflocation_;
  }
  streflocation_ = nullptr;
  ::memset(&un64uniqueid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&un64groupid_) -
      reinterpret_cast<char*>(&un64uniqueid_)) + sizeof(un64groupid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatMeta_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 un64UniqueID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          un64uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64KeyPointCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          un64keypointcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64GroupID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          un64groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.XYZ64_t stRefLocation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_streflocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatMeta_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.LocalFeatMeta_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 un64UniqueID = 1;
  if (this->un64uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_un64uniqueid(), target);
  }

  // uint64 un64KeyPointCount = 2;
  if (this->un64keypointcount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_un64keypointcount(), target);
  }

  // uint64 un64GroupID = 3;
  if (this->un64groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_un64groupid(), target);
  }

  // .VgeoDB.common.XYZ64_t stRefLocation = 4;
  if (this->has_streflocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::streflocation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.LocalFeatMeta_t)
  return target;
}

size_t LocalFeatMeta_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.LocalFeatMeta_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VgeoDB.common.XYZ64_t stRefLocation = 4;
  if (this->has_streflocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streflocation_);
  }

  // uint64 un64UniqueID = 1;
  if (this->un64uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64uniqueid());
  }

  // uint64 un64KeyPointCount = 2;
  if (this->un64keypointcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64keypointcount());
  }

  // uint64 un64GroupID = 3;
  if (this->un64groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64groupid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatMeta_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.LocalFeatMeta_t)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatMeta_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatMeta_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.LocalFeatMeta_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.LocalFeatMeta_t)
    MergeFrom(*source);
  }
}

void LocalFeatMeta_t::MergeFrom(const LocalFeatMeta_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.LocalFeatMeta_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_streflocation()) {
    _internal_mutable_streflocation()->::VgeoDB::common::XYZ64_t::MergeFrom(from._internal_streflocation());
  }
  if (from.un64uniqueid() != 0) {
    _internal_set_un64uniqueid(from._internal_un64uniqueid());
  }
  if (from.un64keypointcount() != 0) {
    _internal_set_un64keypointcount(from._internal_un64keypointcount());
  }
  if (from.un64groupid() != 0) {
    _internal_set_un64groupid(from._internal_un64groupid());
  }
}

void LocalFeatMeta_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.LocalFeatMeta_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatMeta_t::CopyFrom(const LocalFeatMeta_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.LocalFeatMeta_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatMeta_t::IsInitialized() const {
  return true;
}

void LocalFeatMeta_t::InternalSwap(LocalFeatMeta_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalFeatMeta_t, un64groupid_)
      + sizeof(LocalFeatMeta_t::un64groupid_)
      - PROTOBUF_FIELD_OFFSET(LocalFeatMeta_t, streflocation_)>(
          reinterpret_cast<char*>(&streflocation_),
          reinterpret_cast<char*>(&other->streflocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatMeta_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyPoint_t::_Internal {
 public:
  static const ::VgeoDB::common::XYZ32_t& stlocation(const KeyPoint_t* msg);
  static const ::VgeoDB::LocalFeatureDesc& udescriptor(const KeyPoint_t* msg);
};

const ::VgeoDB::common::XYZ32_t&
KeyPoint_t::_Internal::stlocation(const KeyPoint_t* msg) {
  return *msg->stlocation_;
}
const ::VgeoDB::LocalFeatureDesc&
KeyPoint_t::_Internal::udescriptor(const KeyPoint_t* msg) {
  return *msg->udescriptor_;
}
void KeyPoint_t::clear_stlocation() {
  if (GetArena() == nullptr && stlocation_ != nullptr) {
    delete stlocation_;
  }
  stlocation_ = nullptr;
}
void KeyPoint_t::clear_arstkeypointimage() {
  arstkeypointimage_.Clear();
}
KeyPoint_t::KeyPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arun64keyframeuniqueid_(arena),
  arun64keyframeindex_(arena),
  arstkeypointimage_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.KeyPoint_t)
}
KeyPoint_t::KeyPoint_t(const KeyPoint_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arun64keyframeuniqueid_(from.arun64keyframeuniqueid_),
      arun64keyframeindex_(from.arun64keyframeindex_),
      arstkeypointimage_(from.arstkeypointimage_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stlocation()) {
    stlocation_ = new ::VgeoDB::common::XYZ32_t(*from.stlocation_);
  } else {
    stlocation_ = nullptr;
  }
  if (from._internal_has_udescriptor()) {
    udescriptor_ = new ::VgeoDB::LocalFeatureDesc(*from.udescriptor_);
  } else {
    udescriptor_ = nullptr;
  }
  ::memcpy(&un64index_, &from.un64index_,
    static_cast<size_t>(reinterpret_cast<char*>(&fsimilarity_) -
    reinterpret_cast<char*>(&un64index_)) + sizeof(fsimilarity_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.KeyPoint_t)
}

void KeyPoint_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stlocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fsimilarity_) -
    reinterpret_cast<char*>(&stlocation_)) + sizeof(fsimilarity_));
}

KeyPoint_t::~KeyPoint_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.KeyPoint_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPoint_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stlocation_;
  if (this != internal_default_instance()) delete udescriptor_;
}

void KeyPoint_t::ArenaDtor(void* object) {
  KeyPoint_t* _this = reinterpret_cast< KeyPoint_t* >(object);
  (void)_this;
}
void KeyPoint_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPoint_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyPoint_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.KeyPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arun64keyframeuniqueid_.Clear();
  arun64keyframeindex_.Clear();
  arstkeypointimage_.Clear();
  if (GetArena() == nullptr && stlocation_ != nullptr) {
    delete stlocation_;
  }
  stlocation_ = nullptr;
  if (GetArena() == nullptr && udescriptor_ != nullptr) {
    delete udescriptor_;
  }
  udescriptor_ = nullptr;
  ::memset(&un64index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fsimilarity_) -
      reinterpret_cast<char*>(&un64index_)) + sizeof(fsimilarity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPoint_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 un64Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          un64index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          un64timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.XYZ32_t stLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.LocalFeatureDesc uDescriptor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_udescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 arun64KeyframeUniqueID = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_arun64keyframeuniqueid(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_arun64keyframeuniqueid(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 arun64KeyframeIndex = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_arun64keyframeindex(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_arun64keyframeindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VgeoDB.common.UVPoint_t arstKeyPointImage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstkeypointimage(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // float fSimilarity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          fsimilarity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPoint_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.KeyPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 un64Index = 1;
  if (this->un64index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_un64index(), target);
  }

  // uint64 un64Timestamp = 2;
  if (this->un64timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_un64timestamp(), target);
  }

  // .VgeoDB.common.XYZ32_t stLocation = 3;
  if (this->has_stlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stlocation(this), target, stream);
  }

  // .VgeoDB.LocalFeatureDesc uDescriptor = 4;
  if (this->has_udescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::udescriptor(this), target, stream);
  }

  // repeated uint64 arun64KeyframeUniqueID = 5 [packed = true];
  {
    int byte_size = _arun64keyframeuniqueid_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          5, _internal_arun64keyframeuniqueid(), byte_size, target);
    }
  }

  // repeated uint64 arun64KeyframeIndex = 6 [packed = true];
  {
    int byte_size = _arun64keyframeindex_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          6, _internal_arun64keyframeindex(), byte_size, target);
    }
  }

  // repeated .VgeoDB.common.UVPoint_t arstKeyPointImage = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstkeypointimage_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_arstkeypointimage(i), target, stream);
  }

  // float fSimilarity = 11;
  if (!(this->fsimilarity() <= 0 && this->fsimilarity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_fsimilarity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.KeyPoint_t)
  return target;
}

size_t KeyPoint_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.KeyPoint_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 arun64KeyframeUniqueID = 5 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->arun64keyframeuniqueid_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arun64keyframeuniqueid_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 arun64KeyframeIndex = 6 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->arun64keyframeindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arun64keyframeindex_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .VgeoDB.common.UVPoint_t arstKeyPointImage = 7;
  total_size += 1UL * this->_internal_arstkeypointimage_size();
  for (const auto& msg : this->arstkeypointimage_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .VgeoDB.common.XYZ32_t stLocation = 3;
  if (this->has_stlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlocation_);
  }

  // .VgeoDB.LocalFeatureDesc uDescriptor = 4;
  if (this->has_udescriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udescriptor_);
  }

  // uint64 un64Index = 1;
  if (this->un64index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64index());
  }

  // uint64 un64Timestamp = 2;
  if (this->un64timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64timestamp());
  }

  // float fSimilarity = 11;
  if (!(this->fsimilarity() <= 0 && this->fsimilarity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPoint_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.KeyPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPoint_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPoint_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.KeyPoint_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.KeyPoint_t)
    MergeFrom(*source);
  }
}

void KeyPoint_t::MergeFrom(const KeyPoint_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.KeyPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arun64keyframeuniqueid_.MergeFrom(from.arun64keyframeuniqueid_);
  arun64keyframeindex_.MergeFrom(from.arun64keyframeindex_);
  arstkeypointimage_.MergeFrom(from.arstkeypointimage_);
  if (from.has_stlocation()) {
    _internal_mutable_stlocation()->::VgeoDB::common::XYZ32_t::MergeFrom(from._internal_stlocation());
  }
  if (from.has_udescriptor()) {
    _internal_mutable_udescriptor()->::VgeoDB::LocalFeatureDesc::MergeFrom(from._internal_udescriptor());
  }
  if (from.un64index() != 0) {
    _internal_set_un64index(from._internal_un64index());
  }
  if (from.un64timestamp() != 0) {
    _internal_set_un64timestamp(from._internal_un64timestamp());
  }
  if (!(from.fsimilarity() <= 0 && from.fsimilarity() >= 0)) {
    _internal_set_fsimilarity(from._internal_fsimilarity());
  }
}

void KeyPoint_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.KeyPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPoint_t::CopyFrom(const KeyPoint_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.KeyPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPoint_t::IsInitialized() const {
  return true;
}

void KeyPoint_t::InternalSwap(KeyPoint_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arun64keyframeuniqueid_.InternalSwap(&other->arun64keyframeuniqueid_);
  arun64keyframeindex_.InternalSwap(&other->arun64keyframeindex_);
  arstkeypointimage_.InternalSwap(&other->arstkeypointimage_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPoint_t, fsimilarity_)
      + sizeof(KeyPoint_t::fsimilarity_)
      - PROTOBUF_FIELD_OFFSET(KeyPoint_t, stlocation_)>(
          reinterpret_cast<char*>(&stlocation_),
          reinterpret_cast<char*>(&other->stlocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPoint_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeature::_Internal {
 public:
  static const ::VgeoDB::LocalFeatMeta_t& stmeta(const LocalFeature* msg);
};

const ::VgeoDB::LocalFeatMeta_t&
LocalFeature::_Internal::stmeta(const LocalFeature* msg) {
  return *msg->stmeta_;
}
LocalFeature::LocalFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stkeypoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.LocalFeature)
}
LocalFeature::LocalFeature(const LocalFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stkeypoint_(from.stkeypoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stmeta()) {
    stmeta_ = new ::VgeoDB::LocalFeatMeta_t(*from.stmeta_);
  } else {
    stmeta_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.LocalFeature)
}

void LocalFeature::SharedCtor() {
stmeta_ = nullptr;
}

LocalFeature::~LocalFeature() {
  // @@protoc_insertion_point(destructor:VgeoDB.LocalFeature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stmeta_;
}

void LocalFeature::ArenaDtor(void* object) {
  LocalFeature* _this = reinterpret_cast< LocalFeature* >(object);
  (void)_this;
}
void LocalFeature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.LocalFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stkeypoint_.Clear();
  if (GetArena() == nullptr && stmeta_ != nullptr) {
    delete stmeta_;
  }
  stmeta_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.LocalFeatMeta_t stMeta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmeta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VgeoDB.KeyPoint_t stKeypoint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stkeypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.LocalFeature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.LocalFeatMeta_t stMeta = 1;
  if (this->has_stmeta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stmeta(this), target, stream);
  }

  // repeated .VgeoDB.KeyPoint_t stKeypoint = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stkeypoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stkeypoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.LocalFeature)
  return target;
}

size_t LocalFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.LocalFeature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.KeyPoint_t stKeypoint = 2;
  total_size += 1UL * this->_internal_stkeypoint_size();
  for (const auto& msg : this->stkeypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .VgeoDB.LocalFeatMeta_t stMeta = 1;
  if (this->has_stmeta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmeta_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.LocalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.LocalFeature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.LocalFeature)
    MergeFrom(*source);
  }
}

void LocalFeature::MergeFrom(const LocalFeature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.LocalFeature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stkeypoint_.MergeFrom(from.stkeypoint_);
  if (from.has_stmeta()) {
    _internal_mutable_stmeta()->::VgeoDB::LocalFeatMeta_t::MergeFrom(from._internal_stmeta());
  }
}

void LocalFeature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.LocalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeature::CopyFrom(const LocalFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.LocalFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeature::IsInitialized() const {
  return true;
}

void LocalFeature::InternalSwap(LocalFeature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stkeypoint_.InternalSwap(&other->stkeypoint_);
  swap(stmeta_, other->stmeta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatureSet::_Internal {
 public:
};

LocalFeatureSet::LocalFeatureSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstlocalfeature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.LocalFeatureSet)
}
LocalFeatureSet::LocalFeatureSet(const LocalFeatureSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstlocalfeature_(from.arstlocalfeature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VgeoDB.LocalFeatureSet)
}

void LocalFeatureSet::SharedCtor() {
}

LocalFeatureSet::~LocalFeatureSet() {
  // @@protoc_insertion_point(destructor:VgeoDB.LocalFeatureSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatureSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalFeatureSet::ArenaDtor(void* object) {
  LocalFeatureSet* _this = reinterpret_cast< LocalFeatureSet* >(object);
  (void)_this;
}
void LocalFeatureSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatureSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatureSet::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.LocalFeatureSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstlocalfeature_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatureSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VgeoDB.LocalFeature arstLocalFeature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstlocalfeature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatureSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.LocalFeatureSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VgeoDB.LocalFeature arstLocalFeature = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstlocalfeature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arstlocalfeature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.LocalFeatureSet)
  return target;
}

size_t LocalFeatureSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.LocalFeatureSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.LocalFeature arstLocalFeature = 1;
  total_size += 1UL * this->_internal_arstlocalfeature_size();
  for (const auto& msg : this->arstlocalfeature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatureSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.LocalFeatureSet)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatureSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatureSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.LocalFeatureSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.LocalFeatureSet)
    MergeFrom(*source);
  }
}

void LocalFeatureSet::MergeFrom(const LocalFeatureSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.LocalFeatureSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstlocalfeature_.MergeFrom(from.arstlocalfeature_);
}

void LocalFeatureSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.LocalFeatureSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatureSet::CopyFrom(const LocalFeatureSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.LocalFeatureSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatureSet::IsInitialized() const {
  return true;
}

void LocalFeatureSet::InternalSwap(LocalFeatureSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstlocalfeature_.InternalSwap(&other->arstlocalfeature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatureSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VgeoDB::SuperPointDesc_t* Arena::CreateMaybeMessage< ::VgeoDB::SuperPointDesc_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::SuperPointDesc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::KP2DDesc_t* Arena::CreateMaybeMessage< ::VgeoDB::KP2DDesc_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::KP2DDesc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::LocalFeatureDesc* Arena::CreateMaybeMessage< ::VgeoDB::LocalFeatureDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::LocalFeatureDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::LocalFeatMeta_t* Arena::CreateMaybeMessage< ::VgeoDB::LocalFeatMeta_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::LocalFeatMeta_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::KeyPoint_t* Arena::CreateMaybeMessage< ::VgeoDB::KeyPoint_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::KeyPoint_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::LocalFeature* Arena::CreateMaybeMessage< ::VgeoDB::LocalFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::LocalFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::LocalFeatureSet* Arena::CreateMaybeMessage< ::VgeoDB::LocalFeatureSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::LocalFeatureSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
