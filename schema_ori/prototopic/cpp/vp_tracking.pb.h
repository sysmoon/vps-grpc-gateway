// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_tracking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vp_5ftracking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vp_5ftracking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vp_5ftracking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vp_5ftracking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5ftracking_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_vp_5ftracking_2eproto_metadata_getter(int index);
namespace vp {
namespace tracking {
class FramePoseInfo_t;
struct FramePoseInfo_tDefaultTypeInternal;
extern FramePoseInfo_tDefaultTypeInternal _FramePoseInfo_t_default_instance_;
class KalmanFilter_t;
struct KalmanFilter_tDefaultTypeInternal;
extern KalmanFilter_tDefaultTypeInternal _KalmanFilter_t_default_instance_;
class MetaTrackingMode_t;
struct MetaTrackingMode_tDefaultTypeInternal;
extern MetaTrackingMode_tDefaultTypeInternal _MetaTrackingMode_t_default_instance_;
class Param_t;
struct Param_tDefaultTypeInternal;
extern Param_tDefaultTypeInternal _Param_t_default_instance_;
class PoseInfo_t;
struct PoseInfo_tDefaultTypeInternal;
extern PoseInfo_tDefaultTypeInternal _PoseInfo_t_default_instance_;
class Pose_t;
struct Pose_tDefaultTypeInternal;
extern Pose_tDefaultTypeInternal _Pose_t_default_instance_;
}  // namespace tracking
}  // namespace vp
PROTOBUF_NAMESPACE_OPEN
template<> ::vp::tracking::FramePoseInfo_t* Arena::CreateMaybeMessage<::vp::tracking::FramePoseInfo_t>(Arena*);
template<> ::vp::tracking::KalmanFilter_t* Arena::CreateMaybeMessage<::vp::tracking::KalmanFilter_t>(Arena*);
template<> ::vp::tracking::MetaTrackingMode_t* Arena::CreateMaybeMessage<::vp::tracking::MetaTrackingMode_t>(Arena*);
template<> ::vp::tracking::Param_t* Arena::CreateMaybeMessage<::vp::tracking::Param_t>(Arena*);
template<> ::vp::tracking::PoseInfo_t* Arena::CreateMaybeMessage<::vp::tracking::PoseInfo_t>(Arena*);
template<> ::vp::tracking::Pose_t* Arena::CreateMaybeMessage<::vp::tracking::Pose_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vp {
namespace tracking {

enum VPStatusTrackingMode : int {
  eLOST = 0,
  eINITIALIZED = 1,
  eLOCALIZED = 2,
  eTRACKED = 3,
  eCOSTING = 4,
  eTRANSITION = 5,
  VPStatusTrackingMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VPStatusTrackingMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VPStatusTrackingMode_IsValid(int value);
constexpr VPStatusTrackingMode VPStatusTrackingMode_MIN = eLOST;
constexpr VPStatusTrackingMode VPStatusTrackingMode_MAX = eTRANSITION;
constexpr int VPStatusTrackingMode_ARRAYSIZE = VPStatusTrackingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPStatusTrackingMode_descriptor();
template<typename T>
inline const std::string& VPStatusTrackingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VPStatusTrackingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VPStatusTrackingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VPStatusTrackingMode_descriptor(), enum_t_value);
}
inline bool VPStatusTrackingMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VPStatusTrackingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VPStatusTrackingMode>(
    VPStatusTrackingMode_descriptor(), name, value);
}
// ===================================================================

class Pose_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vp.tracking.Pose_t) */ {
 public:
  inline Pose_t() : Pose_t(nullptr) {}
  virtual ~Pose_t();
  explicit constexpr Pose_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose_t(const Pose_t& from);
  Pose_t(Pose_t&& from) noexcept
    : Pose_t() {
    *this = ::std::move(from);
  }

  inline Pose_t& operator=(const Pose_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose_t& operator=(Pose_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose_t* internal_default_instance() {
    return reinterpret_cast<const Pose_t*>(
               &_Pose_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose_t& a, Pose_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose_t* New() const final {
    return CreateMaybeMessage<Pose_t>(nullptr);
  }

  Pose_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose_t& from);
  void MergeFrom(const Pose_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vp.tracking.Pose_t";
  }
  protected:
  explicit Pose_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5ftracking_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF64XFieldNumber = 1,
    kF64YFieldNumber = 2,
    kF64ZFieldNumber = 3,
    kF32QXFieldNumber = 4,
    kF32QYFieldNumber = 5,
    kF32QZFieldNumber = 6,
    kF32QWFieldNumber = 7,
  };
  // double f64X = 1;
  void clear_f64x();
  double f64x() const;
  void set_f64x(double value);
  private:
  double _internal_f64x() const;
  void _internal_set_f64x(double value);
  public:

  // double f64Y = 2;
  void clear_f64y();
  double f64y() const;
  void set_f64y(double value);
  private:
  double _internal_f64y() const;
  void _internal_set_f64y(double value);
  public:

  // double f64Z = 3;
  void clear_f64z();
  double f64z() const;
  void set_f64z(double value);
  private:
  double _internal_f64z() const;
  void _internal_set_f64z(double value);
  public:

  // float f32qX = 4;
  void clear_f32qx();
  float f32qx() const;
  void set_f32qx(float value);
  private:
  float _internal_f32qx() const;
  void _internal_set_f32qx(float value);
  public:

  // float f32qY = 5;
  void clear_f32qy();
  float f32qy() const;
  void set_f32qy(float value);
  private:
  float _internal_f32qy() const;
  void _internal_set_f32qy(float value);
  public:

  // float f32qZ = 6;
  void clear_f32qz();
  float f32qz() const;
  void set_f32qz(float value);
  private:
  float _internal_f32qz() const;
  void _internal_set_f32qz(float value);
  public:

  // float f32qW = 7;
  void clear_f32qw();
  float f32qw() const;
  void set_f32qw(float value);
  private:
  float _internal_f32qw() const;
  void _internal_set_f32qw(float value);
  public:

  // @@protoc_insertion_point(class_scope:vp.tracking.Pose_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double f64x_;
  double f64y_;
  double f64z_;
  float f32qx_;
  float f32qy_;
  float f32qz_;
  float f32qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class PoseInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vp.tracking.PoseInfo_t) */ {
 public:
  inline PoseInfo_t() : PoseInfo_t(nullptr) {}
  virtual ~PoseInfo_t();
  explicit constexpr PoseInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseInfo_t(const PoseInfo_t& from);
  PoseInfo_t(PoseInfo_t&& from) noexcept
    : PoseInfo_t() {
    *this = ::std::move(from);
  }

  inline PoseInfo_t& operator=(const PoseInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseInfo_t& operator=(PoseInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseInfo_t* internal_default_instance() {
    return reinterpret_cast<const PoseInfo_t*>(
               &_PoseInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PoseInfo_t& a, PoseInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseInfo_t* New() const final {
    return CreateMaybeMessage<PoseInfo_t>(nullptr);
  }

  PoseInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseInfo_t& from);
  void MergeFrom(const PoseInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vp.tracking.PoseInfo_t";
  }
  protected:
  explicit PoseInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5ftracking_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStPoseFieldNumber = 4,
    kU64TimestampFieldNumber = 1,
    kBPoseFlagFieldNumber = 2,
    kF32PoseConfidenceFieldNumber = 3,
  };
  // .vp.tracking.Pose_t stPose = 4;
  bool has_stpose() const;
  private:
  bool _internal_has_stpose() const;
  public:
  void clear_stpose();
  const ::vp::tracking::Pose_t& stpose() const;
  ::vp::tracking::Pose_t* release_stpose();
  ::vp::tracking::Pose_t* mutable_stpose();
  void set_allocated_stpose(::vp::tracking::Pose_t* stpose);
  private:
  const ::vp::tracking::Pose_t& _internal_stpose() const;
  ::vp::tracking::Pose_t* _internal_mutable_stpose();
  public:
  void unsafe_arena_set_allocated_stpose(
      ::vp::tracking::Pose_t* stpose);
  ::vp::tracking::Pose_t* unsafe_arena_release_stpose();

  // uint64 u64Timestamp = 1;
  void clear_u64timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64timestamp() const;
  void set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64timestamp() const;
  void _internal_set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool bPoseFlag = 2;
  void clear_bposeflag();
  bool bposeflag() const;
  void set_bposeflag(bool value);
  private:
  bool _internal_bposeflag() const;
  void _internal_set_bposeflag(bool value);
  public:

  // float f32PoseConfidence = 3;
  void clear_f32poseconfidence();
  float f32poseconfidence() const;
  void set_f32poseconfidence(float value);
  private:
  float _internal_f32poseconfidence() const;
  void _internal_set_f32poseconfidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:vp.tracking.PoseInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vp::tracking::Pose_t* stpose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64timestamp_;
  bool bposeflag_;
  float f32poseconfidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class FramePoseInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vp.tracking.FramePoseInfo_t) */ {
 public:
  inline FramePoseInfo_t() : FramePoseInfo_t(nullptr) {}
  virtual ~FramePoseInfo_t();
  explicit constexpr FramePoseInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FramePoseInfo_t(const FramePoseInfo_t& from);
  FramePoseInfo_t(FramePoseInfo_t&& from) noexcept
    : FramePoseInfo_t() {
    *this = ::std::move(from);
  }

  inline FramePoseInfo_t& operator=(const FramePoseInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline FramePoseInfo_t& operator=(FramePoseInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FramePoseInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const FramePoseInfo_t* internal_default_instance() {
    return reinterpret_cast<const FramePoseInfo_t*>(
               &_FramePoseInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FramePoseInfo_t& a, FramePoseInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(FramePoseInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FramePoseInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FramePoseInfo_t* New() const final {
    return CreateMaybeMessage<FramePoseInfo_t>(nullptr);
  }

  FramePoseInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FramePoseInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FramePoseInfo_t& from);
  void MergeFrom(const FramePoseInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FramePoseInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vp.tracking.FramePoseInfo_t";
  }
  protected:
  explicit FramePoseInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5ftracking_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStLastDRPoseInfoArrayFieldNumber = 2,
    kStLastEGPoseInfoArrayFieldNumber = 3,
    kStVPSPoseInfoFieldNumber = 1,
  };
  // repeated .vp.tracking.PoseInfo_t stLastDRPoseInfoArray = 2;
  int stlastdrposeinfoarray_size() const;
  private:
  int _internal_stlastdrposeinfoarray_size() const;
  public:
  void clear_stlastdrposeinfoarray();
  ::vp::tracking::PoseInfo_t* mutable_stlastdrposeinfoarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >*
      mutable_stlastdrposeinfoarray();
  private:
  const ::vp::tracking::PoseInfo_t& _internal_stlastdrposeinfoarray(int index) const;
  ::vp::tracking::PoseInfo_t* _internal_add_stlastdrposeinfoarray();
  public:
  const ::vp::tracking::PoseInfo_t& stlastdrposeinfoarray(int index) const;
  ::vp::tracking::PoseInfo_t* add_stlastdrposeinfoarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >&
      stlastdrposeinfoarray() const;

  // repeated .vp.tracking.PoseInfo_t stLastEGPoseInfoArray = 3;
  int stlastegposeinfoarray_size() const;
  private:
  int _internal_stlastegposeinfoarray_size() const;
  public:
  void clear_stlastegposeinfoarray();
  ::vp::tracking::PoseInfo_t* mutable_stlastegposeinfoarray(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >*
      mutable_stlastegposeinfoarray();
  private:
  const ::vp::tracking::PoseInfo_t& _internal_stlastegposeinfoarray(int index) const;
  ::vp::tracking::PoseInfo_t* _internal_add_stlastegposeinfoarray();
  public:
  const ::vp::tracking::PoseInfo_t& stlastegposeinfoarray(int index) const;
  ::vp::tracking::PoseInfo_t* add_stlastegposeinfoarray();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >&
      stlastegposeinfoarray() const;

  // .vp.tracking.PoseInfo_t stVPSPoseInfo = 1;
  bool has_stvpsposeinfo() const;
  private:
  bool _internal_has_stvpsposeinfo() const;
  public:
  void clear_stvpsposeinfo();
  const ::vp::tracking::PoseInfo_t& stvpsposeinfo() const;
  ::vp::tracking::PoseInfo_t* release_stvpsposeinfo();
  ::vp::tracking::PoseInfo_t* mutable_stvpsposeinfo();
  void set_allocated_stvpsposeinfo(::vp::tracking::PoseInfo_t* stvpsposeinfo);
  private:
  const ::vp::tracking::PoseInfo_t& _internal_stvpsposeinfo() const;
  ::vp::tracking::PoseInfo_t* _internal_mutable_stvpsposeinfo();
  public:
  void unsafe_arena_set_allocated_stvpsposeinfo(
      ::vp::tracking::PoseInfo_t* stvpsposeinfo);
  ::vp::tracking::PoseInfo_t* unsafe_arena_release_stvpsposeinfo();

  // @@protoc_insertion_point(class_scope:vp.tracking.FramePoseInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t > stlastdrposeinfoarray_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t > stlastegposeinfoarray_;
  ::vp::tracking::PoseInfo_t* stvpsposeinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class KalmanFilter_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vp.tracking.KalmanFilter_t) */ {
 public:
  inline KalmanFilter_t() : KalmanFilter_t(nullptr) {}
  virtual ~KalmanFilter_t();
  explicit constexpr KalmanFilter_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KalmanFilter_t(const KalmanFilter_t& from);
  KalmanFilter_t(KalmanFilter_t&& from) noexcept
    : KalmanFilter_t() {
    *this = ::std::move(from);
  }

  inline KalmanFilter_t& operator=(const KalmanFilter_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline KalmanFilter_t& operator=(KalmanFilter_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KalmanFilter_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const KalmanFilter_t* internal_default_instance() {
    return reinterpret_cast<const KalmanFilter_t*>(
               &_KalmanFilter_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KalmanFilter_t& a, KalmanFilter_t& b) {
    a.Swap(&b);
  }
  inline void Swap(KalmanFilter_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KalmanFilter_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KalmanFilter_t* New() const final {
    return CreateMaybeMessage<KalmanFilter_t>(nullptr);
  }

  KalmanFilter_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KalmanFilter_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KalmanFilter_t& from);
  void MergeFrom(const KalmanFilter_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KalmanFilter_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vp.tracking.KalmanFilter_t";
  }
  protected:
  explicit KalmanFilter_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5ftracking_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF64StateFieldNumber = 1,
    kF32CovarianceFieldNumber = 2,
  };
  // repeated double f64State = 1;
  int f64state_size() const;
  private:
  int _internal_f64state_size() const;
  public:
  void clear_f64state();
  private:
  double _internal_f64state(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_f64state() const;
  void _internal_add_f64state(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_f64state();
  public:
  double f64state(int index) const;
  void set_f64state(int index, double value);
  void add_f64state(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      f64state() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_f64state();

  // repeated float f32Covariance = 2;
  int f32covariance_size() const;
  private:
  int _internal_f32covariance_size() const;
  public:
  void clear_f32covariance();
  private:
  float _internal_f32covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f32covariance() const;
  void _internal_add_f32covariance(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f32covariance();
  public:
  float f32covariance(int index) const;
  void set_f32covariance(int index, float value);
  void add_f32covariance(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f32covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f32covariance();

  // @@protoc_insertion_point(class_scope:vp.tracking.KalmanFilter_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > f64state_;
  mutable std::atomic<int> _f64state_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f32covariance_;
  mutable std::atomic<int> _f32covariance_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class Param_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vp.tracking.Param_t) */ {
 public:
  inline Param_t() : Param_t(nullptr) {}
  virtual ~Param_t();
  explicit constexpr Param_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Param_t(const Param_t& from);
  Param_t(Param_t&& from) noexcept
    : Param_t() {
    *this = ::std::move(from);
  }

  inline Param_t& operator=(const Param_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Param_t& operator=(Param_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Param_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Param_t* internal_default_instance() {
    return reinterpret_cast<const Param_t*>(
               &_Param_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Param_t& a, Param_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Param_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Param_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Param_t* New() const final {
    return CreateMaybeMessage<Param_t>(nullptr);
  }

  Param_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Param_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Param_t& from);
  void MergeFrom(const Param_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Param_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vp.tracking.Param_t";
  }
  protected:
  explicit Param_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5ftracking_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrNameFieldNumber = 1,
    kStrValFieldNumber = 5,
    kS32ValFieldNumber = 2,
    kF32ValFieldNumber = 3,
    kF64ValFieldNumber = 4,
    kBValFieldNumber = 6,
  };
  // string strName = 1;
  void clear_strname();
  const std::string& strname() const;
  void set_strname(const std::string& value);
  void set_strname(std::string&& value);
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  std::string* mutable_strname();
  std::string* release_strname();
  void set_allocated_strname(std::string* strname);
  private:
  const std::string& _internal_strname() const;
  void _internal_set_strname(const std::string& value);
  std::string* _internal_mutable_strname();
  public:

  // string strVal = 5;
  void clear_strval();
  const std::string& strval() const;
  void set_strval(const std::string& value);
  void set_strval(std::string&& value);
  void set_strval(const char* value);
  void set_strval(const char* value, size_t size);
  std::string* mutable_strval();
  std::string* release_strval();
  void set_allocated_strval(std::string* strval);
  private:
  const std::string& _internal_strval() const;
  void _internal_set_strval(const std::string& value);
  std::string* _internal_mutable_strval();
  public:

  // int32 s32Val = 2;
  void clear_s32val();
  ::PROTOBUF_NAMESPACE_ID::int32 s32val() const;
  void set_s32val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s32val() const;
  void _internal_set_s32val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float f32Val = 3;
  void clear_f32val();
  float f32val() const;
  void set_f32val(float value);
  private:
  float _internal_f32val() const;
  void _internal_set_f32val(float value);
  public:

  // double f64Val = 4;
  void clear_f64val();
  double f64val() const;
  void set_f64val(double value);
  private:
  double _internal_f64val() const;
  void _internal_set_f64val(double value);
  public:

  // bool bVal = 6;
  void clear_bval();
  bool bval() const;
  void set_bval(bool value);
  private:
  bool _internal_bval() const;
  void _internal_set_bval(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vp.tracking.Param_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strval_;
  ::PROTOBUF_NAMESPACE_ID::int32 s32val_;
  float f32val_;
  double f64val_;
  bool bval_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5ftracking_2eproto;
};
// -------------------------------------------------------------------

class MetaTrackingMode_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vp.tracking.MetaTrackingMode_t) */ {
 public:
  inline MetaTrackingMode_t() : MetaTrackingMode_t(nullptr) {}
  virtual ~MetaTrackingMode_t();
  explicit constexpr MetaTrackingMode_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MetaTrackingMode_t(const MetaTrackingMode_t& from);
  MetaTrackingMode_t(MetaTrackingMode_t&& from) noexcept
    : MetaTrackingMode_t() {
    *this = ::std::move(from);
  }

  inline MetaTrackingMode_t& operator=(const MetaTrackingMode_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaTrackingMode_t& operator=(MetaTrackingMode_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaTrackingMode_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const MetaTrackingMode_t* internal_default_instance() {
    return reinterpret_cast<const MetaTrackingMode_t*>(
               &_MetaTrackingMode_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MetaTrackingMode_t& a, MetaTrackingMode_t& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaTrackingMode_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetaTrackingMode_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaTrackingMode_t* New() const final {
    return CreateMaybeMessage<MetaTrackingMode_t>(nullptr);
  }

  MetaTrackingMode_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaTrackingMode_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaTrackingMode_t& from);
  void MergeFrom(const MetaTrackingMode_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaTrackingMode_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vp.tracking.MetaTrackingMode_t";
  }
  protected:
  explicit MetaTrackingMode_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5ftracking_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStVPSPoseInfoFieldNumber = 2,
    kStCorrectingTrFieldNumber = 3,
    kStLinearVelocityKFFieldNumber = 4,
    kStVPSPoseKFFieldNumber = 5,
    kEVPStatusTrackingModeFieldNumber = 1,
  };
  // .vp.tracking.PoseInfo_t stVPSPoseInfo = 2;
  bool has_stvpsposeinfo() const;
  private:
  bool _internal_has_stvpsposeinfo() const;
  public:
  void clear_stvpsposeinfo();
  const ::vp::tracking::PoseInfo_t& stvpsposeinfo() const;
  ::vp::tracking::PoseInfo_t* release_stvpsposeinfo();
  ::vp::tracking::PoseInfo_t* mutable_stvpsposeinfo();
  void set_allocated_stvpsposeinfo(::vp::tracking::PoseInfo_t* stvpsposeinfo);
  private:
  const ::vp::tracking::PoseInfo_t& _internal_stvpsposeinfo() const;
  ::vp::tracking::PoseInfo_t* _internal_mutable_stvpsposeinfo();
  public:
  void unsafe_arena_set_allocated_stvpsposeinfo(
      ::vp::tracking::PoseInfo_t* stvpsposeinfo);
  ::vp::tracking::PoseInfo_t* unsafe_arena_release_stvpsposeinfo();

  // .vp.tracking.Pose_t stCorrectingTr = 3;
  bool has_stcorrectingtr() const;
  private:
  bool _internal_has_stcorrectingtr() const;
  public:
  void clear_stcorrectingtr();
  const ::vp::tracking::Pose_t& stcorrectingtr() const;
  ::vp::tracking::Pose_t* release_stcorrectingtr();
  ::vp::tracking::Pose_t* mutable_stcorrectingtr();
  void set_allocated_stcorrectingtr(::vp::tracking::Pose_t* stcorrectingtr);
  private:
  const ::vp::tracking::Pose_t& _internal_stcorrectingtr() const;
  ::vp::tracking::Pose_t* _internal_mutable_stcorrectingtr();
  public:
  void unsafe_arena_set_allocated_stcorrectingtr(
      ::vp::tracking::Pose_t* stcorrectingtr);
  ::vp::tracking::Pose_t* unsafe_arena_release_stcorrectingtr();

  // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 4;
  bool has_stlinearvelocitykf() const;
  private:
  bool _internal_has_stlinearvelocitykf() const;
  public:
  void clear_stlinearvelocitykf();
  const ::vp::tracking::KalmanFilter_t& stlinearvelocitykf() const;
  ::vp::tracking::KalmanFilter_t* release_stlinearvelocitykf();
  ::vp::tracking::KalmanFilter_t* mutable_stlinearvelocitykf();
  void set_allocated_stlinearvelocitykf(::vp::tracking::KalmanFilter_t* stlinearvelocitykf);
  private:
  const ::vp::tracking::KalmanFilter_t& _internal_stlinearvelocitykf() const;
  ::vp::tracking::KalmanFilter_t* _internal_mutable_stlinearvelocitykf();
  public:
  void unsafe_arena_set_allocated_stlinearvelocitykf(
      ::vp::tracking::KalmanFilter_t* stlinearvelocitykf);
  ::vp::tracking::KalmanFilter_t* unsafe_arena_release_stlinearvelocitykf();

  // .vp.tracking.KalmanFilter_t stVPSPoseKF = 5;
  bool has_stvpsposekf() const;
  private:
  bool _internal_has_stvpsposekf() const;
  public:
  void clear_stvpsposekf();
  const ::vp::tracking::KalmanFilter_t& stvpsposekf() const;
  ::vp::tracking::KalmanFilter_t* release_stvpsposekf();
  ::vp::tracking::KalmanFilter_t* mutable_stvpsposekf();
  void set_allocated_stvpsposekf(::vp::tracking::KalmanFilter_t* stvpsposekf);
  private:
  const ::vp::tracking::KalmanFilter_t& _internal_stvpsposekf() const;
  ::vp::tracking::KalmanFilter_t* _internal_mutable_stvpsposekf();
  public:
  void unsafe_arena_set_allocated_stvpsposekf(
      ::vp::tracking::KalmanFilter_t* stvpsposekf);
  ::vp::tracking::KalmanFilter_t* unsafe_arena_release_stvpsposekf();

  // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 1;
  void clear_evpstatustrackingmode();
  ::vp::tracking::VPStatusTrackingMode evpstatustrackingmode() const;
  void set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value);
  private:
  ::vp::tracking::VPStatusTrackingMode _internal_evpstatustrackingmode() const;
  void _internal_set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value);
  public:

  // @@protoc_insertion_point(class_scope:vp.tracking.MetaTrackingMode_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vp::tracking::PoseInfo_t* stvpsposeinfo_;
  ::vp::tracking::Pose_t* stcorrectingtr_;
  ::vp::tracking::KalmanFilter_t* stlinearvelocitykf_;
  ::vp::tracking::KalmanFilter_t* stvpsposekf_;
  int evpstatustrackingmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5ftracking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose_t

// double f64X = 1;
inline void Pose_t::clear_f64x() {
  f64x_ = 0;
}
inline double Pose_t::_internal_f64x() const {
  return f64x_;
}
inline double Pose_t::f64x() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f64X)
  return _internal_f64x();
}
inline void Pose_t::_internal_set_f64x(double value) {
  
  f64x_ = value;
}
inline void Pose_t::set_f64x(double value) {
  _internal_set_f64x(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f64X)
}

// double f64Y = 2;
inline void Pose_t::clear_f64y() {
  f64y_ = 0;
}
inline double Pose_t::_internal_f64y() const {
  return f64y_;
}
inline double Pose_t::f64y() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f64Y)
  return _internal_f64y();
}
inline void Pose_t::_internal_set_f64y(double value) {
  
  f64y_ = value;
}
inline void Pose_t::set_f64y(double value) {
  _internal_set_f64y(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f64Y)
}

// double f64Z = 3;
inline void Pose_t::clear_f64z() {
  f64z_ = 0;
}
inline double Pose_t::_internal_f64z() const {
  return f64z_;
}
inline double Pose_t::f64z() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f64Z)
  return _internal_f64z();
}
inline void Pose_t::_internal_set_f64z(double value) {
  
  f64z_ = value;
}
inline void Pose_t::set_f64z(double value) {
  _internal_set_f64z(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f64Z)
}

// float f32qX = 4;
inline void Pose_t::clear_f32qx() {
  f32qx_ = 0;
}
inline float Pose_t::_internal_f32qx() const {
  return f32qx_;
}
inline float Pose_t::f32qx() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f32qX)
  return _internal_f32qx();
}
inline void Pose_t::_internal_set_f32qx(float value) {
  
  f32qx_ = value;
}
inline void Pose_t::set_f32qx(float value) {
  _internal_set_f32qx(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f32qX)
}

// float f32qY = 5;
inline void Pose_t::clear_f32qy() {
  f32qy_ = 0;
}
inline float Pose_t::_internal_f32qy() const {
  return f32qy_;
}
inline float Pose_t::f32qy() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f32qY)
  return _internal_f32qy();
}
inline void Pose_t::_internal_set_f32qy(float value) {
  
  f32qy_ = value;
}
inline void Pose_t::set_f32qy(float value) {
  _internal_set_f32qy(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f32qY)
}

// float f32qZ = 6;
inline void Pose_t::clear_f32qz() {
  f32qz_ = 0;
}
inline float Pose_t::_internal_f32qz() const {
  return f32qz_;
}
inline float Pose_t::f32qz() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f32qZ)
  return _internal_f32qz();
}
inline void Pose_t::_internal_set_f32qz(float value) {
  
  f32qz_ = value;
}
inline void Pose_t::set_f32qz(float value) {
  _internal_set_f32qz(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f32qZ)
}

// float f32qW = 7;
inline void Pose_t::clear_f32qw() {
  f32qw_ = 0;
}
inline float Pose_t::_internal_f32qw() const {
  return f32qw_;
}
inline float Pose_t::f32qw() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Pose_t.f32qW)
  return _internal_f32qw();
}
inline void Pose_t::_internal_set_f32qw(float value) {
  
  f32qw_ = value;
}
inline void Pose_t::set_f32qw(float value) {
  _internal_set_f32qw(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Pose_t.f32qW)
}

// -------------------------------------------------------------------

// PoseInfo_t

// uint64 u64Timestamp = 1;
inline void PoseInfo_t::clear_u64timestamp() {
  u64timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PoseInfo_t::_internal_u64timestamp() const {
  return u64timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PoseInfo_t::u64timestamp() const {
  // @@protoc_insertion_point(field_get:vp.tracking.PoseInfo_t.u64Timestamp)
  return _internal_u64timestamp();
}
inline void PoseInfo_t::_internal_set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64timestamp_ = value;
}
inline void PoseInfo_t::set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64timestamp(value);
  // @@protoc_insertion_point(field_set:vp.tracking.PoseInfo_t.u64Timestamp)
}

// bool bPoseFlag = 2;
inline void PoseInfo_t::clear_bposeflag() {
  bposeflag_ = false;
}
inline bool PoseInfo_t::_internal_bposeflag() const {
  return bposeflag_;
}
inline bool PoseInfo_t::bposeflag() const {
  // @@protoc_insertion_point(field_get:vp.tracking.PoseInfo_t.bPoseFlag)
  return _internal_bposeflag();
}
inline void PoseInfo_t::_internal_set_bposeflag(bool value) {
  
  bposeflag_ = value;
}
inline void PoseInfo_t::set_bposeflag(bool value) {
  _internal_set_bposeflag(value);
  // @@protoc_insertion_point(field_set:vp.tracking.PoseInfo_t.bPoseFlag)
}

// float f32PoseConfidence = 3;
inline void PoseInfo_t::clear_f32poseconfidence() {
  f32poseconfidence_ = 0;
}
inline float PoseInfo_t::_internal_f32poseconfidence() const {
  return f32poseconfidence_;
}
inline float PoseInfo_t::f32poseconfidence() const {
  // @@protoc_insertion_point(field_get:vp.tracking.PoseInfo_t.f32PoseConfidence)
  return _internal_f32poseconfidence();
}
inline void PoseInfo_t::_internal_set_f32poseconfidence(float value) {
  
  f32poseconfidence_ = value;
}
inline void PoseInfo_t::set_f32poseconfidence(float value) {
  _internal_set_f32poseconfidence(value);
  // @@protoc_insertion_point(field_set:vp.tracking.PoseInfo_t.f32PoseConfidence)
}

// .vp.tracking.Pose_t stPose = 4;
inline bool PoseInfo_t::_internal_has_stpose() const {
  return this != internal_default_instance() && stpose_ != nullptr;
}
inline bool PoseInfo_t::has_stpose() const {
  return _internal_has_stpose();
}
inline void PoseInfo_t::clear_stpose() {
  if (GetArena() == nullptr && stpose_ != nullptr) {
    delete stpose_;
  }
  stpose_ = nullptr;
}
inline const ::vp::tracking::Pose_t& PoseInfo_t::_internal_stpose() const {
  const ::vp::tracking::Pose_t* p = stpose_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::Pose_t&>(
      ::vp::tracking::_Pose_t_default_instance_);
}
inline const ::vp::tracking::Pose_t& PoseInfo_t::stpose() const {
  // @@protoc_insertion_point(field_get:vp.tracking.PoseInfo_t.stPose)
  return _internal_stpose();
}
inline void PoseInfo_t::unsafe_arena_set_allocated_stpose(
    ::vp::tracking::Pose_t* stpose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stpose_);
  }
  stpose_ = stpose;
  if (stpose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vp.tracking.PoseInfo_t.stPose)
}
inline ::vp::tracking::Pose_t* PoseInfo_t::release_stpose() {
  
  ::vp::tracking::Pose_t* temp = stpose_;
  stpose_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::Pose_t* PoseInfo_t::unsafe_arena_release_stpose() {
  // @@protoc_insertion_point(field_release:vp.tracking.PoseInfo_t.stPose)
  
  ::vp::tracking::Pose_t* temp = stpose_;
  stpose_ = nullptr;
  return temp;
}
inline ::vp::tracking::Pose_t* PoseInfo_t::_internal_mutable_stpose() {
  
  if (stpose_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::Pose_t>(GetArena());
    stpose_ = p;
  }
  return stpose_;
}
inline ::vp::tracking::Pose_t* PoseInfo_t::mutable_stpose() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.PoseInfo_t.stPose)
  return _internal_mutable_stpose();
}
inline void PoseInfo_t::set_allocated_stpose(::vp::tracking::Pose_t* stpose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stpose_;
  }
  if (stpose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stpose);
    if (message_arena != submessage_arena) {
      stpose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stpose, submessage_arena);
    }
    
  } else {
    
  }
  stpose_ = stpose;
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.PoseInfo_t.stPose)
}

// -------------------------------------------------------------------

// FramePoseInfo_t

// .vp.tracking.PoseInfo_t stVPSPoseInfo = 1;
inline bool FramePoseInfo_t::_internal_has_stvpsposeinfo() const {
  return this != internal_default_instance() && stvpsposeinfo_ != nullptr;
}
inline bool FramePoseInfo_t::has_stvpsposeinfo() const {
  return _internal_has_stvpsposeinfo();
}
inline void FramePoseInfo_t::clear_stvpsposeinfo() {
  if (GetArena() == nullptr && stvpsposeinfo_ != nullptr) {
    delete stvpsposeinfo_;
  }
  stvpsposeinfo_ = nullptr;
}
inline const ::vp::tracking::PoseInfo_t& FramePoseInfo_t::_internal_stvpsposeinfo() const {
  const ::vp::tracking::PoseInfo_t* p = stvpsposeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::PoseInfo_t&>(
      ::vp::tracking::_PoseInfo_t_default_instance_);
}
inline const ::vp::tracking::PoseInfo_t& FramePoseInfo_t::stvpsposeinfo() const {
  // @@protoc_insertion_point(field_get:vp.tracking.FramePoseInfo_t.stVPSPoseInfo)
  return _internal_stvpsposeinfo();
}
inline void FramePoseInfo_t::unsafe_arena_set_allocated_stvpsposeinfo(
    ::vp::tracking::PoseInfo_t* stvpsposeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpsposeinfo_);
  }
  stvpsposeinfo_ = stvpsposeinfo;
  if (stvpsposeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vp.tracking.FramePoseInfo_t.stVPSPoseInfo)
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::release_stvpsposeinfo() {
  
  ::vp::tracking::PoseInfo_t* temp = stvpsposeinfo_;
  stvpsposeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::unsafe_arena_release_stvpsposeinfo() {
  // @@protoc_insertion_point(field_release:vp.tracking.FramePoseInfo_t.stVPSPoseInfo)
  
  ::vp::tracking::PoseInfo_t* temp = stvpsposeinfo_;
  stvpsposeinfo_ = nullptr;
  return temp;
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::_internal_mutable_stvpsposeinfo() {
  
  if (stvpsposeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::PoseInfo_t>(GetArena());
    stvpsposeinfo_ = p;
  }
  return stvpsposeinfo_;
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::mutable_stvpsposeinfo() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.FramePoseInfo_t.stVPSPoseInfo)
  return _internal_mutable_stvpsposeinfo();
}
inline void FramePoseInfo_t::set_allocated_stvpsposeinfo(::vp::tracking::PoseInfo_t* stvpsposeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stvpsposeinfo_;
  }
  if (stvpsposeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stvpsposeinfo);
    if (message_arena != submessage_arena) {
      stvpsposeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpsposeinfo, submessage_arena);
    }
    
  } else {
    
  }
  stvpsposeinfo_ = stvpsposeinfo;
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.FramePoseInfo_t.stVPSPoseInfo)
}

// repeated .vp.tracking.PoseInfo_t stLastDRPoseInfoArray = 2;
inline int FramePoseInfo_t::_internal_stlastdrposeinfoarray_size() const {
  return stlastdrposeinfoarray_.size();
}
inline int FramePoseInfo_t::stlastdrposeinfoarray_size() const {
  return _internal_stlastdrposeinfoarray_size();
}
inline void FramePoseInfo_t::clear_stlastdrposeinfoarray() {
  stlastdrposeinfoarray_.Clear();
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::mutable_stlastdrposeinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:vp.tracking.FramePoseInfo_t.stLastDRPoseInfoArray)
  return stlastdrposeinfoarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >*
FramePoseInfo_t::mutable_stlastdrposeinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:vp.tracking.FramePoseInfo_t.stLastDRPoseInfoArray)
  return &stlastdrposeinfoarray_;
}
inline const ::vp::tracking::PoseInfo_t& FramePoseInfo_t::_internal_stlastdrposeinfoarray(int index) const {
  return stlastdrposeinfoarray_.Get(index);
}
inline const ::vp::tracking::PoseInfo_t& FramePoseInfo_t::stlastdrposeinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:vp.tracking.FramePoseInfo_t.stLastDRPoseInfoArray)
  return _internal_stlastdrposeinfoarray(index);
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::_internal_add_stlastdrposeinfoarray() {
  return stlastdrposeinfoarray_.Add();
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::add_stlastdrposeinfoarray() {
  // @@protoc_insertion_point(field_add:vp.tracking.FramePoseInfo_t.stLastDRPoseInfoArray)
  return _internal_add_stlastdrposeinfoarray();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >&
FramePoseInfo_t::stlastdrposeinfoarray() const {
  // @@protoc_insertion_point(field_list:vp.tracking.FramePoseInfo_t.stLastDRPoseInfoArray)
  return stlastdrposeinfoarray_;
}

// repeated .vp.tracking.PoseInfo_t stLastEGPoseInfoArray = 3;
inline int FramePoseInfo_t::_internal_stlastegposeinfoarray_size() const {
  return stlastegposeinfoarray_.size();
}
inline int FramePoseInfo_t::stlastegposeinfoarray_size() const {
  return _internal_stlastegposeinfoarray_size();
}
inline void FramePoseInfo_t::clear_stlastegposeinfoarray() {
  stlastegposeinfoarray_.Clear();
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::mutable_stlastegposeinfoarray(int index) {
  // @@protoc_insertion_point(field_mutable:vp.tracking.FramePoseInfo_t.stLastEGPoseInfoArray)
  return stlastegposeinfoarray_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >*
FramePoseInfo_t::mutable_stlastegposeinfoarray() {
  // @@protoc_insertion_point(field_mutable_list:vp.tracking.FramePoseInfo_t.stLastEGPoseInfoArray)
  return &stlastegposeinfoarray_;
}
inline const ::vp::tracking::PoseInfo_t& FramePoseInfo_t::_internal_stlastegposeinfoarray(int index) const {
  return stlastegposeinfoarray_.Get(index);
}
inline const ::vp::tracking::PoseInfo_t& FramePoseInfo_t::stlastegposeinfoarray(int index) const {
  // @@protoc_insertion_point(field_get:vp.tracking.FramePoseInfo_t.stLastEGPoseInfoArray)
  return _internal_stlastegposeinfoarray(index);
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::_internal_add_stlastegposeinfoarray() {
  return stlastegposeinfoarray_.Add();
}
inline ::vp::tracking::PoseInfo_t* FramePoseInfo_t::add_stlastegposeinfoarray() {
  // @@protoc_insertion_point(field_add:vp.tracking.FramePoseInfo_t.stLastEGPoseInfoArray)
  return _internal_add_stlastegposeinfoarray();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::PoseInfo_t >&
FramePoseInfo_t::stlastegposeinfoarray() const {
  // @@protoc_insertion_point(field_list:vp.tracking.FramePoseInfo_t.stLastEGPoseInfoArray)
  return stlastegposeinfoarray_;
}

// -------------------------------------------------------------------

// KalmanFilter_t

// repeated double f64State = 1;
inline int KalmanFilter_t::_internal_f64state_size() const {
  return f64state_.size();
}
inline int KalmanFilter_t::f64state_size() const {
  return _internal_f64state_size();
}
inline void KalmanFilter_t::clear_f64state() {
  f64state_.Clear();
}
inline double KalmanFilter_t::_internal_f64state(int index) const {
  return f64state_.Get(index);
}
inline double KalmanFilter_t::f64state(int index) const {
  // @@protoc_insertion_point(field_get:vp.tracking.KalmanFilter_t.f64State)
  return _internal_f64state(index);
}
inline void KalmanFilter_t::set_f64state(int index, double value) {
  f64state_.Set(index, value);
  // @@protoc_insertion_point(field_set:vp.tracking.KalmanFilter_t.f64State)
}
inline void KalmanFilter_t::_internal_add_f64state(double value) {
  f64state_.Add(value);
}
inline void KalmanFilter_t::add_f64state(double value) {
  _internal_add_f64state(value);
  // @@protoc_insertion_point(field_add:vp.tracking.KalmanFilter_t.f64State)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KalmanFilter_t::_internal_f64state() const {
  return f64state_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
KalmanFilter_t::f64state() const {
  // @@protoc_insertion_point(field_list:vp.tracking.KalmanFilter_t.f64State)
  return _internal_f64state();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KalmanFilter_t::_internal_mutable_f64state() {
  return &f64state_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
KalmanFilter_t::mutable_f64state() {
  // @@protoc_insertion_point(field_mutable_list:vp.tracking.KalmanFilter_t.f64State)
  return _internal_mutable_f64state();
}

// repeated float f32Covariance = 2;
inline int KalmanFilter_t::_internal_f32covariance_size() const {
  return f32covariance_.size();
}
inline int KalmanFilter_t::f32covariance_size() const {
  return _internal_f32covariance_size();
}
inline void KalmanFilter_t::clear_f32covariance() {
  f32covariance_.Clear();
}
inline float KalmanFilter_t::_internal_f32covariance(int index) const {
  return f32covariance_.Get(index);
}
inline float KalmanFilter_t::f32covariance(int index) const {
  // @@protoc_insertion_point(field_get:vp.tracking.KalmanFilter_t.f32Covariance)
  return _internal_f32covariance(index);
}
inline void KalmanFilter_t::set_f32covariance(int index, float value) {
  f32covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:vp.tracking.KalmanFilter_t.f32Covariance)
}
inline void KalmanFilter_t::_internal_add_f32covariance(float value) {
  f32covariance_.Add(value);
}
inline void KalmanFilter_t::add_f32covariance(float value) {
  _internal_add_f32covariance(value);
  // @@protoc_insertion_point(field_add:vp.tracking.KalmanFilter_t.f32Covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KalmanFilter_t::_internal_f32covariance() const {
  return f32covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KalmanFilter_t::f32covariance() const {
  // @@protoc_insertion_point(field_list:vp.tracking.KalmanFilter_t.f32Covariance)
  return _internal_f32covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KalmanFilter_t::_internal_mutable_f32covariance() {
  return &f32covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KalmanFilter_t::mutable_f32covariance() {
  // @@protoc_insertion_point(field_mutable_list:vp.tracking.KalmanFilter_t.f32Covariance)
  return _internal_mutable_f32covariance();
}

// -------------------------------------------------------------------

// Param_t

// string strName = 1;
inline void Param_t::clear_strname() {
  strname_.ClearToEmpty();
}
inline const std::string& Param_t::strname() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Param_t.strName)
  return _internal_strname();
}
inline void Param_t::set_strname(const std::string& value) {
  _internal_set_strname(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Param_t.strName)
}
inline std::string* Param_t::mutable_strname() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.Param_t.strName)
  return _internal_mutable_strname();
}
inline const std::string& Param_t::_internal_strname() const {
  return strname_.Get();
}
inline void Param_t::_internal_set_strname(const std::string& value) {
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Param_t::set_strname(std::string&& value) {
  
  strname_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vp.tracking.Param_t.strName)
}
inline void Param_t::set_strname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vp.tracking.Param_t.strName)
}
inline void Param_t::set_strname(const char* value,
    size_t size) {
  
  strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vp.tracking.Param_t.strName)
}
inline std::string* Param_t::_internal_mutable_strname() {
  
  return strname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Param_t::release_strname() {
  // @@protoc_insertion_point(field_release:vp.tracking.Param_t.strName)
  return strname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Param_t::set_allocated_strname(std::string* strname) {
  if (strname != nullptr) {
    
  } else {
    
  }
  strname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.Param_t.strName)
}

// int32 s32Val = 2;
inline void Param_t::clear_s32val() {
  s32val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Param_t::_internal_s32val() const {
  return s32val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Param_t::s32val() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Param_t.s32Val)
  return _internal_s32val();
}
inline void Param_t::_internal_set_s32val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s32val_ = value;
}
inline void Param_t::set_s32val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s32val(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Param_t.s32Val)
}

// float f32Val = 3;
inline void Param_t::clear_f32val() {
  f32val_ = 0;
}
inline float Param_t::_internal_f32val() const {
  return f32val_;
}
inline float Param_t::f32val() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Param_t.f32Val)
  return _internal_f32val();
}
inline void Param_t::_internal_set_f32val(float value) {
  
  f32val_ = value;
}
inline void Param_t::set_f32val(float value) {
  _internal_set_f32val(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Param_t.f32Val)
}

// double f64Val = 4;
inline void Param_t::clear_f64val() {
  f64val_ = 0;
}
inline double Param_t::_internal_f64val() const {
  return f64val_;
}
inline double Param_t::f64val() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Param_t.f64Val)
  return _internal_f64val();
}
inline void Param_t::_internal_set_f64val(double value) {
  
  f64val_ = value;
}
inline void Param_t::set_f64val(double value) {
  _internal_set_f64val(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Param_t.f64Val)
}

// string strVal = 5;
inline void Param_t::clear_strval() {
  strval_.ClearToEmpty();
}
inline const std::string& Param_t::strval() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Param_t.strVal)
  return _internal_strval();
}
inline void Param_t::set_strval(const std::string& value) {
  _internal_set_strval(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Param_t.strVal)
}
inline std::string* Param_t::mutable_strval() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.Param_t.strVal)
  return _internal_mutable_strval();
}
inline const std::string& Param_t::_internal_strval() const {
  return strval_.Get();
}
inline void Param_t::_internal_set_strval(const std::string& value) {
  
  strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Param_t::set_strval(std::string&& value) {
  
  strval_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:vp.tracking.Param_t.strVal)
}
inline void Param_t::set_strval(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:vp.tracking.Param_t.strVal)
}
inline void Param_t::set_strval(const char* value,
    size_t size) {
  
  strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:vp.tracking.Param_t.strVal)
}
inline std::string* Param_t::_internal_mutable_strval() {
  
  return strval_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Param_t::release_strval() {
  // @@protoc_insertion_point(field_release:vp.tracking.Param_t.strVal)
  return strval_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Param_t::set_allocated_strval(std::string* strval) {
  if (strval != nullptr) {
    
  } else {
    
  }
  strval_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strval,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.Param_t.strVal)
}

// bool bVal = 6;
inline void Param_t::clear_bval() {
  bval_ = false;
}
inline bool Param_t::_internal_bval() const {
  return bval_;
}
inline bool Param_t::bval() const {
  // @@protoc_insertion_point(field_get:vp.tracking.Param_t.bVal)
  return _internal_bval();
}
inline void Param_t::_internal_set_bval(bool value) {
  
  bval_ = value;
}
inline void Param_t::set_bval(bool value) {
  _internal_set_bval(value);
  // @@protoc_insertion_point(field_set:vp.tracking.Param_t.bVal)
}

// -------------------------------------------------------------------

// MetaTrackingMode_t

// .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 1;
inline void MetaTrackingMode_t::clear_evpstatustrackingmode() {
  evpstatustrackingmode_ = 0;
}
inline ::vp::tracking::VPStatusTrackingMode MetaTrackingMode_t::_internal_evpstatustrackingmode() const {
  return static_cast< ::vp::tracking::VPStatusTrackingMode >(evpstatustrackingmode_);
}
inline ::vp::tracking::VPStatusTrackingMode MetaTrackingMode_t::evpstatustrackingmode() const {
  // @@protoc_insertion_point(field_get:vp.tracking.MetaTrackingMode_t.eVPStatusTrackingMode)
  return _internal_evpstatustrackingmode();
}
inline void MetaTrackingMode_t::_internal_set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value) {
  
  evpstatustrackingmode_ = value;
}
inline void MetaTrackingMode_t::set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value) {
  _internal_set_evpstatustrackingmode(value);
  // @@protoc_insertion_point(field_set:vp.tracking.MetaTrackingMode_t.eVPStatusTrackingMode)
}

// .vp.tracking.PoseInfo_t stVPSPoseInfo = 2;
inline bool MetaTrackingMode_t::_internal_has_stvpsposeinfo() const {
  return this != internal_default_instance() && stvpsposeinfo_ != nullptr;
}
inline bool MetaTrackingMode_t::has_stvpsposeinfo() const {
  return _internal_has_stvpsposeinfo();
}
inline void MetaTrackingMode_t::clear_stvpsposeinfo() {
  if (GetArena() == nullptr && stvpsposeinfo_ != nullptr) {
    delete stvpsposeinfo_;
  }
  stvpsposeinfo_ = nullptr;
}
inline const ::vp::tracking::PoseInfo_t& MetaTrackingMode_t::_internal_stvpsposeinfo() const {
  const ::vp::tracking::PoseInfo_t* p = stvpsposeinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::PoseInfo_t&>(
      ::vp::tracking::_PoseInfo_t_default_instance_);
}
inline const ::vp::tracking::PoseInfo_t& MetaTrackingMode_t::stvpsposeinfo() const {
  // @@protoc_insertion_point(field_get:vp.tracking.MetaTrackingMode_t.stVPSPoseInfo)
  return _internal_stvpsposeinfo();
}
inline void MetaTrackingMode_t::unsafe_arena_set_allocated_stvpsposeinfo(
    ::vp::tracking::PoseInfo_t* stvpsposeinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpsposeinfo_);
  }
  stvpsposeinfo_ = stvpsposeinfo;
  if (stvpsposeinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vp.tracking.MetaTrackingMode_t.stVPSPoseInfo)
}
inline ::vp::tracking::PoseInfo_t* MetaTrackingMode_t::release_stvpsposeinfo() {
  
  ::vp::tracking::PoseInfo_t* temp = stvpsposeinfo_;
  stvpsposeinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::PoseInfo_t* MetaTrackingMode_t::unsafe_arena_release_stvpsposeinfo() {
  // @@protoc_insertion_point(field_release:vp.tracking.MetaTrackingMode_t.stVPSPoseInfo)
  
  ::vp::tracking::PoseInfo_t* temp = stvpsposeinfo_;
  stvpsposeinfo_ = nullptr;
  return temp;
}
inline ::vp::tracking::PoseInfo_t* MetaTrackingMode_t::_internal_mutable_stvpsposeinfo() {
  
  if (stvpsposeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::PoseInfo_t>(GetArena());
    stvpsposeinfo_ = p;
  }
  return stvpsposeinfo_;
}
inline ::vp::tracking::PoseInfo_t* MetaTrackingMode_t::mutable_stvpsposeinfo() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.MetaTrackingMode_t.stVPSPoseInfo)
  return _internal_mutable_stvpsposeinfo();
}
inline void MetaTrackingMode_t::set_allocated_stvpsposeinfo(::vp::tracking::PoseInfo_t* stvpsposeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stvpsposeinfo_;
  }
  if (stvpsposeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stvpsposeinfo);
    if (message_arena != submessage_arena) {
      stvpsposeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpsposeinfo, submessage_arena);
    }
    
  } else {
    
  }
  stvpsposeinfo_ = stvpsposeinfo;
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.MetaTrackingMode_t.stVPSPoseInfo)
}

// .vp.tracking.Pose_t stCorrectingTr = 3;
inline bool MetaTrackingMode_t::_internal_has_stcorrectingtr() const {
  return this != internal_default_instance() && stcorrectingtr_ != nullptr;
}
inline bool MetaTrackingMode_t::has_stcorrectingtr() const {
  return _internal_has_stcorrectingtr();
}
inline void MetaTrackingMode_t::clear_stcorrectingtr() {
  if (GetArena() == nullptr && stcorrectingtr_ != nullptr) {
    delete stcorrectingtr_;
  }
  stcorrectingtr_ = nullptr;
}
inline const ::vp::tracking::Pose_t& MetaTrackingMode_t::_internal_stcorrectingtr() const {
  const ::vp::tracking::Pose_t* p = stcorrectingtr_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::Pose_t&>(
      ::vp::tracking::_Pose_t_default_instance_);
}
inline const ::vp::tracking::Pose_t& MetaTrackingMode_t::stcorrectingtr() const {
  // @@protoc_insertion_point(field_get:vp.tracking.MetaTrackingMode_t.stCorrectingTr)
  return _internal_stcorrectingtr();
}
inline void MetaTrackingMode_t::unsafe_arena_set_allocated_stcorrectingtr(
    ::vp::tracking::Pose_t* stcorrectingtr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stcorrectingtr_);
  }
  stcorrectingtr_ = stcorrectingtr;
  if (stcorrectingtr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vp.tracking.MetaTrackingMode_t.stCorrectingTr)
}
inline ::vp::tracking::Pose_t* MetaTrackingMode_t::release_stcorrectingtr() {
  
  ::vp::tracking::Pose_t* temp = stcorrectingtr_;
  stcorrectingtr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::Pose_t* MetaTrackingMode_t::unsafe_arena_release_stcorrectingtr() {
  // @@protoc_insertion_point(field_release:vp.tracking.MetaTrackingMode_t.stCorrectingTr)
  
  ::vp::tracking::Pose_t* temp = stcorrectingtr_;
  stcorrectingtr_ = nullptr;
  return temp;
}
inline ::vp::tracking::Pose_t* MetaTrackingMode_t::_internal_mutable_stcorrectingtr() {
  
  if (stcorrectingtr_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::Pose_t>(GetArena());
    stcorrectingtr_ = p;
  }
  return stcorrectingtr_;
}
inline ::vp::tracking::Pose_t* MetaTrackingMode_t::mutable_stcorrectingtr() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.MetaTrackingMode_t.stCorrectingTr)
  return _internal_mutable_stcorrectingtr();
}
inline void MetaTrackingMode_t::set_allocated_stcorrectingtr(::vp::tracking::Pose_t* stcorrectingtr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stcorrectingtr_;
  }
  if (stcorrectingtr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stcorrectingtr);
    if (message_arena != submessage_arena) {
      stcorrectingtr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stcorrectingtr, submessage_arena);
    }
    
  } else {
    
  }
  stcorrectingtr_ = stcorrectingtr;
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.MetaTrackingMode_t.stCorrectingTr)
}

// .vp.tracking.KalmanFilter_t stLinearVelocityKF = 4;
inline bool MetaTrackingMode_t::_internal_has_stlinearvelocitykf() const {
  return this != internal_default_instance() && stlinearvelocitykf_ != nullptr;
}
inline bool MetaTrackingMode_t::has_stlinearvelocitykf() const {
  return _internal_has_stlinearvelocitykf();
}
inline void MetaTrackingMode_t::clear_stlinearvelocitykf() {
  if (GetArena() == nullptr && stlinearvelocitykf_ != nullptr) {
    delete stlinearvelocitykf_;
  }
  stlinearvelocitykf_ = nullptr;
}
inline const ::vp::tracking::KalmanFilter_t& MetaTrackingMode_t::_internal_stlinearvelocitykf() const {
  const ::vp::tracking::KalmanFilter_t* p = stlinearvelocitykf_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::KalmanFilter_t&>(
      ::vp::tracking::_KalmanFilter_t_default_instance_);
}
inline const ::vp::tracking::KalmanFilter_t& MetaTrackingMode_t::stlinearvelocitykf() const {
  // @@protoc_insertion_point(field_get:vp.tracking.MetaTrackingMode_t.stLinearVelocityKF)
  return _internal_stlinearvelocitykf();
}
inline void MetaTrackingMode_t::unsafe_arena_set_allocated_stlinearvelocitykf(
    ::vp::tracking::KalmanFilter_t* stlinearvelocitykf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlinearvelocitykf_);
  }
  stlinearvelocitykf_ = stlinearvelocitykf;
  if (stlinearvelocitykf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vp.tracking.MetaTrackingMode_t.stLinearVelocityKF)
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::release_stlinearvelocitykf() {
  
  ::vp::tracking::KalmanFilter_t* temp = stlinearvelocitykf_;
  stlinearvelocitykf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::unsafe_arena_release_stlinearvelocitykf() {
  // @@protoc_insertion_point(field_release:vp.tracking.MetaTrackingMode_t.stLinearVelocityKF)
  
  ::vp::tracking::KalmanFilter_t* temp = stlinearvelocitykf_;
  stlinearvelocitykf_ = nullptr;
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::_internal_mutable_stlinearvelocitykf() {
  
  if (stlinearvelocitykf_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::KalmanFilter_t>(GetArena());
    stlinearvelocitykf_ = p;
  }
  return stlinearvelocitykf_;
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::mutable_stlinearvelocitykf() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.MetaTrackingMode_t.stLinearVelocityKF)
  return _internal_mutable_stlinearvelocitykf();
}
inline void MetaTrackingMode_t::set_allocated_stlinearvelocitykf(::vp::tracking::KalmanFilter_t* stlinearvelocitykf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stlinearvelocitykf_;
  }
  if (stlinearvelocitykf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stlinearvelocitykf);
    if (message_arena != submessage_arena) {
      stlinearvelocitykf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stlinearvelocitykf, submessage_arena);
    }
    
  } else {
    
  }
  stlinearvelocitykf_ = stlinearvelocitykf;
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.MetaTrackingMode_t.stLinearVelocityKF)
}

// .vp.tracking.KalmanFilter_t stVPSPoseKF = 5;
inline bool MetaTrackingMode_t::_internal_has_stvpsposekf() const {
  return this != internal_default_instance() && stvpsposekf_ != nullptr;
}
inline bool MetaTrackingMode_t::has_stvpsposekf() const {
  return _internal_has_stvpsposekf();
}
inline void MetaTrackingMode_t::clear_stvpsposekf() {
  if (GetArena() == nullptr && stvpsposekf_ != nullptr) {
    delete stvpsposekf_;
  }
  stvpsposekf_ = nullptr;
}
inline const ::vp::tracking::KalmanFilter_t& MetaTrackingMode_t::_internal_stvpsposekf() const {
  const ::vp::tracking::KalmanFilter_t* p = stvpsposekf_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::KalmanFilter_t&>(
      ::vp::tracking::_KalmanFilter_t_default_instance_);
}
inline const ::vp::tracking::KalmanFilter_t& MetaTrackingMode_t::stvpsposekf() const {
  // @@protoc_insertion_point(field_get:vp.tracking.MetaTrackingMode_t.stVPSPoseKF)
  return _internal_stvpsposekf();
}
inline void MetaTrackingMode_t::unsafe_arena_set_allocated_stvpsposekf(
    ::vp::tracking::KalmanFilter_t* stvpsposekf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpsposekf_);
  }
  stvpsposekf_ = stvpsposekf;
  if (stvpsposekf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vp.tracking.MetaTrackingMode_t.stVPSPoseKF)
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::release_stvpsposekf() {
  
  ::vp::tracking::KalmanFilter_t* temp = stvpsposekf_;
  stvpsposekf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::unsafe_arena_release_stvpsposekf() {
  // @@protoc_insertion_point(field_release:vp.tracking.MetaTrackingMode_t.stVPSPoseKF)
  
  ::vp::tracking::KalmanFilter_t* temp = stvpsposekf_;
  stvpsposekf_ = nullptr;
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::_internal_mutable_stvpsposekf() {
  
  if (stvpsposekf_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::KalmanFilter_t>(GetArena());
    stvpsposekf_ = p;
  }
  return stvpsposekf_;
}
inline ::vp::tracking::KalmanFilter_t* MetaTrackingMode_t::mutable_stvpsposekf() {
  // @@protoc_insertion_point(field_mutable:vp.tracking.MetaTrackingMode_t.stVPSPoseKF)
  return _internal_mutable_stvpsposekf();
}
inline void MetaTrackingMode_t::set_allocated_stvpsposekf(::vp::tracking::KalmanFilter_t* stvpsposekf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stvpsposekf_;
  }
  if (stvpsposekf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stvpsposekf);
    if (message_arena != submessage_arena) {
      stvpsposekf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpsposekf, submessage_arena);
    }
    
  } else {
    
  }
  stvpsposekf_ = stvpsposekf;
  // @@protoc_insertion_point(field_set_allocated:vp.tracking.MetaTrackingMode_t.stVPSPoseKF)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracking
}  // namespace vp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vp::tracking::VPStatusTrackingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vp::tracking::VPStatusTrackingMode>() {
  return ::vp::tracking::VPStatusTrackingMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vp_5ftracking_2eproto
