// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: localfeature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_localfeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_localfeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vgeodb_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_localfeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_localfeature_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_localfeature_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_localfeature_2eproto_metadata_getter(int index);
namespace VgeoDB {
class KP2DDesc_t;
struct KP2DDesc_tDefaultTypeInternal;
extern KP2DDesc_tDefaultTypeInternal _KP2DDesc_t_default_instance_;
class KeyPoint_t;
struct KeyPoint_tDefaultTypeInternal;
extern KeyPoint_tDefaultTypeInternal _KeyPoint_t_default_instance_;
class LocalFeatMeta_t;
struct LocalFeatMeta_tDefaultTypeInternal;
extern LocalFeatMeta_tDefaultTypeInternal _LocalFeatMeta_t_default_instance_;
class LocalFeature;
struct LocalFeatureDefaultTypeInternal;
extern LocalFeatureDefaultTypeInternal _LocalFeature_default_instance_;
class LocalFeatureDesc;
struct LocalFeatureDescDefaultTypeInternal;
extern LocalFeatureDescDefaultTypeInternal _LocalFeatureDesc_default_instance_;
class LocalFeatureSet;
struct LocalFeatureSetDefaultTypeInternal;
extern LocalFeatureSetDefaultTypeInternal _LocalFeatureSet_default_instance_;
class SuperPointDesc_t;
struct SuperPointDesc_tDefaultTypeInternal;
extern SuperPointDesc_tDefaultTypeInternal _SuperPointDesc_t_default_instance_;
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> ::VgeoDB::KP2DDesc_t* Arena::CreateMaybeMessage<::VgeoDB::KP2DDesc_t>(Arena*);
template<> ::VgeoDB::KeyPoint_t* Arena::CreateMaybeMessage<::VgeoDB::KeyPoint_t>(Arena*);
template<> ::VgeoDB::LocalFeatMeta_t* Arena::CreateMaybeMessage<::VgeoDB::LocalFeatMeta_t>(Arena*);
template<> ::VgeoDB::LocalFeature* Arena::CreateMaybeMessage<::VgeoDB::LocalFeature>(Arena*);
template<> ::VgeoDB::LocalFeatureDesc* Arena::CreateMaybeMessage<::VgeoDB::LocalFeatureDesc>(Arena*);
template<> ::VgeoDB::LocalFeatureSet* Arena::CreateMaybeMessage<::VgeoDB::LocalFeatureSet>(Arena*);
template<> ::VgeoDB::SuperPointDesc_t* Arena::CreateMaybeMessage<::VgeoDB::SuperPointDesc_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VgeoDB {

enum SuperPointDesc_t_eDescType : int {
  SuperPointDesc_t_eDescType_SPP_512_v1 = 0,
  SuperPointDesc_t_eDescType_SuperPointDesc_t_eDescType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SuperPointDesc_t_eDescType_SuperPointDesc_t_eDescType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SuperPointDesc_t_eDescType_IsValid(int value);
constexpr SuperPointDesc_t_eDescType SuperPointDesc_t_eDescType_eDescType_MIN = SuperPointDesc_t_eDescType_SPP_512_v1;
constexpr SuperPointDesc_t_eDescType SuperPointDesc_t_eDescType_eDescType_MAX = SuperPointDesc_t_eDescType_SPP_512_v1;
constexpr int SuperPointDesc_t_eDescType_eDescType_ARRAYSIZE = SuperPointDesc_t_eDescType_eDescType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SuperPointDesc_t_eDescType_descriptor();
template<typename T>
inline const std::string& SuperPointDesc_t_eDescType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SuperPointDesc_t_eDescType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SuperPointDesc_t_eDescType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SuperPointDesc_t_eDescType_descriptor(), enum_t_value);
}
inline bool SuperPointDesc_t_eDescType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SuperPointDesc_t_eDescType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SuperPointDesc_t_eDescType>(
    SuperPointDesc_t_eDescType_descriptor(), name, value);
}
enum KP2DDesc_t_eDescType : int {
  KP2DDesc_t_eDescType_KP2D_256_v1 = 0,
  KP2DDesc_t_eDescType_KP2DDesc_t_eDescType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KP2DDesc_t_eDescType_KP2DDesc_t_eDescType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KP2DDesc_t_eDescType_IsValid(int value);
constexpr KP2DDesc_t_eDescType KP2DDesc_t_eDescType_eDescType_MIN = KP2DDesc_t_eDescType_KP2D_256_v1;
constexpr KP2DDesc_t_eDescType KP2DDesc_t_eDescType_eDescType_MAX = KP2DDesc_t_eDescType_KP2D_256_v1;
constexpr int KP2DDesc_t_eDescType_eDescType_ARRAYSIZE = KP2DDesc_t_eDescType_eDescType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KP2DDesc_t_eDescType_descriptor();
template<typename T>
inline const std::string& KP2DDesc_t_eDescType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KP2DDesc_t_eDescType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KP2DDesc_t_eDescType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KP2DDesc_t_eDescType_descriptor(), enum_t_value);
}
inline bool KP2DDesc_t_eDescType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KP2DDesc_t_eDescType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KP2DDesc_t_eDescType>(
    KP2DDesc_t_eDescType_descriptor(), name, value);
}
// ===================================================================

class SuperPointDesc_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.SuperPointDesc_t) */ {
 public:
  inline SuperPointDesc_t() : SuperPointDesc_t(nullptr) {}
  virtual ~SuperPointDesc_t();
  explicit constexpr SuperPointDesc_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuperPointDesc_t(const SuperPointDesc_t& from);
  SuperPointDesc_t(SuperPointDesc_t&& from) noexcept
    : SuperPointDesc_t() {
    *this = ::std::move(from);
  }

  inline SuperPointDesc_t& operator=(const SuperPointDesc_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuperPointDesc_t& operator=(SuperPointDesc_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SuperPointDesc_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuperPointDesc_t* internal_default_instance() {
    return reinterpret_cast<const SuperPointDesc_t*>(
               &_SuperPointDesc_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SuperPointDesc_t& a, SuperPointDesc_t& b) {
    a.Swap(&b);
  }
  inline void Swap(SuperPointDesc_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuperPointDesc_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SuperPointDesc_t* New() const final {
    return CreateMaybeMessage<SuperPointDesc_t>(nullptr);
  }

  SuperPointDesc_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SuperPointDesc_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SuperPointDesc_t& from);
  void MergeFrom(const SuperPointDesc_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuperPointDesc_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.SuperPointDesc_t";
  }
  protected:
  explicit SuperPointDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef SuperPointDesc_t_eDescType eDescType;
  static constexpr eDescType SPP_512_v1 =
    SuperPointDesc_t_eDescType_SPP_512_v1;
  static inline bool eDescType_IsValid(int value) {
    return SuperPointDesc_t_eDescType_IsValid(value);
  }
  static constexpr eDescType eDescType_MIN =
    SuperPointDesc_t_eDescType_eDescType_MIN;
  static constexpr eDescType eDescType_MAX =
    SuperPointDesc_t_eDescType_eDescType_MAX;
  static constexpr int eDescType_ARRAYSIZE =
    SuperPointDesc_t_eDescType_eDescType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eDescType_descriptor() {
    return SuperPointDesc_t_eDescType_descriptor();
  }
  template<typename T>
  static inline const std::string& eDescType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eDescType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eDescType_Name.");
    return SuperPointDesc_t_eDescType_Name(enum_t_value);
  }
  static inline bool eDescType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eDescType* value) {
    return SuperPointDesc_t_eDescType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArfDescriptorFieldNumber = 2,
    kETypeFieldNumber = 3,
  };
  // repeated float arfDescriptor = 2 [packed = true];
  int arfdescriptor_size() const;
  private:
  int _internal_arfdescriptor_size() const;
  public:
  void clear_arfdescriptor();
  private:
  float _internal_arfdescriptor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arfdescriptor() const;
  void _internal_add_arfdescriptor(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arfdescriptor();
  public:
  float arfdescriptor(int index) const;
  void set_arfdescriptor(int index, float value);
  void add_arfdescriptor(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arfdescriptor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arfdescriptor();

  // .VgeoDB.SuperPointDesc_t.eDescType eType = 3;
  void clear_etype();
  ::VgeoDB::SuperPointDesc_t_eDescType etype() const;
  void set_etype(::VgeoDB::SuperPointDesc_t_eDescType value);
  private:
  ::VgeoDB::SuperPointDesc_t_eDescType _internal_etype() const;
  void _internal_set_etype(::VgeoDB::SuperPointDesc_t_eDescType value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.SuperPointDesc_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arfdescriptor_;
  mutable std::atomic<int> _arfdescriptor_cached_byte_size_;
  int etype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localfeature_2eproto;
};
// -------------------------------------------------------------------

class KP2DDesc_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.KP2DDesc_t) */ {
 public:
  inline KP2DDesc_t() : KP2DDesc_t(nullptr) {}
  virtual ~KP2DDesc_t();
  explicit constexpr KP2DDesc_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KP2DDesc_t(const KP2DDesc_t& from);
  KP2DDesc_t(KP2DDesc_t&& from) noexcept
    : KP2DDesc_t() {
    *this = ::std::move(from);
  }

  inline KP2DDesc_t& operator=(const KP2DDesc_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline KP2DDesc_t& operator=(KP2DDesc_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KP2DDesc_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const KP2DDesc_t* internal_default_instance() {
    return reinterpret_cast<const KP2DDesc_t*>(
               &_KP2DDesc_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KP2DDesc_t& a, KP2DDesc_t& b) {
    a.Swap(&b);
  }
  inline void Swap(KP2DDesc_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KP2DDesc_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KP2DDesc_t* New() const final {
    return CreateMaybeMessage<KP2DDesc_t>(nullptr);
  }

  KP2DDesc_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KP2DDesc_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KP2DDesc_t& from);
  void MergeFrom(const KP2DDesc_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KP2DDesc_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.KP2DDesc_t";
  }
  protected:
  explicit KP2DDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef KP2DDesc_t_eDescType eDescType;
  static constexpr eDescType KP2D_256_v1 =
    KP2DDesc_t_eDescType_KP2D_256_v1;
  static inline bool eDescType_IsValid(int value) {
    return KP2DDesc_t_eDescType_IsValid(value);
  }
  static constexpr eDescType eDescType_MIN =
    KP2DDesc_t_eDescType_eDescType_MIN;
  static constexpr eDescType eDescType_MAX =
    KP2DDesc_t_eDescType_eDescType_MAX;
  static constexpr int eDescType_ARRAYSIZE =
    KP2DDesc_t_eDescType_eDescType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eDescType_descriptor() {
    return KP2DDesc_t_eDescType_descriptor();
  }
  template<typename T>
  static inline const std::string& eDescType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eDescType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eDescType_Name.");
    return KP2DDesc_t_eDescType_Name(enum_t_value);
  }
  static inline bool eDescType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eDescType* value) {
    return KP2DDesc_t_eDescType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArfDescriptorFieldNumber = 2,
    kETypeFieldNumber = 3,
  };
  // repeated float arfDescriptor = 2 [packed = true];
  int arfdescriptor_size() const;
  private:
  int _internal_arfdescriptor_size() const;
  public:
  void clear_arfdescriptor();
  private:
  float _internal_arfdescriptor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arfdescriptor() const;
  void _internal_add_arfdescriptor(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arfdescriptor();
  public:
  float arfdescriptor(int index) const;
  void set_arfdescriptor(int index, float value);
  void add_arfdescriptor(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arfdescriptor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arfdescriptor();

  // .VgeoDB.KP2DDesc_t.eDescType eType = 3;
  void clear_etype();
  ::VgeoDB::KP2DDesc_t_eDescType etype() const;
  void set_etype(::VgeoDB::KP2DDesc_t_eDescType value);
  private:
  ::VgeoDB::KP2DDesc_t_eDescType _internal_etype() const;
  void _internal_set_etype(::VgeoDB::KP2DDesc_t_eDescType value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.KP2DDesc_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arfdescriptor_;
  mutable std::atomic<int> _arfdescriptor_cached_byte_size_;
  int etype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localfeature_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatureDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.LocalFeatureDesc) */ {
 public:
  inline LocalFeatureDesc() : LocalFeatureDesc(nullptr) {}
  virtual ~LocalFeatureDesc();
  explicit constexpr LocalFeatureDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatureDesc(const LocalFeatureDesc& from);
  LocalFeatureDesc(LocalFeatureDesc&& from) noexcept
    : LocalFeatureDesc() {
    *this = ::std::move(from);
  }

  inline LocalFeatureDesc& operator=(const LocalFeatureDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatureDesc& operator=(LocalFeatureDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatureDesc& default_instance() {
    return *internal_default_instance();
  }
  enum ULocalFeatureTCase {
    kStSPPDesc = 3,
    kStKP2DDesc = 4,
    ULOCALFEATURE_T_NOT_SET = 0,
  };

  static inline const LocalFeatureDesc* internal_default_instance() {
    return reinterpret_cast<const LocalFeatureDesc*>(
               &_LocalFeatureDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LocalFeatureDesc& a, LocalFeatureDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatureDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatureDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatureDesc* New() const final {
    return CreateMaybeMessage<LocalFeatureDesc>(nullptr);
  }

  LocalFeatureDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatureDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatureDesc& from);
  void MergeFrom(const LocalFeatureDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatureDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.LocalFeatureDesc";
  }
  protected:
  explicit LocalFeatureDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStSPPDescFieldNumber = 3,
    kStKP2DDescFieldNumber = 4,
  };
  // .VgeoDB.SuperPointDesc_t stSPPDesc = 3;
  bool has_stsppdesc() const;
  private:
  bool _internal_has_stsppdesc() const;
  public:
  void clear_stsppdesc();
  const ::VgeoDB::SuperPointDesc_t& stsppdesc() const;
  ::VgeoDB::SuperPointDesc_t* release_stsppdesc();
  ::VgeoDB::SuperPointDesc_t* mutable_stsppdesc();
  void set_allocated_stsppdesc(::VgeoDB::SuperPointDesc_t* stsppdesc);
  private:
  const ::VgeoDB::SuperPointDesc_t& _internal_stsppdesc() const;
  ::VgeoDB::SuperPointDesc_t* _internal_mutable_stsppdesc();
  public:
  void unsafe_arena_set_allocated_stsppdesc(
      ::VgeoDB::SuperPointDesc_t* stsppdesc);
  ::VgeoDB::SuperPointDesc_t* unsafe_arena_release_stsppdesc();

  // .VgeoDB.KP2DDesc_t stKP2DDesc = 4;
  bool has_stkp2ddesc() const;
  private:
  bool _internal_has_stkp2ddesc() const;
  public:
  void clear_stkp2ddesc();
  const ::VgeoDB::KP2DDesc_t& stkp2ddesc() const;
  ::VgeoDB::KP2DDesc_t* release_stkp2ddesc();
  ::VgeoDB::KP2DDesc_t* mutable_stkp2ddesc();
  void set_allocated_stkp2ddesc(::VgeoDB::KP2DDesc_t* stkp2ddesc);
  private:
  const ::VgeoDB::KP2DDesc_t& _internal_stkp2ddesc() const;
  ::VgeoDB::KP2DDesc_t* _internal_mutable_stkp2ddesc();
  public:
  void unsafe_arena_set_allocated_stkp2ddesc(
      ::VgeoDB::KP2DDesc_t* stkp2ddesc);
  ::VgeoDB::KP2DDesc_t* unsafe_arena_release_stkp2ddesc();

  void clear_uLocalFeature_t();
  ULocalFeatureTCase uLocalFeature_t_case() const;
  // @@protoc_insertion_point(class_scope:VgeoDB.LocalFeatureDesc)
 private:
  class _Internal;
  void set_has_stsppdesc();
  void set_has_stkp2ddesc();

  inline bool has_uLocalFeature_t() const;
  inline void clear_has_uLocalFeature_t();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ULocalFeatureTUnion {
    constexpr ULocalFeatureTUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::VgeoDB::SuperPointDesc_t* stsppdesc_;
    ::VgeoDB::KP2DDesc_t* stkp2ddesc_;
  } uLocalFeature_t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_localfeature_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatMeta_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.LocalFeatMeta_t) */ {
 public:
  inline LocalFeatMeta_t() : LocalFeatMeta_t(nullptr) {}
  virtual ~LocalFeatMeta_t();
  explicit constexpr LocalFeatMeta_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatMeta_t(const LocalFeatMeta_t& from);
  LocalFeatMeta_t(LocalFeatMeta_t&& from) noexcept
    : LocalFeatMeta_t() {
    *this = ::std::move(from);
  }

  inline LocalFeatMeta_t& operator=(const LocalFeatMeta_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatMeta_t& operator=(LocalFeatMeta_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatMeta_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeatMeta_t* internal_default_instance() {
    return reinterpret_cast<const LocalFeatMeta_t*>(
               &_LocalFeatMeta_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalFeatMeta_t& a, LocalFeatMeta_t& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatMeta_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatMeta_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatMeta_t* New() const final {
    return CreateMaybeMessage<LocalFeatMeta_t>(nullptr);
  }

  LocalFeatMeta_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatMeta_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatMeta_t& from);
  void MergeFrom(const LocalFeatMeta_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatMeta_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.LocalFeatMeta_t";
  }
  protected:
  explicit LocalFeatMeta_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStRefLocationFieldNumber = 4,
    kUn64UniqueIDFieldNumber = 1,
    kUn64KeyPointCountFieldNumber = 2,
    kUn64GroupIDFieldNumber = 3,
  };
  // .VgeoDB.common.XYZ64_t stRefLocation = 4;
  bool has_streflocation() const;
  private:
  bool _internal_has_streflocation() const;
  public:
  void clear_streflocation();
  const ::VgeoDB::common::XYZ64_t& streflocation() const;
  ::VgeoDB::common::XYZ64_t* release_streflocation();
  ::VgeoDB::common::XYZ64_t* mutable_streflocation();
  void set_allocated_streflocation(::VgeoDB::common::XYZ64_t* streflocation);
  private:
  const ::VgeoDB::common::XYZ64_t& _internal_streflocation() const;
  ::VgeoDB::common::XYZ64_t* _internal_mutable_streflocation();
  public:
  void unsafe_arena_set_allocated_streflocation(
      ::VgeoDB::common::XYZ64_t* streflocation);
  ::VgeoDB::common::XYZ64_t* unsafe_arena_release_streflocation();

  // uint64 un64UniqueID = 1;
  void clear_un64uniqueid();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64uniqueid() const;
  void set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64uniqueid() const;
  void _internal_set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64KeyPointCount = 2;
  void clear_un64keypointcount();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64keypointcount() const;
  void set_un64keypointcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64keypointcount() const;
  void _internal_set_un64keypointcount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64GroupID = 3;
  void clear_un64groupid();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64groupid() const;
  void set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64groupid() const;
  void _internal_set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.LocalFeatMeta_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::VgeoDB::common::XYZ64_t* streflocation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64keypointcount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64groupid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localfeature_2eproto;
};
// -------------------------------------------------------------------

class KeyPoint_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.KeyPoint_t) */ {
 public:
  inline KeyPoint_t() : KeyPoint_t(nullptr) {}
  virtual ~KeyPoint_t();
  explicit constexpr KeyPoint_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyPoint_t(const KeyPoint_t& from);
  KeyPoint_t(KeyPoint_t&& from) noexcept
    : KeyPoint_t() {
    *this = ::std::move(from);
  }

  inline KeyPoint_t& operator=(const KeyPoint_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPoint_t& operator=(KeyPoint_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyPoint_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPoint_t* internal_default_instance() {
    return reinterpret_cast<const KeyPoint_t*>(
               &_KeyPoint_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KeyPoint_t& a, KeyPoint_t& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPoint_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPoint_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPoint_t* New() const final {
    return CreateMaybeMessage<KeyPoint_t>(nullptr);
  }

  KeyPoint_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPoint_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPoint_t& from);
  void MergeFrom(const KeyPoint_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPoint_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.KeyPoint_t";
  }
  protected:
  explicit KeyPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArun64KeyframeUniqueIDFieldNumber = 5,
    kArun64KeyframeIndexFieldNumber = 6,
    kArstKeyPointImageFieldNumber = 7,
    kStLocationFieldNumber = 3,
    kUDescriptorFieldNumber = 4,
    kUn64IndexFieldNumber = 1,
    kUn64TimestampFieldNumber = 2,
    kFSimilarityFieldNumber = 11,
  };
  // repeated uint64 arun64KeyframeUniqueID = 5 [packed = true];
  int arun64keyframeuniqueid_size() const;
  private:
  int _internal_arun64keyframeuniqueid_size() const;
  public:
  void clear_arun64keyframeuniqueid();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_arun64keyframeuniqueid(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_arun64keyframeuniqueid() const;
  void _internal_add_arun64keyframeuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_arun64keyframeuniqueid();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 arun64keyframeuniqueid(int index) const;
  void set_arun64keyframeuniqueid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_arun64keyframeuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      arun64keyframeuniqueid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_arun64keyframeuniqueid();

  // repeated uint64 arun64KeyframeIndex = 6 [packed = true];
  int arun64keyframeindex_size() const;
  private:
  int _internal_arun64keyframeindex_size() const;
  public:
  void clear_arun64keyframeindex();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_arun64keyframeindex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_arun64keyframeindex() const;
  void _internal_add_arun64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_arun64keyframeindex();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 arun64keyframeindex(int index) const;
  void set_arun64keyframeindex(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_arun64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      arun64keyframeindex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_arun64keyframeindex();

  // repeated .VgeoDB.common.UVPoint_t arstKeyPointImage = 7;
  int arstkeypointimage_size() const;
  private:
  int _internal_arstkeypointimage_size() const;
  public:
  void clear_arstkeypointimage();
  ::VgeoDB::common::UVPoint_t* mutable_arstkeypointimage(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::UVPoint_t >*
      mutable_arstkeypointimage();
  private:
  const ::VgeoDB::common::UVPoint_t& _internal_arstkeypointimage(int index) const;
  ::VgeoDB::common::UVPoint_t* _internal_add_arstkeypointimage();
  public:
  const ::VgeoDB::common::UVPoint_t& arstkeypointimage(int index) const;
  ::VgeoDB::common::UVPoint_t* add_arstkeypointimage();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::UVPoint_t >&
      arstkeypointimage() const;

  // .VgeoDB.common.XYZ32_t stLocation = 3;
  bool has_stlocation() const;
  private:
  bool _internal_has_stlocation() const;
  public:
  void clear_stlocation();
  const ::VgeoDB::common::XYZ32_t& stlocation() const;
  ::VgeoDB::common::XYZ32_t* release_stlocation();
  ::VgeoDB::common::XYZ32_t* mutable_stlocation();
  void set_allocated_stlocation(::VgeoDB::common::XYZ32_t* stlocation);
  private:
  const ::VgeoDB::common::XYZ32_t& _internal_stlocation() const;
  ::VgeoDB::common::XYZ32_t* _internal_mutable_stlocation();
  public:
  void unsafe_arena_set_allocated_stlocation(
      ::VgeoDB::common::XYZ32_t* stlocation);
  ::VgeoDB::common::XYZ32_t* unsafe_arena_release_stlocation();

  // .VgeoDB.LocalFeatureDesc uDescriptor = 4;
  bool has_udescriptor() const;
  private:
  bool _internal_has_udescriptor() const;
  public:
  void clear_udescriptor();
  const ::VgeoDB::LocalFeatureDesc& udescriptor() const;
  ::VgeoDB::LocalFeatureDesc* release_udescriptor();
  ::VgeoDB::LocalFeatureDesc* mutable_udescriptor();
  void set_allocated_udescriptor(::VgeoDB::LocalFeatureDesc* udescriptor);
  private:
  const ::VgeoDB::LocalFeatureDesc& _internal_udescriptor() const;
  ::VgeoDB::LocalFeatureDesc* _internal_mutable_udescriptor();
  public:
  void unsafe_arena_set_allocated_udescriptor(
      ::VgeoDB::LocalFeatureDesc* udescriptor);
  ::VgeoDB::LocalFeatureDesc* unsafe_arena_release_udescriptor();

  // uint64 un64Index = 1;
  void clear_un64index();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64index() const;
  void set_un64index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64index() const;
  void _internal_set_un64index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64Timestamp = 2;
  void clear_un64timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64timestamp() const;
  void set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64timestamp() const;
  void _internal_set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float fSimilarity = 11;
  void clear_fsimilarity();
  float fsimilarity() const;
  void set_fsimilarity(float value);
  private:
  float _internal_fsimilarity() const;
  void _internal_set_fsimilarity(float value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.KeyPoint_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > arun64keyframeuniqueid_;
  mutable std::atomic<int> _arun64keyframeuniqueid_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > arun64keyframeindex_;
  mutable std::atomic<int> _arun64keyframeindex_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::UVPoint_t > arstkeypointimage_;
  ::VgeoDB::common::XYZ32_t* stlocation_;
  ::VgeoDB::LocalFeatureDesc* udescriptor_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64timestamp_;
  float fsimilarity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localfeature_2eproto;
};
// -------------------------------------------------------------------

class LocalFeature PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.LocalFeature) */ {
 public:
  inline LocalFeature() : LocalFeature(nullptr) {}
  virtual ~LocalFeature();
  explicit constexpr LocalFeature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeature(const LocalFeature& from);
  LocalFeature(LocalFeature&& from) noexcept
    : LocalFeature() {
    *this = ::std::move(from);
  }

  inline LocalFeature& operator=(const LocalFeature& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeature& operator=(LocalFeature&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeature& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeature* internal_default_instance() {
    return reinterpret_cast<const LocalFeature*>(
               &_LocalFeature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocalFeature& a, LocalFeature& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeature* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeature* New() const final {
    return CreateMaybeMessage<LocalFeature>(nullptr);
  }

  LocalFeature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeature& from);
  void MergeFrom(const LocalFeature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.LocalFeature";
  }
  protected:
  explicit LocalFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStKeypointFieldNumber = 2,
    kStMetaFieldNumber = 1,
  };
  // repeated .VgeoDB.KeyPoint_t stKeypoint = 2;
  int stkeypoint_size() const;
  private:
  int _internal_stkeypoint_size() const;
  public:
  void clear_stkeypoint();
  ::VgeoDB::KeyPoint_t* mutable_stkeypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >*
      mutable_stkeypoint();
  private:
  const ::VgeoDB::KeyPoint_t& _internal_stkeypoint(int index) const;
  ::VgeoDB::KeyPoint_t* _internal_add_stkeypoint();
  public:
  const ::VgeoDB::KeyPoint_t& stkeypoint(int index) const;
  ::VgeoDB::KeyPoint_t* add_stkeypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >&
      stkeypoint() const;

  // .VgeoDB.LocalFeatMeta_t stMeta = 1;
  bool has_stmeta() const;
  private:
  bool _internal_has_stmeta() const;
  public:
  void clear_stmeta();
  const ::VgeoDB::LocalFeatMeta_t& stmeta() const;
  ::VgeoDB::LocalFeatMeta_t* release_stmeta();
  ::VgeoDB::LocalFeatMeta_t* mutable_stmeta();
  void set_allocated_stmeta(::VgeoDB::LocalFeatMeta_t* stmeta);
  private:
  const ::VgeoDB::LocalFeatMeta_t& _internal_stmeta() const;
  ::VgeoDB::LocalFeatMeta_t* _internal_mutable_stmeta();
  public:
  void unsafe_arena_set_allocated_stmeta(
      ::VgeoDB::LocalFeatMeta_t* stmeta);
  ::VgeoDB::LocalFeatMeta_t* unsafe_arena_release_stmeta();

  // @@protoc_insertion_point(class_scope:VgeoDB.LocalFeature)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t > stkeypoint_;
  ::VgeoDB::LocalFeatMeta_t* stmeta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localfeature_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatureSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.LocalFeatureSet) */ {
 public:
  inline LocalFeatureSet() : LocalFeatureSet(nullptr) {}
  virtual ~LocalFeatureSet();
  explicit constexpr LocalFeatureSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatureSet(const LocalFeatureSet& from);
  LocalFeatureSet(LocalFeatureSet&& from) noexcept
    : LocalFeatureSet() {
    *this = ::std::move(from);
  }

  inline LocalFeatureSet& operator=(const LocalFeatureSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatureSet& operator=(LocalFeatureSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatureSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeatureSet* internal_default_instance() {
    return reinterpret_cast<const LocalFeatureSet*>(
               &_LocalFeatureSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LocalFeatureSet& a, LocalFeatureSet& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatureSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatureSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatureSet* New() const final {
    return CreateMaybeMessage<LocalFeatureSet>(nullptr);
  }

  LocalFeatureSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatureSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatureSet& from);
  void MergeFrom(const LocalFeatureSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatureSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.LocalFeatureSet";
  }
  protected:
  explicit LocalFeatureSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_localfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstLocalFeatureFieldNumber = 1,
  };
  // repeated .VgeoDB.LocalFeature arstLocalFeature = 1;
  int arstlocalfeature_size() const;
  private:
  int _internal_arstlocalfeature_size() const;
  public:
  void clear_arstlocalfeature();
  ::VgeoDB::LocalFeature* mutable_arstlocalfeature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >*
      mutable_arstlocalfeature();
  private:
  const ::VgeoDB::LocalFeature& _internal_arstlocalfeature(int index) const;
  ::VgeoDB::LocalFeature* _internal_add_arstlocalfeature();
  public:
  const ::VgeoDB::LocalFeature& arstlocalfeature(int index) const;
  ::VgeoDB::LocalFeature* add_arstlocalfeature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >&
      arstlocalfeature() const;

  // @@protoc_insertion_point(class_scope:VgeoDB.LocalFeatureSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature > arstlocalfeature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_localfeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SuperPointDesc_t

// repeated float arfDescriptor = 2 [packed = true];
inline int SuperPointDesc_t::_internal_arfdescriptor_size() const {
  return arfdescriptor_.size();
}
inline int SuperPointDesc_t::arfdescriptor_size() const {
  return _internal_arfdescriptor_size();
}
inline void SuperPointDesc_t::clear_arfdescriptor() {
  arfdescriptor_.Clear();
}
inline float SuperPointDesc_t::_internal_arfdescriptor(int index) const {
  return arfdescriptor_.Get(index);
}
inline float SuperPointDesc_t::arfdescriptor(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.SuperPointDesc_t.arfDescriptor)
  return _internal_arfdescriptor(index);
}
inline void SuperPointDesc_t::set_arfdescriptor(int index, float value) {
  arfdescriptor_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.SuperPointDesc_t.arfDescriptor)
}
inline void SuperPointDesc_t::_internal_add_arfdescriptor(float value) {
  arfdescriptor_.Add(value);
}
inline void SuperPointDesc_t::add_arfdescriptor(float value) {
  _internal_add_arfdescriptor(value);
  // @@protoc_insertion_point(field_add:VgeoDB.SuperPointDesc_t.arfDescriptor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SuperPointDesc_t::_internal_arfdescriptor() const {
  return arfdescriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
SuperPointDesc_t::arfdescriptor() const {
  // @@protoc_insertion_point(field_list:VgeoDB.SuperPointDesc_t.arfDescriptor)
  return _internal_arfdescriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SuperPointDesc_t::_internal_mutable_arfdescriptor() {
  return &arfdescriptor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
SuperPointDesc_t::mutable_arfdescriptor() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.SuperPointDesc_t.arfDescriptor)
  return _internal_mutable_arfdescriptor();
}

// .VgeoDB.SuperPointDesc_t.eDescType eType = 3;
inline void SuperPointDesc_t::clear_etype() {
  etype_ = 0;
}
inline ::VgeoDB::SuperPointDesc_t_eDescType SuperPointDesc_t::_internal_etype() const {
  return static_cast< ::VgeoDB::SuperPointDesc_t_eDescType >(etype_);
}
inline ::VgeoDB::SuperPointDesc_t_eDescType SuperPointDesc_t::etype() const {
  // @@protoc_insertion_point(field_get:VgeoDB.SuperPointDesc_t.eType)
  return _internal_etype();
}
inline void SuperPointDesc_t::_internal_set_etype(::VgeoDB::SuperPointDesc_t_eDescType value) {
  
  etype_ = value;
}
inline void SuperPointDesc_t::set_etype(::VgeoDB::SuperPointDesc_t_eDescType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:VgeoDB.SuperPointDesc_t.eType)
}

// -------------------------------------------------------------------

// KP2DDesc_t

// repeated float arfDescriptor = 2 [packed = true];
inline int KP2DDesc_t::_internal_arfdescriptor_size() const {
  return arfdescriptor_.size();
}
inline int KP2DDesc_t::arfdescriptor_size() const {
  return _internal_arfdescriptor_size();
}
inline void KP2DDesc_t::clear_arfdescriptor() {
  arfdescriptor_.Clear();
}
inline float KP2DDesc_t::_internal_arfdescriptor(int index) const {
  return arfdescriptor_.Get(index);
}
inline float KP2DDesc_t::arfdescriptor(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.KP2DDesc_t.arfDescriptor)
  return _internal_arfdescriptor(index);
}
inline void KP2DDesc_t::set_arfdescriptor(int index, float value) {
  arfdescriptor_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.KP2DDesc_t.arfDescriptor)
}
inline void KP2DDesc_t::_internal_add_arfdescriptor(float value) {
  arfdescriptor_.Add(value);
}
inline void KP2DDesc_t::add_arfdescriptor(float value) {
  _internal_add_arfdescriptor(value);
  // @@protoc_insertion_point(field_add:VgeoDB.KP2DDesc_t.arfDescriptor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KP2DDesc_t::_internal_arfdescriptor() const {
  return arfdescriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KP2DDesc_t::arfdescriptor() const {
  // @@protoc_insertion_point(field_list:VgeoDB.KP2DDesc_t.arfDescriptor)
  return _internal_arfdescriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KP2DDesc_t::_internal_mutable_arfdescriptor() {
  return &arfdescriptor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KP2DDesc_t::mutable_arfdescriptor() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.KP2DDesc_t.arfDescriptor)
  return _internal_mutable_arfdescriptor();
}

// .VgeoDB.KP2DDesc_t.eDescType eType = 3;
inline void KP2DDesc_t::clear_etype() {
  etype_ = 0;
}
inline ::VgeoDB::KP2DDesc_t_eDescType KP2DDesc_t::_internal_etype() const {
  return static_cast< ::VgeoDB::KP2DDesc_t_eDescType >(etype_);
}
inline ::VgeoDB::KP2DDesc_t_eDescType KP2DDesc_t::etype() const {
  // @@protoc_insertion_point(field_get:VgeoDB.KP2DDesc_t.eType)
  return _internal_etype();
}
inline void KP2DDesc_t::_internal_set_etype(::VgeoDB::KP2DDesc_t_eDescType value) {
  
  etype_ = value;
}
inline void KP2DDesc_t::set_etype(::VgeoDB::KP2DDesc_t_eDescType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:VgeoDB.KP2DDesc_t.eType)
}

// -------------------------------------------------------------------

// LocalFeatureDesc

// .VgeoDB.SuperPointDesc_t stSPPDesc = 3;
inline bool LocalFeatureDesc::_internal_has_stsppdesc() const {
  return uLocalFeature_t_case() == kStSPPDesc;
}
inline bool LocalFeatureDesc::has_stsppdesc() const {
  return _internal_has_stsppdesc();
}
inline void LocalFeatureDesc::set_has_stsppdesc() {
  _oneof_case_[0] = kStSPPDesc;
}
inline void LocalFeatureDesc::clear_stsppdesc() {
  if (_internal_has_stsppdesc()) {
    if (GetArena() == nullptr) {
      delete uLocalFeature_t_.stsppdesc_;
    }
    clear_has_uLocalFeature_t();
  }
}
inline ::VgeoDB::SuperPointDesc_t* LocalFeatureDesc::release_stsppdesc() {
  // @@protoc_insertion_point(field_release:VgeoDB.LocalFeatureDesc.stSPPDesc)
  if (_internal_has_stsppdesc()) {
    clear_has_uLocalFeature_t();
      ::VgeoDB::SuperPointDesc_t* temp = uLocalFeature_t_.stsppdesc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uLocalFeature_t_.stsppdesc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::SuperPointDesc_t& LocalFeatureDesc::_internal_stsppdesc() const {
  return _internal_has_stsppdesc()
      ? *uLocalFeature_t_.stsppdesc_
      : reinterpret_cast< ::VgeoDB::SuperPointDesc_t&>(::VgeoDB::_SuperPointDesc_t_default_instance_);
}
inline const ::VgeoDB::SuperPointDesc_t& LocalFeatureDesc::stsppdesc() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatureDesc.stSPPDesc)
  return _internal_stsppdesc();
}
inline ::VgeoDB::SuperPointDesc_t* LocalFeatureDesc::unsafe_arena_release_stsppdesc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.LocalFeatureDesc.stSPPDesc)
  if (_internal_has_stsppdesc()) {
    clear_has_uLocalFeature_t();
    ::VgeoDB::SuperPointDesc_t* temp = uLocalFeature_t_.stsppdesc_;
    uLocalFeature_t_.stsppdesc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LocalFeatureDesc::unsafe_arena_set_allocated_stsppdesc(::VgeoDB::SuperPointDesc_t* stsppdesc) {
  clear_uLocalFeature_t();
  if (stsppdesc) {
    set_has_stsppdesc();
    uLocalFeature_t_.stsppdesc_ = stsppdesc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.LocalFeatureDesc.stSPPDesc)
}
inline ::VgeoDB::SuperPointDesc_t* LocalFeatureDesc::_internal_mutable_stsppdesc() {
  if (!_internal_has_stsppdesc()) {
    clear_uLocalFeature_t();
    set_has_stsppdesc();
    uLocalFeature_t_.stsppdesc_ = CreateMaybeMessage< ::VgeoDB::SuperPointDesc_t >(GetArena());
  }
  return uLocalFeature_t_.stsppdesc_;
}
inline ::VgeoDB::SuperPointDesc_t* LocalFeatureDesc::mutable_stsppdesc() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.LocalFeatureDesc.stSPPDesc)
  return _internal_mutable_stsppdesc();
}

// .VgeoDB.KP2DDesc_t stKP2DDesc = 4;
inline bool LocalFeatureDesc::_internal_has_stkp2ddesc() const {
  return uLocalFeature_t_case() == kStKP2DDesc;
}
inline bool LocalFeatureDesc::has_stkp2ddesc() const {
  return _internal_has_stkp2ddesc();
}
inline void LocalFeatureDesc::set_has_stkp2ddesc() {
  _oneof_case_[0] = kStKP2DDesc;
}
inline void LocalFeatureDesc::clear_stkp2ddesc() {
  if (_internal_has_stkp2ddesc()) {
    if (GetArena() == nullptr) {
      delete uLocalFeature_t_.stkp2ddesc_;
    }
    clear_has_uLocalFeature_t();
  }
}
inline ::VgeoDB::KP2DDesc_t* LocalFeatureDesc::release_stkp2ddesc() {
  // @@protoc_insertion_point(field_release:VgeoDB.LocalFeatureDesc.stKP2DDesc)
  if (_internal_has_stkp2ddesc()) {
    clear_has_uLocalFeature_t();
      ::VgeoDB::KP2DDesc_t* temp = uLocalFeature_t_.stkp2ddesc_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uLocalFeature_t_.stkp2ddesc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::KP2DDesc_t& LocalFeatureDesc::_internal_stkp2ddesc() const {
  return _internal_has_stkp2ddesc()
      ? *uLocalFeature_t_.stkp2ddesc_
      : reinterpret_cast< ::VgeoDB::KP2DDesc_t&>(::VgeoDB::_KP2DDesc_t_default_instance_);
}
inline const ::VgeoDB::KP2DDesc_t& LocalFeatureDesc::stkp2ddesc() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatureDesc.stKP2DDesc)
  return _internal_stkp2ddesc();
}
inline ::VgeoDB::KP2DDesc_t* LocalFeatureDesc::unsafe_arena_release_stkp2ddesc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.LocalFeatureDesc.stKP2DDesc)
  if (_internal_has_stkp2ddesc()) {
    clear_has_uLocalFeature_t();
    ::VgeoDB::KP2DDesc_t* temp = uLocalFeature_t_.stkp2ddesc_;
    uLocalFeature_t_.stkp2ddesc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LocalFeatureDesc::unsafe_arena_set_allocated_stkp2ddesc(::VgeoDB::KP2DDesc_t* stkp2ddesc) {
  clear_uLocalFeature_t();
  if (stkp2ddesc) {
    set_has_stkp2ddesc();
    uLocalFeature_t_.stkp2ddesc_ = stkp2ddesc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.LocalFeatureDesc.stKP2DDesc)
}
inline ::VgeoDB::KP2DDesc_t* LocalFeatureDesc::_internal_mutable_stkp2ddesc() {
  if (!_internal_has_stkp2ddesc()) {
    clear_uLocalFeature_t();
    set_has_stkp2ddesc();
    uLocalFeature_t_.stkp2ddesc_ = CreateMaybeMessage< ::VgeoDB::KP2DDesc_t >(GetArena());
  }
  return uLocalFeature_t_.stkp2ddesc_;
}
inline ::VgeoDB::KP2DDesc_t* LocalFeatureDesc::mutable_stkp2ddesc() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.LocalFeatureDesc.stKP2DDesc)
  return _internal_mutable_stkp2ddesc();
}

inline bool LocalFeatureDesc::has_uLocalFeature_t() const {
  return uLocalFeature_t_case() != ULOCALFEATURE_T_NOT_SET;
}
inline void LocalFeatureDesc::clear_has_uLocalFeature_t() {
  _oneof_case_[0] = ULOCALFEATURE_T_NOT_SET;
}
inline LocalFeatureDesc::ULocalFeatureTCase LocalFeatureDesc::uLocalFeature_t_case() const {
  return LocalFeatureDesc::ULocalFeatureTCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LocalFeatMeta_t

// uint64 un64UniqueID = 1;
inline void LocalFeatMeta_t::clear_un64uniqueid() {
  un64uniqueid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatMeta_t::_internal_un64uniqueid() const {
  return un64uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatMeta_t::un64uniqueid() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatMeta_t.un64UniqueID)
  return _internal_un64uniqueid();
}
inline void LocalFeatMeta_t::_internal_set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64uniqueid_ = value;
}
inline void LocalFeatMeta_t::set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64uniqueid(value);
  // @@protoc_insertion_point(field_set:VgeoDB.LocalFeatMeta_t.un64UniqueID)
}

// uint64 un64KeyPointCount = 2;
inline void LocalFeatMeta_t::clear_un64keypointcount() {
  un64keypointcount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatMeta_t::_internal_un64keypointcount() const {
  return un64keypointcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatMeta_t::un64keypointcount() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatMeta_t.un64KeyPointCount)
  return _internal_un64keypointcount();
}
inline void LocalFeatMeta_t::_internal_set_un64keypointcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64keypointcount_ = value;
}
inline void LocalFeatMeta_t::set_un64keypointcount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64keypointcount(value);
  // @@protoc_insertion_point(field_set:VgeoDB.LocalFeatMeta_t.un64KeyPointCount)
}

// uint64 un64GroupID = 3;
inline void LocalFeatMeta_t::clear_un64groupid() {
  un64groupid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatMeta_t::_internal_un64groupid() const {
  return un64groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatMeta_t::un64groupid() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatMeta_t.un64GroupID)
  return _internal_un64groupid();
}
inline void LocalFeatMeta_t::_internal_set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64groupid_ = value;
}
inline void LocalFeatMeta_t::set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64groupid(value);
  // @@protoc_insertion_point(field_set:VgeoDB.LocalFeatMeta_t.un64GroupID)
}

// .VgeoDB.common.XYZ64_t stRefLocation = 4;
inline bool LocalFeatMeta_t::_internal_has_streflocation() const {
  return this != internal_default_instance() && streflocation_ != nullptr;
}
inline bool LocalFeatMeta_t::has_streflocation() const {
  return _internal_has_streflocation();
}
inline const ::VgeoDB::common::XYZ64_t& LocalFeatMeta_t::_internal_streflocation() const {
  const ::VgeoDB::common::XYZ64_t* p = streflocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::XYZ64_t&>(
      ::VgeoDB::common::_XYZ64_t_default_instance_);
}
inline const ::VgeoDB::common::XYZ64_t& LocalFeatMeta_t::streflocation() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatMeta_t.stRefLocation)
  return _internal_streflocation();
}
inline void LocalFeatMeta_t::unsafe_arena_set_allocated_streflocation(
    ::VgeoDB::common::XYZ64_t* streflocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streflocation_);
  }
  streflocation_ = streflocation;
  if (streflocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.LocalFeatMeta_t.stRefLocation)
}
inline ::VgeoDB::common::XYZ64_t* LocalFeatMeta_t::release_streflocation() {
  
  ::VgeoDB::common::XYZ64_t* temp = streflocation_;
  streflocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::common::XYZ64_t* LocalFeatMeta_t::unsafe_arena_release_streflocation() {
  // @@protoc_insertion_point(field_release:VgeoDB.LocalFeatMeta_t.stRefLocation)
  
  ::VgeoDB::common::XYZ64_t* temp = streflocation_;
  streflocation_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::XYZ64_t* LocalFeatMeta_t::_internal_mutable_streflocation() {
  
  if (streflocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::XYZ64_t>(GetArena());
    streflocation_ = p;
  }
  return streflocation_;
}
inline ::VgeoDB::common::XYZ64_t* LocalFeatMeta_t::mutable_streflocation() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.LocalFeatMeta_t.stRefLocation)
  return _internal_mutable_streflocation();
}
inline void LocalFeatMeta_t::set_allocated_streflocation(::VgeoDB::common::XYZ64_t* streflocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streflocation_);
  }
  if (streflocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streflocation)->GetArena();
    if (message_arena != submessage_arena) {
      streflocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streflocation, submessage_arena);
    }
    
  } else {
    
  }
  streflocation_ = streflocation;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.LocalFeatMeta_t.stRefLocation)
}

// -------------------------------------------------------------------

// KeyPoint_t

// uint64 un64Index = 1;
inline void KeyPoint_t::clear_un64index() {
  un64index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::_internal_un64index() const {
  return un64index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::un64index() const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.un64Index)
  return _internal_un64index();
}
inline void KeyPoint_t::_internal_set_un64index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64index_ = value;
}
inline void KeyPoint_t::set_un64index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64index(value);
  // @@protoc_insertion_point(field_set:VgeoDB.KeyPoint_t.un64Index)
}

// uint64 un64Timestamp = 2;
inline void KeyPoint_t::clear_un64timestamp() {
  un64timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::_internal_un64timestamp() const {
  return un64timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::un64timestamp() const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.un64Timestamp)
  return _internal_un64timestamp();
}
inline void KeyPoint_t::_internal_set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64timestamp_ = value;
}
inline void KeyPoint_t::set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64timestamp(value);
  // @@protoc_insertion_point(field_set:VgeoDB.KeyPoint_t.un64Timestamp)
}

// .VgeoDB.common.XYZ32_t stLocation = 3;
inline bool KeyPoint_t::_internal_has_stlocation() const {
  return this != internal_default_instance() && stlocation_ != nullptr;
}
inline bool KeyPoint_t::has_stlocation() const {
  return _internal_has_stlocation();
}
inline const ::VgeoDB::common::XYZ32_t& KeyPoint_t::_internal_stlocation() const {
  const ::VgeoDB::common::XYZ32_t* p = stlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::XYZ32_t&>(
      ::VgeoDB::common::_XYZ32_t_default_instance_);
}
inline const ::VgeoDB::common::XYZ32_t& KeyPoint_t::stlocation() const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.stLocation)
  return _internal_stlocation();
}
inline void KeyPoint_t::unsafe_arena_set_allocated_stlocation(
    ::VgeoDB::common::XYZ32_t* stlocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation_);
  }
  stlocation_ = stlocation;
  if (stlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.KeyPoint_t.stLocation)
}
inline ::VgeoDB::common::XYZ32_t* KeyPoint_t::release_stlocation() {
  
  ::VgeoDB::common::XYZ32_t* temp = stlocation_;
  stlocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::common::XYZ32_t* KeyPoint_t::unsafe_arena_release_stlocation() {
  // @@protoc_insertion_point(field_release:VgeoDB.KeyPoint_t.stLocation)
  
  ::VgeoDB::common::XYZ32_t* temp = stlocation_;
  stlocation_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::XYZ32_t* KeyPoint_t::_internal_mutable_stlocation() {
  
  if (stlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::XYZ32_t>(GetArena());
    stlocation_ = p;
  }
  return stlocation_;
}
inline ::VgeoDB::common::XYZ32_t* KeyPoint_t::mutable_stlocation() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.KeyPoint_t.stLocation)
  return _internal_mutable_stlocation();
}
inline void KeyPoint_t::set_allocated_stlocation(::VgeoDB::common::XYZ32_t* stlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation_);
  }
  if (stlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation)->GetArena();
    if (message_arena != submessage_arena) {
      stlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stlocation, submessage_arena);
    }
    
  } else {
    
  }
  stlocation_ = stlocation;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.KeyPoint_t.stLocation)
}

// .VgeoDB.LocalFeatureDesc uDescriptor = 4;
inline bool KeyPoint_t::_internal_has_udescriptor() const {
  return this != internal_default_instance() && udescriptor_ != nullptr;
}
inline bool KeyPoint_t::has_udescriptor() const {
  return _internal_has_udescriptor();
}
inline void KeyPoint_t::clear_udescriptor() {
  if (GetArena() == nullptr && udescriptor_ != nullptr) {
    delete udescriptor_;
  }
  udescriptor_ = nullptr;
}
inline const ::VgeoDB::LocalFeatureDesc& KeyPoint_t::_internal_udescriptor() const {
  const ::VgeoDB::LocalFeatureDesc* p = udescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::LocalFeatureDesc&>(
      ::VgeoDB::_LocalFeatureDesc_default_instance_);
}
inline const ::VgeoDB::LocalFeatureDesc& KeyPoint_t::udescriptor() const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.uDescriptor)
  return _internal_udescriptor();
}
inline void KeyPoint_t::unsafe_arena_set_allocated_udescriptor(
    ::VgeoDB::LocalFeatureDesc* udescriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udescriptor_);
  }
  udescriptor_ = udescriptor;
  if (udescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.KeyPoint_t.uDescriptor)
}
inline ::VgeoDB::LocalFeatureDesc* KeyPoint_t::release_udescriptor() {
  
  ::VgeoDB::LocalFeatureDesc* temp = udescriptor_;
  udescriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::LocalFeatureDesc* KeyPoint_t::unsafe_arena_release_udescriptor() {
  // @@protoc_insertion_point(field_release:VgeoDB.KeyPoint_t.uDescriptor)
  
  ::VgeoDB::LocalFeatureDesc* temp = udescriptor_;
  udescriptor_ = nullptr;
  return temp;
}
inline ::VgeoDB::LocalFeatureDesc* KeyPoint_t::_internal_mutable_udescriptor() {
  
  if (udescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::LocalFeatureDesc>(GetArena());
    udescriptor_ = p;
  }
  return udescriptor_;
}
inline ::VgeoDB::LocalFeatureDesc* KeyPoint_t::mutable_udescriptor() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.KeyPoint_t.uDescriptor)
  return _internal_mutable_udescriptor();
}
inline void KeyPoint_t::set_allocated_udescriptor(::VgeoDB::LocalFeatureDesc* udescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete udescriptor_;
  }
  if (udescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(udescriptor);
    if (message_arena != submessage_arena) {
      udescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udescriptor, submessage_arena);
    }
    
  } else {
    
  }
  udescriptor_ = udescriptor;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.KeyPoint_t.uDescriptor)
}

// repeated uint64 arun64KeyframeUniqueID = 5 [packed = true];
inline int KeyPoint_t::_internal_arun64keyframeuniqueid_size() const {
  return arun64keyframeuniqueid_.size();
}
inline int KeyPoint_t::arun64keyframeuniqueid_size() const {
  return _internal_arun64keyframeuniqueid_size();
}
inline void KeyPoint_t::clear_arun64keyframeuniqueid() {
  arun64keyframeuniqueid_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::_internal_arun64keyframeuniqueid(int index) const {
  return arun64keyframeuniqueid_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::arun64keyframeuniqueid(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.arun64KeyframeUniqueID)
  return _internal_arun64keyframeuniqueid(index);
}
inline void KeyPoint_t::set_arun64keyframeuniqueid(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64keyframeuniqueid_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.KeyPoint_t.arun64KeyframeUniqueID)
}
inline void KeyPoint_t::_internal_add_arun64keyframeuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64keyframeuniqueid_.Add(value);
}
inline void KeyPoint_t::add_arun64keyframeuniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_arun64keyframeuniqueid(value);
  // @@protoc_insertion_point(field_add:VgeoDB.KeyPoint_t.arun64KeyframeUniqueID)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyPoint_t::_internal_arun64keyframeuniqueid() const {
  return arun64keyframeuniqueid_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyPoint_t::arun64keyframeuniqueid() const {
  // @@protoc_insertion_point(field_list:VgeoDB.KeyPoint_t.arun64KeyframeUniqueID)
  return _internal_arun64keyframeuniqueid();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyPoint_t::_internal_mutable_arun64keyframeuniqueid() {
  return &arun64keyframeuniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyPoint_t::mutable_arun64keyframeuniqueid() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.KeyPoint_t.arun64KeyframeUniqueID)
  return _internal_mutable_arun64keyframeuniqueid();
}

// repeated uint64 arun64KeyframeIndex = 6 [packed = true];
inline int KeyPoint_t::_internal_arun64keyframeindex_size() const {
  return arun64keyframeindex_.size();
}
inline int KeyPoint_t::arun64keyframeindex_size() const {
  return _internal_arun64keyframeindex_size();
}
inline void KeyPoint_t::clear_arun64keyframeindex() {
  arun64keyframeindex_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::_internal_arun64keyframeindex(int index) const {
  return arun64keyframeindex_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyPoint_t::arun64keyframeindex(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.arun64KeyframeIndex)
  return _internal_arun64keyframeindex(index);
}
inline void KeyPoint_t::set_arun64keyframeindex(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64keyframeindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.KeyPoint_t.arun64KeyframeIndex)
}
inline void KeyPoint_t::_internal_add_arun64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64keyframeindex_.Add(value);
}
inline void KeyPoint_t::add_arun64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_arun64keyframeindex(value);
  // @@protoc_insertion_point(field_add:VgeoDB.KeyPoint_t.arun64KeyframeIndex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyPoint_t::_internal_arun64keyframeindex() const {
  return arun64keyframeindex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyPoint_t::arun64keyframeindex() const {
  // @@protoc_insertion_point(field_list:VgeoDB.KeyPoint_t.arun64KeyframeIndex)
  return _internal_arun64keyframeindex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyPoint_t::_internal_mutable_arun64keyframeindex() {
  return &arun64keyframeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyPoint_t::mutable_arun64keyframeindex() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.KeyPoint_t.arun64KeyframeIndex)
  return _internal_mutable_arun64keyframeindex();
}

// repeated .VgeoDB.common.UVPoint_t arstKeyPointImage = 7;
inline int KeyPoint_t::_internal_arstkeypointimage_size() const {
  return arstkeypointimage_.size();
}
inline int KeyPoint_t::arstkeypointimage_size() const {
  return _internal_arstkeypointimage_size();
}
inline ::VgeoDB::common::UVPoint_t* KeyPoint_t::mutable_arstkeypointimage(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.KeyPoint_t.arstKeyPointImage)
  return arstkeypointimage_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::UVPoint_t >*
KeyPoint_t::mutable_arstkeypointimage() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.KeyPoint_t.arstKeyPointImage)
  return &arstkeypointimage_;
}
inline const ::VgeoDB::common::UVPoint_t& KeyPoint_t::_internal_arstkeypointimage(int index) const {
  return arstkeypointimage_.Get(index);
}
inline const ::VgeoDB::common::UVPoint_t& KeyPoint_t::arstkeypointimage(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.arstKeyPointImage)
  return _internal_arstkeypointimage(index);
}
inline ::VgeoDB::common::UVPoint_t* KeyPoint_t::_internal_add_arstkeypointimage() {
  return arstkeypointimage_.Add();
}
inline ::VgeoDB::common::UVPoint_t* KeyPoint_t::add_arstkeypointimage() {
  // @@protoc_insertion_point(field_add:VgeoDB.KeyPoint_t.arstKeyPointImage)
  return _internal_add_arstkeypointimage();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::UVPoint_t >&
KeyPoint_t::arstkeypointimage() const {
  // @@protoc_insertion_point(field_list:VgeoDB.KeyPoint_t.arstKeyPointImage)
  return arstkeypointimage_;
}

// float fSimilarity = 11;
inline void KeyPoint_t::clear_fsimilarity() {
  fsimilarity_ = 0;
}
inline float KeyPoint_t::_internal_fsimilarity() const {
  return fsimilarity_;
}
inline float KeyPoint_t::fsimilarity() const {
  // @@protoc_insertion_point(field_get:VgeoDB.KeyPoint_t.fSimilarity)
  return _internal_fsimilarity();
}
inline void KeyPoint_t::_internal_set_fsimilarity(float value) {
  
  fsimilarity_ = value;
}
inline void KeyPoint_t::set_fsimilarity(float value) {
  _internal_set_fsimilarity(value);
  // @@protoc_insertion_point(field_set:VgeoDB.KeyPoint_t.fSimilarity)
}

// -------------------------------------------------------------------

// LocalFeature

// .VgeoDB.LocalFeatMeta_t stMeta = 1;
inline bool LocalFeature::_internal_has_stmeta() const {
  return this != internal_default_instance() && stmeta_ != nullptr;
}
inline bool LocalFeature::has_stmeta() const {
  return _internal_has_stmeta();
}
inline void LocalFeature::clear_stmeta() {
  if (GetArena() == nullptr && stmeta_ != nullptr) {
    delete stmeta_;
  }
  stmeta_ = nullptr;
}
inline const ::VgeoDB::LocalFeatMeta_t& LocalFeature::_internal_stmeta() const {
  const ::VgeoDB::LocalFeatMeta_t* p = stmeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::LocalFeatMeta_t&>(
      ::VgeoDB::_LocalFeatMeta_t_default_instance_);
}
inline const ::VgeoDB::LocalFeatMeta_t& LocalFeature::stmeta() const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeature.stMeta)
  return _internal_stmeta();
}
inline void LocalFeature::unsafe_arena_set_allocated_stmeta(
    ::VgeoDB::LocalFeatMeta_t* stmeta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stmeta_);
  }
  stmeta_ = stmeta;
  if (stmeta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.LocalFeature.stMeta)
}
inline ::VgeoDB::LocalFeatMeta_t* LocalFeature::release_stmeta() {
  
  ::VgeoDB::LocalFeatMeta_t* temp = stmeta_;
  stmeta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::LocalFeatMeta_t* LocalFeature::unsafe_arena_release_stmeta() {
  // @@protoc_insertion_point(field_release:VgeoDB.LocalFeature.stMeta)
  
  ::VgeoDB::LocalFeatMeta_t* temp = stmeta_;
  stmeta_ = nullptr;
  return temp;
}
inline ::VgeoDB::LocalFeatMeta_t* LocalFeature::_internal_mutable_stmeta() {
  
  if (stmeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::LocalFeatMeta_t>(GetArena());
    stmeta_ = p;
  }
  return stmeta_;
}
inline ::VgeoDB::LocalFeatMeta_t* LocalFeature::mutable_stmeta() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.LocalFeature.stMeta)
  return _internal_mutable_stmeta();
}
inline void LocalFeature::set_allocated_stmeta(::VgeoDB::LocalFeatMeta_t* stmeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stmeta_;
  }
  if (stmeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stmeta);
    if (message_arena != submessage_arena) {
      stmeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stmeta, submessage_arena);
    }
    
  } else {
    
  }
  stmeta_ = stmeta;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.LocalFeature.stMeta)
}

// repeated .VgeoDB.KeyPoint_t stKeypoint = 2;
inline int LocalFeature::_internal_stkeypoint_size() const {
  return stkeypoint_.size();
}
inline int LocalFeature::stkeypoint_size() const {
  return _internal_stkeypoint_size();
}
inline void LocalFeature::clear_stkeypoint() {
  stkeypoint_.Clear();
}
inline ::VgeoDB::KeyPoint_t* LocalFeature::mutable_stkeypoint(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.LocalFeature.stKeypoint)
  return stkeypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >*
LocalFeature::mutable_stkeypoint() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.LocalFeature.stKeypoint)
  return &stkeypoint_;
}
inline const ::VgeoDB::KeyPoint_t& LocalFeature::_internal_stkeypoint(int index) const {
  return stkeypoint_.Get(index);
}
inline const ::VgeoDB::KeyPoint_t& LocalFeature::stkeypoint(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeature.stKeypoint)
  return _internal_stkeypoint(index);
}
inline ::VgeoDB::KeyPoint_t* LocalFeature::_internal_add_stkeypoint() {
  return stkeypoint_.Add();
}
inline ::VgeoDB::KeyPoint_t* LocalFeature::add_stkeypoint() {
  // @@protoc_insertion_point(field_add:VgeoDB.LocalFeature.stKeypoint)
  return _internal_add_stkeypoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >&
LocalFeature::stkeypoint() const {
  // @@protoc_insertion_point(field_list:VgeoDB.LocalFeature.stKeypoint)
  return stkeypoint_;
}

// -------------------------------------------------------------------

// LocalFeatureSet

// repeated .VgeoDB.LocalFeature arstLocalFeature = 1;
inline int LocalFeatureSet::_internal_arstlocalfeature_size() const {
  return arstlocalfeature_.size();
}
inline int LocalFeatureSet::arstlocalfeature_size() const {
  return _internal_arstlocalfeature_size();
}
inline void LocalFeatureSet::clear_arstlocalfeature() {
  arstlocalfeature_.Clear();
}
inline ::VgeoDB::LocalFeature* LocalFeatureSet::mutable_arstlocalfeature(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.LocalFeatureSet.arstLocalFeature)
  return arstlocalfeature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >*
LocalFeatureSet::mutable_arstlocalfeature() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.LocalFeatureSet.arstLocalFeature)
  return &arstlocalfeature_;
}
inline const ::VgeoDB::LocalFeature& LocalFeatureSet::_internal_arstlocalfeature(int index) const {
  return arstlocalfeature_.Get(index);
}
inline const ::VgeoDB::LocalFeature& LocalFeatureSet::arstlocalfeature(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.LocalFeatureSet.arstLocalFeature)
  return _internal_arstlocalfeature(index);
}
inline ::VgeoDB::LocalFeature* LocalFeatureSet::_internal_add_arstlocalfeature() {
  return arstlocalfeature_.Add();
}
inline ::VgeoDB::LocalFeature* LocalFeatureSet::add_arstlocalfeature() {
  // @@protoc_insertion_point(field_add:VgeoDB.LocalFeatureSet.arstLocalFeature)
  return _internal_add_arstlocalfeature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >&
LocalFeatureSet::arstlocalfeature() const {
  // @@protoc_insertion_point(field_list:VgeoDB.LocalFeatureSet.arstLocalFeature)
  return arstlocalfeature_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VgeoDB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VgeoDB::SuperPointDesc_t_eDescType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VgeoDB::SuperPointDesc_t_eDescType>() {
  return ::VgeoDB::SuperPointDesc_t_eDescType_descriptor();
}
template <> struct is_proto_enum< ::VgeoDB::KP2DDesc_t_eDescType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VgeoDB::KP2DDesc_t_eDescType>() {
  return ::VgeoDB::KP2DDesc_t_eDescType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_localfeature_2eproto
