// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ltdb_qr.proto

#include "ltdb_qr.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace VgeoDB {
namespace QR {
constexpr LocationQueryType_t::LocationQueryType_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stlocation_(nullptr)
  , fradius_(0){}
struct LocationQueryType_tDefaultTypeInternal {
  constexpr LocationQueryType_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationQueryType_tDefaultTypeInternal() {}
  union {
    LocationQueryType_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationQueryType_tDefaultTypeInternal _LocationQueryType_t_default_instance_;
constexpr QueryType_t::QueryType_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct QueryType_tDefaultTypeInternal {
  constexpr QueryType_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryType_tDefaultTypeInternal() {}
  union {
    QueryType_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryType_tDefaultTypeInternal _QueryType_t_default_instance_;
constexpr PlaceVectorQuery::PlaceVectorQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stquerytype_()
  , udescriptor_(nullptr)
  , nnearestmax_(0)
  , ndistancetype_(0){}
struct PlaceVectorQueryDefaultTypeInternal {
  constexpr PlaceVectorQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorQueryDefaultTypeInternal() {}
  union {
    PlaceVectorQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorQueryDefaultTypeInternal _PlaceVectorQuery_default_instance_;
constexpr PlaceVectorReturn::PlaceVectorReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstplacevectorr_(){}
struct PlaceVectorReturnDefaultTypeInternal {
  constexpr PlaceVectorReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorReturnDefaultTypeInternal() {}
  union {
    PlaceVectorReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorReturnDefaultTypeInternal _PlaceVectorReturn_default_instance_;
constexpr LocalFeatureQuery::LocalFeatureQuery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stquerytype_()
  , un64keypointindexlist_()
  , _un64keypointindexlist_cached_byte_size_()
  , udescriptor_()
  , stkeypoint_()
  , nnearestmax_(0)
  , ndistancetype_(0){}
struct LocalFeatureQueryDefaultTypeInternal {
  constexpr LocalFeatureQueryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureQueryDefaultTypeInternal() {}
  union {
    LocalFeatureQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureQueryDefaultTypeInternal _LocalFeatureQuery_default_instance_;
constexpr LocalFeatureReturnUnit::LocalFeatureReturnUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstmatchedfeature_()
  , un64matchedkeypointindex_(PROTOBUF_ULONGLONG(0)){}
struct LocalFeatureReturnUnitDefaultTypeInternal {
  constexpr LocalFeatureReturnUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureReturnUnitDefaultTypeInternal() {}
  union {
    LocalFeatureReturnUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureReturnUnitDefaultTypeInternal _LocalFeatureReturnUnit_default_instance_;
constexpr LocalFeatureReturn::LocalFeatureReturn(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstlocalfeaturer_(){}
struct LocalFeatureReturnDefaultTypeInternal {
  constexpr LocalFeatureReturnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureReturnDefaultTypeInternal() {}
  union {
    LocalFeatureReturn _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureReturnDefaultTypeInternal _LocalFeatureReturn_default_instance_;
}  // namespace QR
}  // namespace VgeoDB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ltdb_5fqr_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ltdb_5fqr_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ltdb_5fqr_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ltdb_5fqr_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocationQueryType_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocationQueryType_t, stlocation_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocationQueryType_t, fradius_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::QueryType_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::QueryType_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::QueryType_t, uQueryType_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorQuery, stquerytype_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorQuery, udescriptor_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorQuery, nnearestmax_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorQuery, ndistancetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::PlaceVectorReturn, arstplacevectorr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, stquerytype_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, un64keypointindexlist_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, stkeypoint_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, nnearestmax_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, ndistancetype_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureQuery, udescriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureReturnUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureReturnUnit, un64matchedkeypointindex_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureReturnUnit, arstmatchedfeature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureReturn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::QR::LocalFeatureReturn, arstlocalfeaturer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VgeoDB::QR::LocationQueryType_t)},
  { 7, -1, sizeof(::VgeoDB::QR::QueryType_t)},
  { 16, -1, sizeof(::VgeoDB::QR::PlaceVectorQuery)},
  { 25, -1, sizeof(::VgeoDB::QR::PlaceVectorReturn)},
  { 31, -1, sizeof(::VgeoDB::QR::LocalFeatureQuery)},
  { 42, -1, sizeof(::VgeoDB::QR::LocalFeatureReturnUnit)},
  { 49, -1, sizeof(::VgeoDB::QR::LocalFeatureReturn)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_LocationQueryType_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_QueryType_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_PlaceVectorQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_PlaceVectorReturn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_LocalFeatureQuery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_LocalFeatureReturnUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::QR::_LocalFeatureReturn_default_instance_),
};

const char descriptor_table_protodef_ltdb_5fqr_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rltdb_qr.proto\022\tVgeoDB.QR\032\023vgeodb_commo"
  "n.proto\032\021placevector.proto\032\022localfeature"
  ".proto\"R\n\023LocationQueryType_t\022*\n\nstLocat"
  "ion\030\001 \001(\0132\026.VgeoDB.common.XYZ64_t\022\017\n\007fRa"
  "dius\030\002 \001(\002\"\210\001\n\013QueryType_t\0224\n\nstLocation"
  "\030\001 \001(\0132\036.VgeoDB.QR.LocationQueryType_tH\000"
  "\022\032\n\020un64UniqueIDList\030\002 \001(\004H\000\022\031\n\017un64Grou"
  "pIDList\030\003 \001(\004H\000B\014\n\nuQueryType\"\231\001\n\020PlaceV"
  "ectorQuery\022+\n\013stQueryType\030\001 \003(\0132\026.VgeoDB"
  ".QR.QueryType_t\022,\n\013uDescriptor\030\002 \001(\0132\027.V"
  "geoDB.PlaceVectorDesc\022\023\n\013nNearestMax\030\004 \001"
  "(\005\022\025\n\rnDistanceType\030\005 \001(\005\"H\n\021PlaceVector"
  "Return\0223\n\020arstPlaceVectorR\030\001 \003(\0132\031.VgeoD"
  "B.PlaceVectorMeta_t\"\342\001\n\021LocalFeatureQuer"
  "y\022+\n\013stQueryType\030\001 \003(\0132\026.VgeoDB.QR.Query"
  "Type_t\022\035\n\025un64KeypointIndexList\030\004 \003(\004\022&\n"
  "\nstKeypoint\030\010 \003(\0132\022.VgeoDB.KeyPoint_t\022\023\n"
  "\013nNearestMax\030\006 \001(\005\022\025\n\rnDistanceType\030\007 \001("
  "\005\022-\n\013uDescriptor\030\005 \003(\0132\030.VgeoDB.LocalFea"
  "tureDesc\"l\n\026LocalFeatureReturnUnit\022 \n\030un"
  "64MatchedKeypointIndex\030\001 \001(\004\0220\n\022arstMatc"
  "hedFeature\030\002 \003(\0132\024.VgeoDB.LocalFeature\"R"
  "\n\022LocalFeatureReturn\022<\n\021arstLocalFeature"
  "R\030\001 \003(\0132!.VgeoDB.QR.LocalFeatureReturnUn"
  "itB\013\n\tvgeodb.qrb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ltdb_5fqr_2eproto_deps[3] = {
  &::descriptor_table_localfeature_2eproto,
  &::descriptor_table_placevector_2eproto,
  &::descriptor_table_vgeodb_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ltdb_5fqr_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ltdb_5fqr_2eproto = {
  false, false, 983, descriptor_table_protodef_ltdb_5fqr_2eproto, "ltdb_qr.proto", 
  &descriptor_table_ltdb_5fqr_2eproto_once, descriptor_table_ltdb_5fqr_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_ltdb_5fqr_2eproto::offsets,
  file_level_metadata_ltdb_5fqr_2eproto, file_level_enum_descriptors_ltdb_5fqr_2eproto, file_level_service_descriptors_ltdb_5fqr_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_ltdb_5fqr_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ltdb_5fqr_2eproto);
  return descriptor_table_ltdb_5fqr_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ltdb_5fqr_2eproto(&descriptor_table_ltdb_5fqr_2eproto);
namespace VgeoDB {
namespace QR {

// ===================================================================

class LocationQueryType_t::_Internal {
 public:
  static const ::VgeoDB::common::XYZ64_t& stlocation(const LocationQueryType_t* msg);
};

const ::VgeoDB::common::XYZ64_t&
LocationQueryType_t::_Internal::stlocation(const LocationQueryType_t* msg) {
  return *msg->stlocation_;
}
void LocationQueryType_t::clear_stlocation() {
  if (GetArena() == nullptr && stlocation_ != nullptr) {
    delete stlocation_;
  }
  stlocation_ = nullptr;
}
LocationQueryType_t::LocationQueryType_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.LocationQueryType_t)
}
LocationQueryType_t::LocationQueryType_t(const LocationQueryType_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stlocation()) {
    stlocation_ = new ::VgeoDB::common::XYZ64_t(*from.stlocation_);
  } else {
    stlocation_ = nullptr;
  }
  fradius_ = from.fradius_;
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.LocationQueryType_t)
}

void LocationQueryType_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stlocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fradius_) -
    reinterpret_cast<char*>(&stlocation_)) + sizeof(fradius_));
}

LocationQueryType_t::~LocationQueryType_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.LocationQueryType_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationQueryType_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stlocation_;
}

void LocationQueryType_t::ArenaDtor(void* object) {
  LocationQueryType_t* _this = reinterpret_cast< LocationQueryType_t* >(object);
  (void)_this;
}
void LocationQueryType_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationQueryType_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocationQueryType_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.LocationQueryType_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stlocation_ != nullptr) {
    delete stlocation_;
  }
  stlocation_ = nullptr;
  fradius_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationQueryType_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.common.XYZ64_t stLocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fRadius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationQueryType_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.LocationQueryType_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.common.XYZ64_t stLocation = 1;
  if (this->has_stlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stlocation(this), target, stream);
  }

  // float fRadius = 2;
  if (!(this->fradius() <= 0 && this->fradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fradius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.LocationQueryType_t)
  return target;
}

size_t LocationQueryType_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.LocationQueryType_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VgeoDB.common.XYZ64_t stLocation = 1;
  if (this->has_stlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlocation_);
  }

  // float fRadius = 2;
  if (!(this->fradius() <= 0 && this->fradius() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationQueryType_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.LocationQueryType_t)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationQueryType_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationQueryType_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.LocationQueryType_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.LocationQueryType_t)
    MergeFrom(*source);
  }
}

void LocationQueryType_t::MergeFrom(const LocationQueryType_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.LocationQueryType_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stlocation()) {
    _internal_mutable_stlocation()->::VgeoDB::common::XYZ64_t::MergeFrom(from._internal_stlocation());
  }
  if (!(from.fradius() <= 0 && from.fradius() >= 0)) {
    _internal_set_fradius(from._internal_fradius());
  }
}

void LocationQueryType_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.LocationQueryType_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationQueryType_t::CopyFrom(const LocationQueryType_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.LocationQueryType_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationQueryType_t::IsInitialized() const {
  return true;
}

void LocationQueryType_t::InternalSwap(LocationQueryType_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocationQueryType_t, fradius_)
      + sizeof(LocationQueryType_t::fradius_)
      - PROTOBUF_FIELD_OFFSET(LocationQueryType_t, stlocation_)>(
          reinterpret_cast<char*>(&stlocation_),
          reinterpret_cast<char*>(&other->stlocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationQueryType_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryType_t::_Internal {
 public:
  static const ::VgeoDB::QR::LocationQueryType_t& stlocation(const QueryType_t* msg);
};

const ::VgeoDB::QR::LocationQueryType_t&
QueryType_t::_Internal::stlocation(const QueryType_t* msg) {
  return *msg->uQueryType_.stlocation_;
}
void QueryType_t::set_allocated_stlocation(::VgeoDB::QR::LocationQueryType_t* stlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_uQueryType();
  if (stlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stlocation);
    if (message_arena != submessage_arena) {
      stlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stlocation, submessage_arena);
    }
    set_has_stlocation();
    uQueryType_.stlocation_ = stlocation;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.QR.QueryType_t.stLocation)
}
QueryType_t::QueryType_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.QueryType_t)
}
QueryType_t::QueryType_t(const QueryType_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_uQueryType();
  switch (from.uQueryType_case()) {
    case kStLocation: {
      _internal_mutable_stlocation()->::VgeoDB::QR::LocationQueryType_t::MergeFrom(from._internal_stlocation());
      break;
    }
    case kUn64UniqueIDList: {
      _internal_set_un64uniqueidlist(from._internal_un64uniqueidlist());
      break;
    }
    case kUn64GroupIDList: {
      _internal_set_un64groupidlist(from._internal_un64groupidlist());
      break;
    }
    case UQUERYTYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.QueryType_t)
}

void QueryType_t::SharedCtor() {
clear_has_uQueryType();
}

QueryType_t::~QueryType_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.QueryType_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryType_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_uQueryType()) {
    clear_uQueryType();
  }
}

void QueryType_t::ArenaDtor(void* object) {
  QueryType_t* _this = reinterpret_cast< QueryType_t* >(object);
  (void)_this;
}
void QueryType_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryType_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryType_t::clear_uQueryType() {
// @@protoc_insertion_point(one_of_clear_start:VgeoDB.QR.QueryType_t)
  switch (uQueryType_case()) {
    case kStLocation: {
      if (GetArena() == nullptr) {
        delete uQueryType_.stlocation_;
      }
      break;
    }
    case kUn64UniqueIDList: {
      // No need to clear
      break;
    }
    case kUn64GroupIDList: {
      // No need to clear
      break;
    }
    case UQUERYTYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UQUERYTYPE_NOT_SET;
}


void QueryType_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.QueryType_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_uQueryType();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryType_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.QR.LocationQueryType_t stLocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64UniqueIDList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_un64uniqueidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64GroupIDList = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_un64groupidlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryType_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.QueryType_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.QR.LocationQueryType_t stLocation = 1;
  if (_internal_has_stlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stlocation(this), target, stream);
  }

  // uint64 un64UniqueIDList = 2;
  if (_internal_has_un64uniqueidlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_un64uniqueidlist(), target);
  }

  // uint64 un64GroupIDList = 3;
  if (_internal_has_un64groupidlist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_un64groupidlist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.QueryType_t)
  return target;
}

size_t QueryType_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.QueryType_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (uQueryType_case()) {
    // .VgeoDB.QR.LocationQueryType_t stLocation = 1;
    case kStLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uQueryType_.stlocation_);
      break;
    }
    // uint64 un64UniqueIDList = 2;
    case kUn64UniqueIDList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_un64uniqueidlist());
      break;
    }
    // uint64 un64GroupIDList = 3;
    case kUn64GroupIDList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_un64groupidlist());
      break;
    }
    case UQUERYTYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryType_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.QueryType_t)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryType_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryType_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.QueryType_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.QueryType_t)
    MergeFrom(*source);
  }
}

void QueryType_t::MergeFrom(const QueryType_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.QueryType_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.uQueryType_case()) {
    case kStLocation: {
      _internal_mutable_stlocation()->::VgeoDB::QR::LocationQueryType_t::MergeFrom(from._internal_stlocation());
      break;
    }
    case kUn64UniqueIDList: {
      _internal_set_un64uniqueidlist(from._internal_un64uniqueidlist());
      break;
    }
    case kUn64GroupIDList: {
      _internal_set_un64groupidlist(from._internal_un64groupidlist());
      break;
    }
    case UQUERYTYPE_NOT_SET: {
      break;
    }
  }
}

void QueryType_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.QueryType_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryType_t::CopyFrom(const QueryType_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.QueryType_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryType_t::IsInitialized() const {
  return true;
}

void QueryType_t::InternalSwap(QueryType_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(uQueryType_, other->uQueryType_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryType_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceVectorQuery::_Internal {
 public:
  static const ::VgeoDB::PlaceVectorDesc& udescriptor(const PlaceVectorQuery* msg);
};

const ::VgeoDB::PlaceVectorDesc&
PlaceVectorQuery::_Internal::udescriptor(const PlaceVectorQuery* msg) {
  return *msg->udescriptor_;
}
void PlaceVectorQuery::clear_udescriptor() {
  if (GetArena() == nullptr && udescriptor_ != nullptr) {
    delete udescriptor_;
  }
  udescriptor_ = nullptr;
}
PlaceVectorQuery::PlaceVectorQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stquerytype_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.PlaceVectorQuery)
}
PlaceVectorQuery::PlaceVectorQuery(const PlaceVectorQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stquerytype_(from.stquerytype_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_udescriptor()) {
    udescriptor_ = new ::VgeoDB::PlaceVectorDesc(*from.udescriptor_);
  } else {
    udescriptor_ = nullptr;
  }
  ::memcpy(&nnearestmax_, &from.nnearestmax_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndistancetype_) -
    reinterpret_cast<char*>(&nnearestmax_)) + sizeof(ndistancetype_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.PlaceVectorQuery)
}

void PlaceVectorQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&udescriptor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ndistancetype_) -
    reinterpret_cast<char*>(&udescriptor_)) + sizeof(ndistancetype_));
}

PlaceVectorQuery::~PlaceVectorQuery() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.PlaceVectorQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete udescriptor_;
}

void PlaceVectorQuery::ArenaDtor(void* object) {
  PlaceVectorQuery* _this = reinterpret_cast< PlaceVectorQuery* >(object);
  (void)_this;
}
void PlaceVectorQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.PlaceVectorQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stquerytype_.Clear();
  if (GetArena() == nullptr && udescriptor_ != nullptr) {
    delete udescriptor_;
  }
  udescriptor_ = nullptr;
  ::memset(&nnearestmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndistancetype_) -
      reinterpret_cast<char*>(&nnearestmax_)) + sizeof(ndistancetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stquerytype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_udescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nNearestMax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nnearestmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nDistanceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ndistancetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.PlaceVectorQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stquerytype_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stquerytype(i), target, stream);
  }

  // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
  if (this->has_udescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::udescriptor(this), target, stream);
  }

  // int32 nNearestMax = 4;
  if (this->nnearestmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_nnearestmax(), target);
  }

  // int32 nDistanceType = 5;
  if (this->ndistancetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ndistancetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.PlaceVectorQuery)
  return target;
}

size_t PlaceVectorQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.PlaceVectorQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
  total_size += 1UL * this->_internal_stquerytype_size();
  for (const auto& msg : this->stquerytype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
  if (this->has_udescriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udescriptor_);
  }

  // int32 nNearestMax = 4;
  if (this->nnearestmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nnearestmax());
  }

  // int32 nDistanceType = 5;
  if (this->ndistancetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndistancetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.PlaceVectorQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.PlaceVectorQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.PlaceVectorQuery)
    MergeFrom(*source);
  }
}

void PlaceVectorQuery::MergeFrom(const PlaceVectorQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.PlaceVectorQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stquerytype_.MergeFrom(from.stquerytype_);
  if (from.has_udescriptor()) {
    _internal_mutable_udescriptor()->::VgeoDB::PlaceVectorDesc::MergeFrom(from._internal_udescriptor());
  }
  if (from.nnearestmax() != 0) {
    _internal_set_nnearestmax(from._internal_nnearestmax());
  }
  if (from.ndistancetype() != 0) {
    _internal_set_ndistancetype(from._internal_ndistancetype());
  }
}

void PlaceVectorQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.PlaceVectorQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorQuery::CopyFrom(const PlaceVectorQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.PlaceVectorQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorQuery::IsInitialized() const {
  return true;
}

void PlaceVectorQuery::InternalSwap(PlaceVectorQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stquerytype_.InternalSwap(&other->stquerytype_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceVectorQuery, ndistancetype_)
      + sizeof(PlaceVectorQuery::ndistancetype_)
      - PROTOBUF_FIELD_OFFSET(PlaceVectorQuery, udescriptor_)>(
          reinterpret_cast<char*>(&udescriptor_),
          reinterpret_cast<char*>(&other->udescriptor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceVectorReturn::_Internal {
 public:
};

void PlaceVectorReturn::clear_arstplacevectorr() {
  arstplacevectorr_.Clear();
}
PlaceVectorReturn::PlaceVectorReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstplacevectorr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.PlaceVectorReturn)
}
PlaceVectorReturn::PlaceVectorReturn(const PlaceVectorReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstplacevectorr_(from.arstplacevectorr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.PlaceVectorReturn)
}

void PlaceVectorReturn::SharedCtor() {
}

PlaceVectorReturn::~PlaceVectorReturn() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.PlaceVectorReturn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceVectorReturn::ArenaDtor(void* object) {
  PlaceVectorReturn* _this = reinterpret_cast< PlaceVectorReturn* >(object);
  (void)_this;
}
void PlaceVectorReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.PlaceVectorReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstplacevectorr_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VgeoDB.PlaceVectorMeta_t arstPlaceVectorR = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstplacevectorr(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorReturn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.PlaceVectorReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VgeoDB.PlaceVectorMeta_t arstPlaceVectorR = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstplacevectorr_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arstplacevectorr(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.PlaceVectorReturn)
  return target;
}

size_t PlaceVectorReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.PlaceVectorReturn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.PlaceVectorMeta_t arstPlaceVectorR = 1;
  total_size += 1UL * this->_internal_arstplacevectorr_size();
  for (const auto& msg : this->arstplacevectorr_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorReturn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.PlaceVectorReturn)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorReturn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorReturn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.PlaceVectorReturn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.PlaceVectorReturn)
    MergeFrom(*source);
  }
}

void PlaceVectorReturn::MergeFrom(const PlaceVectorReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.PlaceVectorReturn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstplacevectorr_.MergeFrom(from.arstplacevectorr_);
}

void PlaceVectorReturn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.PlaceVectorReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorReturn::CopyFrom(const PlaceVectorReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.PlaceVectorReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorReturn::IsInitialized() const {
  return true;
}

void PlaceVectorReturn::InternalSwap(PlaceVectorReturn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstplacevectorr_.InternalSwap(&other->arstplacevectorr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorReturn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatureQuery::_Internal {
 public:
};

void LocalFeatureQuery::clear_stkeypoint() {
  stkeypoint_.Clear();
}
void LocalFeatureQuery::clear_udescriptor() {
  udescriptor_.Clear();
}
LocalFeatureQuery::LocalFeatureQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stquerytype_(arena),
  un64keypointindexlist_(arena),
  udescriptor_(arena),
  stkeypoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.LocalFeatureQuery)
}
LocalFeatureQuery::LocalFeatureQuery(const LocalFeatureQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stquerytype_(from.stquerytype_),
      un64keypointindexlist_(from.un64keypointindexlist_),
      udescriptor_(from.udescriptor_),
      stkeypoint_(from.stkeypoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nnearestmax_, &from.nnearestmax_,
    static_cast<size_t>(reinterpret_cast<char*>(&ndistancetype_) -
    reinterpret_cast<char*>(&nnearestmax_)) + sizeof(ndistancetype_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.LocalFeatureQuery)
}

void LocalFeatureQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&nnearestmax_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ndistancetype_) -
    reinterpret_cast<char*>(&nnearestmax_)) + sizeof(ndistancetype_));
}

LocalFeatureQuery::~LocalFeatureQuery() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.LocalFeatureQuery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatureQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalFeatureQuery::ArenaDtor(void* object) {
  LocalFeatureQuery* _this = reinterpret_cast< LocalFeatureQuery* >(object);
  (void)_this;
}
void LocalFeatureQuery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatureQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatureQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.LocalFeatureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stquerytype_.Clear();
  un64keypointindexlist_.Clear();
  udescriptor_.Clear();
  stkeypoint_.Clear();
  ::memset(&nnearestmax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ndistancetype_) -
      reinterpret_cast<char*>(&nnearestmax_)) + sizeof(ndistancetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatureQuery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stquerytype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 un64KeypointIndexList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_un64keypointindexlist(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_un64keypointindexlist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VgeoDB.LocalFeatureDesc uDescriptor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_udescriptor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 nNearestMax = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          nnearestmax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nDistanceType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ndistancetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VgeoDB.KeyPoint_t stKeypoint = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stkeypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatureQuery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.LocalFeatureQuery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stquerytype_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stquerytype(i), target, stream);
  }

  // repeated uint64 un64KeypointIndexList = 4;
  {
    int byte_size = _un64keypointindexlist_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_un64keypointindexlist(), byte_size, target);
    }
  }

  // repeated .VgeoDB.LocalFeatureDesc uDescriptor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_udescriptor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_udescriptor(i), target, stream);
  }

  // int32 nNearestMax = 6;
  if (this->nnearestmax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_nnearestmax(), target);
  }

  // int32 nDistanceType = 7;
  if (this->ndistancetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ndistancetype(), target);
  }

  // repeated .VgeoDB.KeyPoint_t stKeypoint = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stkeypoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_stkeypoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.LocalFeatureQuery)
  return target;
}

size_t LocalFeatureQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.LocalFeatureQuery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
  total_size += 1UL * this->_internal_stquerytype_size();
  for (const auto& msg : this->stquerytype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 un64KeypointIndexList = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->un64keypointindexlist_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _un64keypointindexlist_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .VgeoDB.LocalFeatureDesc uDescriptor = 5;
  total_size += 1UL * this->_internal_udescriptor_size();
  for (const auto& msg : this->udescriptor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .VgeoDB.KeyPoint_t stKeypoint = 8;
  total_size += 1UL * this->_internal_stkeypoint_size();
  for (const auto& msg : this->stkeypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 nNearestMax = 6;
  if (this->nnearestmax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nnearestmax());
  }

  // int32 nDistanceType = 7;
  if (this->ndistancetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ndistancetype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatureQuery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.LocalFeatureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatureQuery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatureQuery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.LocalFeatureQuery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.LocalFeatureQuery)
    MergeFrom(*source);
  }
}

void LocalFeatureQuery::MergeFrom(const LocalFeatureQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.LocalFeatureQuery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stquerytype_.MergeFrom(from.stquerytype_);
  un64keypointindexlist_.MergeFrom(from.un64keypointindexlist_);
  udescriptor_.MergeFrom(from.udescriptor_);
  stkeypoint_.MergeFrom(from.stkeypoint_);
  if (from.nnearestmax() != 0) {
    _internal_set_nnearestmax(from._internal_nnearestmax());
  }
  if (from.ndistancetype() != 0) {
    _internal_set_ndistancetype(from._internal_ndistancetype());
  }
}

void LocalFeatureQuery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.LocalFeatureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatureQuery::CopyFrom(const LocalFeatureQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.LocalFeatureQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatureQuery::IsInitialized() const {
  return true;
}

void LocalFeatureQuery::InternalSwap(LocalFeatureQuery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stquerytype_.InternalSwap(&other->stquerytype_);
  un64keypointindexlist_.InternalSwap(&other->un64keypointindexlist_);
  udescriptor_.InternalSwap(&other->udescriptor_);
  stkeypoint_.InternalSwap(&other->stkeypoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalFeatureQuery, ndistancetype_)
      + sizeof(LocalFeatureQuery::ndistancetype_)
      - PROTOBUF_FIELD_OFFSET(LocalFeatureQuery, nnearestmax_)>(
          reinterpret_cast<char*>(&nnearestmax_),
          reinterpret_cast<char*>(&other->nnearestmax_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatureQuery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatureReturnUnit::_Internal {
 public:
};

void LocalFeatureReturnUnit::clear_arstmatchedfeature() {
  arstmatchedfeature_.Clear();
}
LocalFeatureReturnUnit::LocalFeatureReturnUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstmatchedfeature_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.LocalFeatureReturnUnit)
}
LocalFeatureReturnUnit::LocalFeatureReturnUnit(const LocalFeatureReturnUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstmatchedfeature_(from.arstmatchedfeature_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  un64matchedkeypointindex_ = from.un64matchedkeypointindex_;
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.LocalFeatureReturnUnit)
}

void LocalFeatureReturnUnit::SharedCtor() {
un64matchedkeypointindex_ = PROTOBUF_ULONGLONG(0);
}

LocalFeatureReturnUnit::~LocalFeatureReturnUnit() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.LocalFeatureReturnUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatureReturnUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalFeatureReturnUnit::ArenaDtor(void* object) {
  LocalFeatureReturnUnit* _this = reinterpret_cast< LocalFeatureReturnUnit* >(object);
  (void)_this;
}
void LocalFeatureReturnUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatureReturnUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatureReturnUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.LocalFeatureReturnUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstmatchedfeature_.Clear();
  un64matchedkeypointindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatureReturnUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 un64MatchedKeypointIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          un64matchedkeypointindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VgeoDB.LocalFeature arstMatchedFeature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstmatchedfeature(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatureReturnUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.LocalFeatureReturnUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 un64MatchedKeypointIndex = 1;
  if (this->un64matchedkeypointindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_un64matchedkeypointindex(), target);
  }

  // repeated .VgeoDB.LocalFeature arstMatchedFeature = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstmatchedfeature_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_arstmatchedfeature(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.LocalFeatureReturnUnit)
  return target;
}

size_t LocalFeatureReturnUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.LocalFeatureReturnUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.LocalFeature arstMatchedFeature = 2;
  total_size += 1UL * this->_internal_arstmatchedfeature_size();
  for (const auto& msg : this->arstmatchedfeature_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 un64MatchedKeypointIndex = 1;
  if (this->un64matchedkeypointindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64matchedkeypointindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatureReturnUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.LocalFeatureReturnUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatureReturnUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatureReturnUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.LocalFeatureReturnUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.LocalFeatureReturnUnit)
    MergeFrom(*source);
  }
}

void LocalFeatureReturnUnit::MergeFrom(const LocalFeatureReturnUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.LocalFeatureReturnUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstmatchedfeature_.MergeFrom(from.arstmatchedfeature_);
  if (from.un64matchedkeypointindex() != 0) {
    _internal_set_un64matchedkeypointindex(from._internal_un64matchedkeypointindex());
  }
}

void LocalFeatureReturnUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.LocalFeatureReturnUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatureReturnUnit::CopyFrom(const LocalFeatureReturnUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.LocalFeatureReturnUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatureReturnUnit::IsInitialized() const {
  return true;
}

void LocalFeatureReturnUnit::InternalSwap(LocalFeatureReturnUnit* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstmatchedfeature_.InternalSwap(&other->arstmatchedfeature_);
  swap(un64matchedkeypointindex_, other->un64matchedkeypointindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatureReturnUnit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatureReturn::_Internal {
 public:
};

LocalFeatureReturn::LocalFeatureReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstlocalfeaturer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.QR.LocalFeatureReturn)
}
LocalFeatureReturn::LocalFeatureReturn(const LocalFeatureReturn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstlocalfeaturer_(from.arstlocalfeaturer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VgeoDB.QR.LocalFeatureReturn)
}

void LocalFeatureReturn::SharedCtor() {
}

LocalFeatureReturn::~LocalFeatureReturn() {
  // @@protoc_insertion_point(destructor:VgeoDB.QR.LocalFeatureReturn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatureReturn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalFeatureReturn::ArenaDtor(void* object) {
  LocalFeatureReturn* _this = reinterpret_cast< LocalFeatureReturn* >(object);
  (void)_this;
}
void LocalFeatureReturn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatureReturn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatureReturn::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.QR.LocalFeatureReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstlocalfeaturer_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatureReturn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VgeoDB.QR.LocalFeatureReturnUnit arstLocalFeatureR = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstlocalfeaturer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatureReturn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.QR.LocalFeatureReturn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VgeoDB.QR.LocalFeatureReturnUnit arstLocalFeatureR = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstlocalfeaturer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arstlocalfeaturer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.QR.LocalFeatureReturn)
  return target;
}

size_t LocalFeatureReturn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.QR.LocalFeatureReturn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.QR.LocalFeatureReturnUnit arstLocalFeatureR = 1;
  total_size += 1UL * this->_internal_arstlocalfeaturer_size();
  for (const auto& msg : this->arstlocalfeaturer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatureReturn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.QR.LocalFeatureReturn)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatureReturn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatureReturn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.QR.LocalFeatureReturn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.QR.LocalFeatureReturn)
    MergeFrom(*source);
  }
}

void LocalFeatureReturn::MergeFrom(const LocalFeatureReturn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.QR.LocalFeatureReturn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstlocalfeaturer_.MergeFrom(from.arstlocalfeaturer_);
}

void LocalFeatureReturn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.QR.LocalFeatureReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatureReturn::CopyFrom(const LocalFeatureReturn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.QR.LocalFeatureReturn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatureReturn::IsInitialized() const {
  return true;
}

void LocalFeatureReturn::InternalSwap(LocalFeatureReturn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstlocalfeaturer_.InternalSwap(&other->arstlocalfeaturer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatureReturn::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace QR
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::LocationQueryType_t* Arena::CreateMaybeMessage< ::VgeoDB::QR::LocationQueryType_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::LocationQueryType_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::QueryType_t* Arena::CreateMaybeMessage< ::VgeoDB::QR::QueryType_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::QueryType_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::PlaceVectorQuery* Arena::CreateMaybeMessage< ::VgeoDB::QR::PlaceVectorQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::PlaceVectorQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::PlaceVectorReturn* Arena::CreateMaybeMessage< ::VgeoDB::QR::PlaceVectorReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::PlaceVectorReturn >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::LocalFeatureQuery* Arena::CreateMaybeMessage< ::VgeoDB::QR::LocalFeatureQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::LocalFeatureQuery >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::LocalFeatureReturnUnit* Arena::CreateMaybeMessage< ::VgeoDB::QR::LocalFeatureReturnUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::LocalFeatureReturnUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::QR::LocalFeatureReturn* Arena::CreateMaybeMessage< ::VgeoDB::QR::LocalFeatureReturn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::QR::LocalFeatureReturn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
