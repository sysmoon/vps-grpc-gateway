// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_meta.proto

#include "prdb_meta.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace prdb {
namespace meta {
constexpr XYZ64_t::XYZ64_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f64x_(0)
  , f64y_(0)
  , f64z_(0){}
struct XYZ64_tDefaultTypeInternal {
  constexpr XYZ64_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XYZ64_tDefaultTypeInternal() {}
  union {
    XYZ64_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XYZ64_tDefaultTypeInternal _XYZ64_t_default_instance_;
constexpr XYZ32_t::XYZ32_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f32x_(0)
  , f32y_(0)
  , f32z_(0){}
struct XYZ32_tDefaultTypeInternal {
  constexpr XYZ32_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XYZ32_tDefaultTypeInternal() {}
  union {
    XYZ32_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XYZ32_tDefaultTypeInternal _XYZ32_t_default_instance_;
constexpr Orientation32_t::Orientation32_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f32qx_(0)
  , f32qy_(0)
  , f32qz_(0)
  , f32qw_(0){}
struct Orientation32_tDefaultTypeInternal {
  constexpr Orientation32_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Orientation32_tDefaultTypeInternal() {}
  union {
    Orientation32_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Orientation32_tDefaultTypeInternal _Orientation32_t_default_instance_;
constexpr UVPoint_t::UVPoint_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : un32u_(0u)
  , un32v_(0u)
  , f32u_(0)
  , f32v_(0){}
struct UVPoint_tDefaultTypeInternal {
  constexpr UVPoint_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UVPoint_tDefaultTypeInternal() {}
  union {
    UVPoint_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UVPoint_tDefaultTypeInternal _UVPoint_t_default_instance_;
constexpr Meta_t::Meta_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stlocationset_()
  , stavglocation_(nullptr)
  , storientation_(nullptr)
  , stdirectionvector_(nullptr)
  , u64keyframeindex_(PROTOBUF_ULONGLONG(0))
  , u64timestamp_(PROTOBUF_ULONGLONG(0)){}
struct Meta_tDefaultTypeInternal {
  constexpr Meta_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Meta_tDefaultTypeInternal() {}
  union {
    Meta_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Meta_tDefaultTypeInternal _Meta_t_default_instance_;
}  // namespace meta
}  // namespace prdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prdb_5fmeta_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prdb_5fmeta_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prdb_5fmeta_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prdb_5fmeta_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ64_t, f64x_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ64_t, f64y_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ64_t, f64z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ32_t, f32x_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ32_t, f32y_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::XYZ32_t, f32z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Orientation32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Orientation32_t, f32qx_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Orientation32_t, f32qy_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Orientation32_t, f32qz_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Orientation32_t, f32qw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::UVPoint_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::UVPoint_t, un32u_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::UVPoint_t, un32v_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::UVPoint_t, f32u_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::UVPoint_t, f32v_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, u64keyframeindex_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, u64timestamp_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, stavglocation_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, storientation_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, stdirectionvector_),
  PROTOBUF_FIELD_OFFSET(::prdb::meta::Meta_t, stlocationset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prdb::meta::XYZ64_t)},
  { 8, -1, sizeof(::prdb::meta::XYZ32_t)},
  { 16, -1, sizeof(::prdb::meta::Orientation32_t)},
  { 25, -1, sizeof(::prdb::meta::UVPoint_t)},
  { 34, -1, sizeof(::prdb::meta::Meta_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::meta::_XYZ64_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::meta::_XYZ32_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::meta::_Orientation32_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::meta::_UVPoint_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::meta::_Meta_t_default_instance_),
};

const char descriptor_table_protodef_prdb_5fmeta_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017prdb_meta.proto\022\tprdb.meta\"3\n\007XYZ64_t\022"
  "\014\n\004f64X\030\001 \001(\001\022\014\n\004f64Y\030\002 \001(\001\022\014\n\004f64Z\030\003 \001("
  "\001\"3\n\007XYZ32_t\022\014\n\004f32X\030\001 \001(\002\022\014\n\004f32Y\030\002 \001(\002"
  "\022\014\n\004f32Z\030\003 \001(\002\"M\n\017Orientation32_t\022\r\n\005f32"
  "qX\030\001 \001(\002\022\r\n\005f32qY\030\002 \001(\002\022\r\n\005f32qZ\030\003 \001(\002\022\r"
  "\n\005f32qW\030\004 \001(\002\"E\n\tUVPoint_t\022\r\n\005un32U\030\001 \001("
  "\r\022\r\n\005un32V\030\002 \001(\r\022\014\n\004f32U\030\003 \001(\002\022\014\n\004f32V\030\004"
  " \001(\002\"\360\001\n\006Meta_t\022\030\n\020u64KeyFrameIndex\030\001 \001("
  "\004\022\024\n\014u64Timestamp\030\002 \001(\004\022)\n\rstAvgLocation"
  "\030\003 \001(\0132\022.prdb.meta.XYZ64_t\0221\n\rstOrientat"
  "ion\030\004 \001(\0132\032.prdb.meta.Orientation32_t\022-\n"
  "\021stDirectionVector\030\005 \001(\0132\022.prdb.meta.XYZ"
  "32_t\022)\n\rstLocationSet\030\006 \003(\0132\022.prdb.meta."
  "XYZ64_tB\013\n\tdbms.prdbb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prdb_5fmeta_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5fmeta_2eproto = {
  false, false, 548, descriptor_table_protodef_prdb_5fmeta_2eproto, "prdb_meta.proto", 
  &descriptor_table_prdb_5fmeta_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_prdb_5fmeta_2eproto::offsets,
  file_level_metadata_prdb_5fmeta_2eproto, file_level_enum_descriptors_prdb_5fmeta_2eproto, file_level_service_descriptors_prdb_5fmeta_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_prdb_5fmeta_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prdb_5fmeta_2eproto);
  return descriptor_table_prdb_5fmeta_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prdb_5fmeta_2eproto(&descriptor_table_prdb_5fmeta_2eproto);
namespace prdb {
namespace meta {

// ===================================================================

class XYZ64_t::_Internal {
 public:
};

XYZ64_t::XYZ64_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.meta.XYZ64_t)
}
XYZ64_t::XYZ64_t(const XYZ64_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f64x_, &from.f64x_,
    static_cast<size_t>(reinterpret_cast<char*>(&f64z_) -
    reinterpret_cast<char*>(&f64x_)) + sizeof(f64z_));
  // @@protoc_insertion_point(copy_constructor:prdb.meta.XYZ64_t)
}

void XYZ64_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f64x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f64z_) -
    reinterpret_cast<char*>(&f64x_)) + sizeof(f64z_));
}

XYZ64_t::~XYZ64_t() {
  // @@protoc_insertion_point(destructor:prdb.meta.XYZ64_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XYZ64_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XYZ64_t::ArenaDtor(void* object) {
  XYZ64_t* _this = reinterpret_cast< XYZ64_t* >(object);
  (void)_this;
}
void XYZ64_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYZ64_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XYZ64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.meta.XYZ64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f64x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f64z_) -
      reinterpret_cast<char*>(&f64x_)) + sizeof(f64z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYZ64_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double f64X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          f64x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          f64y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          f64z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XYZ64_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.meta.XYZ64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double f64X = 1;
  if (!(this->f64x() <= 0 && this->f64x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_f64x(), target);
  }

  // double f64Y = 2;
  if (!(this->f64y() <= 0 && this->f64y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f64y(), target);
  }

  // double f64Z = 3;
  if (!(this->f64z() <= 0 && this->f64z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_f64z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.meta.XYZ64_t)
  return target;
}

size_t XYZ64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.meta.XYZ64_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double f64X = 1;
  if (!(this->f64x() <= 0 && this->f64x() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Y = 2;
  if (!(this->f64y() <= 0 && this->f64y() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Z = 3;
  if (!(this->f64z() <= 0 && this->f64z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XYZ64_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.meta.XYZ64_t)
  GOOGLE_DCHECK_NE(&from, this);
  const XYZ64_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XYZ64_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.meta.XYZ64_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.meta.XYZ64_t)
    MergeFrom(*source);
  }
}

void XYZ64_t::MergeFrom(const XYZ64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.meta.XYZ64_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.f64x() <= 0 && from.f64x() >= 0)) {
    _internal_set_f64x(from._internal_f64x());
  }
  if (!(from.f64y() <= 0 && from.f64y() >= 0)) {
    _internal_set_f64y(from._internal_f64y());
  }
  if (!(from.f64z() <= 0 && from.f64z() >= 0)) {
    _internal_set_f64z(from._internal_f64z());
  }
}

void XYZ64_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.meta.XYZ64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XYZ64_t::CopyFrom(const XYZ64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.meta.XYZ64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYZ64_t::IsInitialized() const {
  return true;
}

void XYZ64_t::InternalSwap(XYZ64_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYZ64_t, f64z_)
      + sizeof(XYZ64_t::f64z_)
      - PROTOBUF_FIELD_OFFSET(XYZ64_t, f64x_)>(
          reinterpret_cast<char*>(&f64x_),
          reinterpret_cast<char*>(&other->f64x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYZ64_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class XYZ32_t::_Internal {
 public:
};

XYZ32_t::XYZ32_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.meta.XYZ32_t)
}
XYZ32_t::XYZ32_t(const XYZ32_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f32x_, &from.f32x_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32z_) -
    reinterpret_cast<char*>(&f32x_)) + sizeof(f32z_));
  // @@protoc_insertion_point(copy_constructor:prdb.meta.XYZ32_t)
}

void XYZ32_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f32x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32z_) -
    reinterpret_cast<char*>(&f32x_)) + sizeof(f32z_));
}

XYZ32_t::~XYZ32_t() {
  // @@protoc_insertion_point(destructor:prdb.meta.XYZ32_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void XYZ32_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void XYZ32_t::ArenaDtor(void* object) {
  XYZ32_t* _this = reinterpret_cast< XYZ32_t* >(object);
  (void)_this;
}
void XYZ32_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYZ32_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XYZ32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.meta.XYZ32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f32x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32z_) -
      reinterpret_cast<char*>(&f32x_)) + sizeof(f32z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYZ32_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float f32X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          f32x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XYZ32_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.meta.XYZ32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f32X = 1;
  if (!(this->f32x() <= 0 && this->f32x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f32x(), target);
  }

  // float f32Y = 2;
  if (!(this->f32y() <= 0 && this->f32y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32y(), target);
  }

  // float f32Z = 3;
  if (!(this->f32z() <= 0 && this->f32z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.meta.XYZ32_t)
  return target;
}

size_t XYZ32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.meta.XYZ32_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float f32X = 1;
  if (!(this->f32x() <= 0 && this->f32x() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32Y = 2;
  if (!(this->f32y() <= 0 && this->f32y() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32Z = 3;
  if (!(this->f32z() <= 0 && this->f32z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void XYZ32_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.meta.XYZ32_t)
  GOOGLE_DCHECK_NE(&from, this);
  const XYZ32_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<XYZ32_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.meta.XYZ32_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.meta.XYZ32_t)
    MergeFrom(*source);
  }
}

void XYZ32_t::MergeFrom(const XYZ32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.meta.XYZ32_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.f32x() <= 0 && from.f32x() >= 0)) {
    _internal_set_f32x(from._internal_f32x());
  }
  if (!(from.f32y() <= 0 && from.f32y() >= 0)) {
    _internal_set_f32y(from._internal_f32y());
  }
  if (!(from.f32z() <= 0 && from.f32z() >= 0)) {
    _internal_set_f32z(from._internal_f32z());
  }
}

void XYZ32_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.meta.XYZ32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void XYZ32_t::CopyFrom(const XYZ32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.meta.XYZ32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYZ32_t::IsInitialized() const {
  return true;
}

void XYZ32_t::InternalSwap(XYZ32_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYZ32_t, f32z_)
      + sizeof(XYZ32_t::f32z_)
      - PROTOBUF_FIELD_OFFSET(XYZ32_t, f32x_)>(
          reinterpret_cast<char*>(&f32x_),
          reinterpret_cast<char*>(&other->f32x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYZ32_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Orientation32_t::_Internal {
 public:
};

Orientation32_t::Orientation32_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.meta.Orientation32_t)
}
Orientation32_t::Orientation32_t(const Orientation32_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f32qx_, &from.f32qx_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32qw_) -
    reinterpret_cast<char*>(&f32qx_)) + sizeof(f32qw_));
  // @@protoc_insertion_point(copy_constructor:prdb.meta.Orientation32_t)
}

void Orientation32_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f32qx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32qw_) -
    reinterpret_cast<char*>(&f32qx_)) + sizeof(f32qw_));
}

Orientation32_t::~Orientation32_t() {
  // @@protoc_insertion_point(destructor:prdb.meta.Orientation32_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Orientation32_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Orientation32_t::ArenaDtor(void* object) {
  Orientation32_t* _this = reinterpret_cast< Orientation32_t* >(object);
  (void)_this;
}
void Orientation32_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation32_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.meta.Orientation32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f32qx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32qw_) -
      reinterpret_cast<char*>(&f32qx_)) + sizeof(f32qw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation32_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float f32qX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          f32qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qW = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation32_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.meta.Orientation32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float f32qX = 1;
  if (!(this->f32qx() <= 0 && this->f32qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_f32qx(), target);
  }

  // float f32qY = 2;
  if (!(this->f32qy() <= 0 && this->f32qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32qy(), target);
  }

  // float f32qZ = 3;
  if (!(this->f32qz() <= 0 && this->f32qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32qz(), target);
  }

  // float f32qW = 4;
  if (!(this->f32qw() <= 0 && this->f32qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32qw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.meta.Orientation32_t)
  return target;
}

size_t Orientation32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.meta.Orientation32_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float f32qX = 1;
  if (!(this->f32qx() <= 0 && this->f32qx() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qY = 2;
  if (!(this->f32qy() <= 0 && this->f32qy() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qZ = 3;
  if (!(this->f32qz() <= 0 && this->f32qz() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qW = 4;
  if (!(this->f32qw() <= 0 && this->f32qw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Orientation32_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.meta.Orientation32_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation32_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Orientation32_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.meta.Orientation32_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.meta.Orientation32_t)
    MergeFrom(*source);
  }
}

void Orientation32_t::MergeFrom(const Orientation32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.meta.Orientation32_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.f32qx() <= 0 && from.f32qx() >= 0)) {
    _internal_set_f32qx(from._internal_f32qx());
  }
  if (!(from.f32qy() <= 0 && from.f32qy() >= 0)) {
    _internal_set_f32qy(from._internal_f32qy());
  }
  if (!(from.f32qz() <= 0 && from.f32qz() >= 0)) {
    _internal_set_f32qz(from._internal_f32qz());
  }
  if (!(from.f32qw() <= 0 && from.f32qw() >= 0)) {
    _internal_set_f32qw(from._internal_f32qw());
  }
}

void Orientation32_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.meta.Orientation32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation32_t::CopyFrom(const Orientation32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.meta.Orientation32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation32_t::IsInitialized() const {
  return true;
}

void Orientation32_t::InternalSwap(Orientation32_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation32_t, f32qw_)
      + sizeof(Orientation32_t::f32qw_)
      - PROTOBUF_FIELD_OFFSET(Orientation32_t, f32qx_)>(
          reinterpret_cast<char*>(&f32qx_),
          reinterpret_cast<char*>(&other->f32qx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation32_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UVPoint_t::_Internal {
 public:
};

UVPoint_t::UVPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.meta.UVPoint_t)
}
UVPoint_t::UVPoint_t(const UVPoint_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&un32u_, &from.un32u_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32v_) -
    reinterpret_cast<char*>(&un32u_)) + sizeof(f32v_));
  // @@protoc_insertion_point(copy_constructor:prdb.meta.UVPoint_t)
}

void UVPoint_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&un32u_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32v_) -
    reinterpret_cast<char*>(&un32u_)) + sizeof(f32v_));
}

UVPoint_t::~UVPoint_t() {
  // @@protoc_insertion_point(destructor:prdb.meta.UVPoint_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UVPoint_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UVPoint_t::ArenaDtor(void* object) {
  UVPoint_t* _this = reinterpret_cast< UVPoint_t* >(object);
  (void)_this;
}
void UVPoint_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UVPoint_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UVPoint_t::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.meta.UVPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&un32u_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32v_) -
      reinterpret_cast<char*>(&un32u_)) + sizeof(f32v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UVPoint_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 un32U = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          un32u_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 un32V = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          un32v_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32U = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32V = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UVPoint_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.meta.UVPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 un32U = 1;
  if (this->un32u() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_un32u(), target);
  }

  // uint32 un32V = 2;
  if (this->un32v() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_un32v(), target);
  }

  // float f32U = 3;
  if (!(this->f32u() <= 0 && this->f32u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32u(), target);
  }

  // float f32V = 4;
  if (!(this->f32v() <= 0 && this->f32v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32v(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.meta.UVPoint_t)
  return target;
}

size_t UVPoint_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.meta.UVPoint_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 un32U = 1;
  if (this->un32u() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_un32u());
  }

  // uint32 un32V = 2;
  if (this->un32v() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_un32v());
  }

  // float f32U = 3;
  if (!(this->f32u() <= 0 && this->f32u() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32V = 4;
  if (!(this->f32v() <= 0 && this->f32v() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UVPoint_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.meta.UVPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  const UVPoint_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UVPoint_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.meta.UVPoint_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.meta.UVPoint_t)
    MergeFrom(*source);
  }
}

void UVPoint_t::MergeFrom(const UVPoint_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.meta.UVPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.un32u() != 0) {
    _internal_set_un32u(from._internal_un32u());
  }
  if (from.un32v() != 0) {
    _internal_set_un32v(from._internal_un32v());
  }
  if (!(from.f32u() <= 0 && from.f32u() >= 0)) {
    _internal_set_f32u(from._internal_f32u());
  }
  if (!(from.f32v() <= 0 && from.f32v() >= 0)) {
    _internal_set_f32v(from._internal_f32v());
  }
}

void UVPoint_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.meta.UVPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UVPoint_t::CopyFrom(const UVPoint_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.meta.UVPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UVPoint_t::IsInitialized() const {
  return true;
}

void UVPoint_t::InternalSwap(UVPoint_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UVPoint_t, f32v_)
      + sizeof(UVPoint_t::f32v_)
      - PROTOBUF_FIELD_OFFSET(UVPoint_t, un32u_)>(
          reinterpret_cast<char*>(&un32u_),
          reinterpret_cast<char*>(&other->un32u_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UVPoint_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Meta_t::_Internal {
 public:
  static const ::prdb::meta::XYZ64_t& stavglocation(const Meta_t* msg);
  static const ::prdb::meta::Orientation32_t& storientation(const Meta_t* msg);
  static const ::prdb::meta::XYZ32_t& stdirectionvector(const Meta_t* msg);
};

const ::prdb::meta::XYZ64_t&
Meta_t::_Internal::stavglocation(const Meta_t* msg) {
  return *msg->stavglocation_;
}
const ::prdb::meta::Orientation32_t&
Meta_t::_Internal::storientation(const Meta_t* msg) {
  return *msg->storientation_;
}
const ::prdb::meta::XYZ32_t&
Meta_t::_Internal::stdirectionvector(const Meta_t* msg) {
  return *msg->stdirectionvector_;
}
Meta_t::Meta_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stlocationset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.meta.Meta_t)
}
Meta_t::Meta_t(const Meta_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stlocationset_(from.stlocationset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stavglocation()) {
    stavglocation_ = new ::prdb::meta::XYZ64_t(*from.stavglocation_);
  } else {
    stavglocation_ = nullptr;
  }
  if (from._internal_has_storientation()) {
    storientation_ = new ::prdb::meta::Orientation32_t(*from.storientation_);
  } else {
    storientation_ = nullptr;
  }
  if (from._internal_has_stdirectionvector()) {
    stdirectionvector_ = new ::prdb::meta::XYZ32_t(*from.stdirectionvector_);
  } else {
    stdirectionvector_ = nullptr;
  }
  ::memcpy(&u64keyframeindex_, &from.u64keyframeindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&u64timestamp_) -
    reinterpret_cast<char*>(&u64keyframeindex_)) + sizeof(u64timestamp_));
  // @@protoc_insertion_point(copy_constructor:prdb.meta.Meta_t)
}

void Meta_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stavglocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u64timestamp_) -
    reinterpret_cast<char*>(&stavglocation_)) + sizeof(u64timestamp_));
}

Meta_t::~Meta_t() {
  // @@protoc_insertion_point(destructor:prdb.meta.Meta_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Meta_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stavglocation_;
  if (this != internal_default_instance()) delete storientation_;
  if (this != internal_default_instance()) delete stdirectionvector_;
}

void Meta_t::ArenaDtor(void* object) {
  Meta_t* _this = reinterpret_cast< Meta_t* >(object);
  (void)_this;
}
void Meta_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Meta_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Meta_t::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.meta.Meta_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stlocationset_.Clear();
  if (GetArena() == nullptr && stavglocation_ != nullptr) {
    delete stavglocation_;
  }
  stavglocation_ = nullptr;
  if (GetArena() == nullptr && storientation_ != nullptr) {
    delete storientation_;
  }
  storientation_ = nullptr;
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
  ::memset(&u64keyframeindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u64timestamp_) -
      reinterpret_cast<char*>(&u64keyframeindex_)) + sizeof(u64timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Meta_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64KeyFrameIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64keyframeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 u64Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          u64timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ64_t stAvgLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stavglocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.Orientation32_t stOrientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_storientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ32_t stDirectionVector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdirectionvector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .prdb.meta.XYZ64_t stLocationSet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stlocationset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Meta_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.meta.Meta_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64KeyFrameIndex = 1;
  if (this->u64keyframeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64keyframeindex(), target);
  }

  // uint64 u64Timestamp = 2;
  if (this->u64timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_u64timestamp(), target);
  }

  // .prdb.meta.XYZ64_t stAvgLocation = 3;
  if (this->has_stavglocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stavglocation(this), target, stream);
  }

  // .prdb.meta.Orientation32_t stOrientation = 4;
  if (this->has_storientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::storientation(this), target, stream);
  }

  // .prdb.meta.XYZ32_t stDirectionVector = 5;
  if (this->has_stdirectionvector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stdirectionvector(this), target, stream);
  }

  // repeated .prdb.meta.XYZ64_t stLocationSet = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stlocationset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stlocationset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.meta.Meta_t)
  return target;
}

size_t Meta_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.meta.Meta_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prdb.meta.XYZ64_t stLocationSet = 6;
  total_size += 1UL * this->_internal_stlocationset_size();
  for (const auto& msg : this->stlocationset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .prdb.meta.XYZ64_t stAvgLocation = 3;
  if (this->has_stavglocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stavglocation_);
  }

  // .prdb.meta.Orientation32_t stOrientation = 4;
  if (this->has_storientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storientation_);
  }

  // .prdb.meta.XYZ32_t stDirectionVector = 5;
  if (this->has_stdirectionvector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdirectionvector_);
  }

  // uint64 u64KeyFrameIndex = 1;
  if (this->u64keyframeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64keyframeindex());
  }

  // uint64 u64Timestamp = 2;
  if (this->u64timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Meta_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.meta.Meta_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Meta_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Meta_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.meta.Meta_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.meta.Meta_t)
    MergeFrom(*source);
  }
}

void Meta_t::MergeFrom(const Meta_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.meta.Meta_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stlocationset_.MergeFrom(from.stlocationset_);
  if (from.has_stavglocation()) {
    _internal_mutable_stavglocation()->::prdb::meta::XYZ64_t::MergeFrom(from._internal_stavglocation());
  }
  if (from.has_storientation()) {
    _internal_mutable_storientation()->::prdb::meta::Orientation32_t::MergeFrom(from._internal_storientation());
  }
  if (from.has_stdirectionvector()) {
    _internal_mutable_stdirectionvector()->::prdb::meta::XYZ32_t::MergeFrom(from._internal_stdirectionvector());
  }
  if (from.u64keyframeindex() != 0) {
    _internal_set_u64keyframeindex(from._internal_u64keyframeindex());
  }
  if (from.u64timestamp() != 0) {
    _internal_set_u64timestamp(from._internal_u64timestamp());
  }
}

void Meta_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.meta.Meta_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Meta_t::CopyFrom(const Meta_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.meta.Meta_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Meta_t::IsInitialized() const {
  return true;
}

void Meta_t::InternalSwap(Meta_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stlocationset_.InternalSwap(&other->stlocationset_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Meta_t, u64timestamp_)
      + sizeof(Meta_t::u64timestamp_)
      - PROTOBUF_FIELD_OFFSET(Meta_t, stavglocation_)>(
          reinterpret_cast<char*>(&stavglocation_),
          reinterpret_cast<char*>(&other->stavglocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Meta_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace meta
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prdb::meta::XYZ64_t* Arena::CreateMaybeMessage< ::prdb::meta::XYZ64_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::meta::XYZ64_t >(arena);
}
template<> PROTOBUF_NOINLINE ::prdb::meta::XYZ32_t* Arena::CreateMaybeMessage< ::prdb::meta::XYZ32_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::meta::XYZ32_t >(arena);
}
template<> PROTOBUF_NOINLINE ::prdb::meta::Orientation32_t* Arena::CreateMaybeMessage< ::prdb::meta::Orientation32_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::meta::Orientation32_t >(arena);
}
template<> PROTOBUF_NOINLINE ::prdb::meta::UVPoint_t* Arena::CreateMaybeMessage< ::prdb::meta::UVPoint_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::meta::UVPoint_t >(arena);
}
template<> PROTOBUF_NOINLINE ::prdb::meta::Meta_t* Arena::CreateMaybeMessage< ::prdb::meta::Meta_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::meta::Meta_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
