// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lfsppdb_return_keyframeindex.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lfsppdb_5freturn_5fkeyframeindex_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lfsppdb_5freturn_5fkeyframeindex_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "prdb_meta.pb.h"
#include "lfsppdb.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lfsppdb_5freturn_5fkeyframeindex_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lfsppdb_5freturn_5fkeyframeindex_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_metadata_getter(int index);
namespace lfsppdb {
namespace keyframeindex {
class Data_t;
struct Data_tDefaultTypeInternal;
extern Data_tDefaultTypeInternal _Data_t_default_instance_;
class KeyFrameIndexR;
struct KeyFrameIndexRDefaultTypeInternal;
extern KeyFrameIndexRDefaultTypeInternal _KeyFrameIndexR_default_instance_;
}  // namespace keyframeindex
}  // namespace lfsppdb
PROTOBUF_NAMESPACE_OPEN
template<> ::lfsppdb::keyframeindex::Data_t* Arena::CreateMaybeMessage<::lfsppdb::keyframeindex::Data_t>(Arena*);
template<> ::lfsppdb::keyframeindex::KeyFrameIndexR* Arena::CreateMaybeMessage<::lfsppdb::keyframeindex::KeyFrameIndexR>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lfsppdb {
namespace keyframeindex {

// ===================================================================

class Data_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.keyframeindex.Data_t) */ {
 public:
  inline Data_t() : Data_t(nullptr) {}
  virtual ~Data_t();
  explicit constexpr Data_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data_t(const Data_t& from);
  Data_t(Data_t&& from) noexcept
    : Data_t() {
    *this = ::std::move(from);
  }

  inline Data_t& operator=(const Data_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data_t& operator=(Data_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data_t* internal_default_instance() {
    return reinterpret_cast<const Data_t*>(
               &_Data_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Data_t& a, Data_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Data_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data_t* New() const final {
    return CreateMaybeMessage<Data_t>(nullptr);
  }

  Data_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data_t& from);
  void MergeFrom(const Data_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.keyframeindex.Data_t";
  }
  protected:
  explicit Data_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstKeyPointFieldNumber = 3,
    kStReferenceLocationFieldNumber = 2,
    kU64QueriedKeyFrameIndexFieldNumber = 1,
  };
  // repeated .lfsppdb.KeyPoint_t arstKeyPoint = 3;
  int arstkeypoint_size() const;
  private:
  int _internal_arstkeypoint_size() const;
  public:
  void clear_arstkeypoint();
  ::lfsppdb::KeyPoint_t* mutable_arstkeypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >*
      mutable_arstkeypoint();
  private:
  const ::lfsppdb::KeyPoint_t& _internal_arstkeypoint(int index) const;
  ::lfsppdb::KeyPoint_t* _internal_add_arstkeypoint();
  public:
  const ::lfsppdb::KeyPoint_t& arstkeypoint(int index) const;
  ::lfsppdb::KeyPoint_t* add_arstkeypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >&
      arstkeypoint() const;

  // .prdb.meta.XYZ64_t stReferenceLocation = 2;
  bool has_streferencelocation() const;
  private:
  bool _internal_has_streferencelocation() const;
  public:
  void clear_streferencelocation();
  const ::prdb::meta::XYZ64_t& streferencelocation() const;
  ::prdb::meta::XYZ64_t* release_streferencelocation();
  ::prdb::meta::XYZ64_t* mutable_streferencelocation();
  void set_allocated_streferencelocation(::prdb::meta::XYZ64_t* streferencelocation);
  private:
  const ::prdb::meta::XYZ64_t& _internal_streferencelocation() const;
  ::prdb::meta::XYZ64_t* _internal_mutable_streferencelocation();
  public:
  void unsafe_arena_set_allocated_streferencelocation(
      ::prdb::meta::XYZ64_t* streferencelocation);
  ::prdb::meta::XYZ64_t* unsafe_arena_release_streferencelocation();

  // uint64 u64QueriedKeyFrameIndex = 1;
  void clear_u64queriedkeyframeindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64queriedkeyframeindex() const;
  void set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64queriedkeyframeindex() const;
  void _internal_set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lfsppdb.keyframeindex.Data_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t > arstkeypoint_;
  ::prdb::meta::XYZ64_t* streferencelocation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64queriedkeyframeindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_5freturn_5fkeyframeindex_2eproto;
};
// -------------------------------------------------------------------

class KeyFrameIndexR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.keyframeindex.KeyFrameIndexR) */ {
 public:
  inline KeyFrameIndexR() : KeyFrameIndexR(nullptr) {}
  virtual ~KeyFrameIndexR();
  explicit constexpr KeyFrameIndexR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyFrameIndexR(const KeyFrameIndexR& from);
  KeyFrameIndexR(KeyFrameIndexR&& from) noexcept
    : KeyFrameIndexR() {
    *this = ::std::move(from);
  }

  inline KeyFrameIndexR& operator=(const KeyFrameIndexR& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyFrameIndexR& operator=(KeyFrameIndexR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyFrameIndexR& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyFrameIndexR* internal_default_instance() {
    return reinterpret_cast<const KeyFrameIndexR*>(
               &_KeyFrameIndexR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyFrameIndexR& a, KeyFrameIndexR& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyFrameIndexR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyFrameIndexR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyFrameIndexR* New() const final {
    return CreateMaybeMessage<KeyFrameIndexR>(nullptr);
  }

  KeyFrameIndexR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyFrameIndexR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyFrameIndexR& from);
  void MergeFrom(const KeyFrameIndexR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyFrameIndexR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.keyframeindex.KeyFrameIndexR";
  }
  protected:
  explicit KeyFrameIndexR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStDataFieldNumber = 1,
  };
  // repeated .lfsppdb.keyframeindex.Data_t stData = 1;
  int stdata_size() const;
  private:
  int _internal_stdata_size() const;
  public:
  void clear_stdata();
  ::lfsppdb::keyframeindex::Data_t* mutable_stdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::keyframeindex::Data_t >*
      mutable_stdata();
  private:
  const ::lfsppdb::keyframeindex::Data_t& _internal_stdata(int index) const;
  ::lfsppdb::keyframeindex::Data_t* _internal_add_stdata();
  public:
  const ::lfsppdb::keyframeindex::Data_t& stdata(int index) const;
  ::lfsppdb::keyframeindex::Data_t* add_stdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::keyframeindex::Data_t >&
      stdata() const;

  // @@protoc_insertion_point(class_scope:lfsppdb.keyframeindex.KeyFrameIndexR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::keyframeindex::Data_t > stdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_5freturn_5fkeyframeindex_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Data_t

// uint64 u64QueriedKeyFrameIndex = 1;
inline void Data_t::clear_u64queriedkeyframeindex() {
  u64queriedkeyframeindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Data_t::_internal_u64queriedkeyframeindex() const {
  return u64queriedkeyframeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Data_t::u64queriedkeyframeindex() const {
  // @@protoc_insertion_point(field_get:lfsppdb.keyframeindex.Data_t.u64QueriedKeyFrameIndex)
  return _internal_u64queriedkeyframeindex();
}
inline void Data_t::_internal_set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64queriedkeyframeindex_ = value;
}
inline void Data_t::set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64queriedkeyframeindex(value);
  // @@protoc_insertion_point(field_set:lfsppdb.keyframeindex.Data_t.u64QueriedKeyFrameIndex)
}

// .prdb.meta.XYZ64_t stReferenceLocation = 2;
inline bool Data_t::_internal_has_streferencelocation() const {
  return this != internal_default_instance() && streferencelocation_ != nullptr;
}
inline bool Data_t::has_streferencelocation() const {
  return _internal_has_streferencelocation();
}
inline const ::prdb::meta::XYZ64_t& Data_t::_internal_streferencelocation() const {
  const ::prdb::meta::XYZ64_t* p = streferencelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ64_t&>(
      ::prdb::meta::_XYZ64_t_default_instance_);
}
inline const ::prdb::meta::XYZ64_t& Data_t::streferencelocation() const {
  // @@protoc_insertion_point(field_get:lfsppdb.keyframeindex.Data_t.stReferenceLocation)
  return _internal_streferencelocation();
}
inline void Data_t::unsafe_arena_set_allocated_streferencelocation(
    ::prdb::meta::XYZ64_t* streferencelocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streferencelocation_);
  }
  streferencelocation_ = streferencelocation;
  if (streferencelocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.keyframeindex.Data_t.stReferenceLocation)
}
inline ::prdb::meta::XYZ64_t* Data_t::release_streferencelocation() {
  
  ::prdb::meta::XYZ64_t* temp = streferencelocation_;
  streferencelocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ64_t* Data_t::unsafe_arena_release_streferencelocation() {
  // @@protoc_insertion_point(field_release:lfsppdb.keyframeindex.Data_t.stReferenceLocation)
  
  ::prdb::meta::XYZ64_t* temp = streferencelocation_;
  streferencelocation_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ64_t* Data_t::_internal_mutable_streferencelocation() {
  
  if (streferencelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ64_t>(GetArena());
    streferencelocation_ = p;
  }
  return streferencelocation_;
}
inline ::prdb::meta::XYZ64_t* Data_t::mutable_streferencelocation() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.keyframeindex.Data_t.stReferenceLocation)
  return _internal_mutable_streferencelocation();
}
inline void Data_t::set_allocated_streferencelocation(::prdb::meta::XYZ64_t* streferencelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streferencelocation_);
  }
  if (streferencelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streferencelocation)->GetArena();
    if (message_arena != submessage_arena) {
      streferencelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streferencelocation, submessage_arena);
    }
    
  } else {
    
  }
  streferencelocation_ = streferencelocation;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.keyframeindex.Data_t.stReferenceLocation)
}

// repeated .lfsppdb.KeyPoint_t arstKeyPoint = 3;
inline int Data_t::_internal_arstkeypoint_size() const {
  return arstkeypoint_.size();
}
inline int Data_t::arstkeypoint_size() const {
  return _internal_arstkeypoint_size();
}
inline ::lfsppdb::KeyPoint_t* Data_t::mutable_arstkeypoint(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.keyframeindex.Data_t.arstKeyPoint)
  return arstkeypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >*
Data_t::mutable_arstkeypoint() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.keyframeindex.Data_t.arstKeyPoint)
  return &arstkeypoint_;
}
inline const ::lfsppdb::KeyPoint_t& Data_t::_internal_arstkeypoint(int index) const {
  return arstkeypoint_.Get(index);
}
inline const ::lfsppdb::KeyPoint_t& Data_t::arstkeypoint(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.keyframeindex.Data_t.arstKeyPoint)
  return _internal_arstkeypoint(index);
}
inline ::lfsppdb::KeyPoint_t* Data_t::_internal_add_arstkeypoint() {
  return arstkeypoint_.Add();
}
inline ::lfsppdb::KeyPoint_t* Data_t::add_arstkeypoint() {
  // @@protoc_insertion_point(field_add:lfsppdb.keyframeindex.Data_t.arstKeyPoint)
  return _internal_add_arstkeypoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >&
Data_t::arstkeypoint() const {
  // @@protoc_insertion_point(field_list:lfsppdb.keyframeindex.Data_t.arstKeyPoint)
  return arstkeypoint_;
}

// -------------------------------------------------------------------

// KeyFrameIndexR

// repeated .lfsppdb.keyframeindex.Data_t stData = 1;
inline int KeyFrameIndexR::_internal_stdata_size() const {
  return stdata_.size();
}
inline int KeyFrameIndexR::stdata_size() const {
  return _internal_stdata_size();
}
inline void KeyFrameIndexR::clear_stdata() {
  stdata_.Clear();
}
inline ::lfsppdb::keyframeindex::Data_t* KeyFrameIndexR::mutable_stdata(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.keyframeindex.KeyFrameIndexR.stData)
  return stdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::keyframeindex::Data_t >*
KeyFrameIndexR::mutable_stdata() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.keyframeindex.KeyFrameIndexR.stData)
  return &stdata_;
}
inline const ::lfsppdb::keyframeindex::Data_t& KeyFrameIndexR::_internal_stdata(int index) const {
  return stdata_.Get(index);
}
inline const ::lfsppdb::keyframeindex::Data_t& KeyFrameIndexR::stdata(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.keyframeindex.KeyFrameIndexR.stData)
  return _internal_stdata(index);
}
inline ::lfsppdb::keyframeindex::Data_t* KeyFrameIndexR::_internal_add_stdata() {
  return stdata_.Add();
}
inline ::lfsppdb::keyframeindex::Data_t* KeyFrameIndexR::add_stdata() {
  // @@protoc_insertion_point(field_add:lfsppdb.keyframeindex.KeyFrameIndexR.stData)
  return _internal_add_stdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::keyframeindex::Data_t >&
KeyFrameIndexR::stdata() const {
  // @@protoc_insertion_point(field_list:lfsppdb.keyframeindex.KeyFrameIndexR.stData)
  return stdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace keyframeindex
}  // namespace lfsppdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lfsppdb_5freturn_5fkeyframeindex_2eproto
