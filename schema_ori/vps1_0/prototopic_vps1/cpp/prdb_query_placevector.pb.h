// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_query_placevector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prdb_5fquery_5fplacevector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prdb_5fquery_5fplacevector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "prdb_meta.pb.h"
#include "prdb_netvlad.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prdb_5fquery_5fplacevector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prdb_5fquery_5fplacevector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5fquery_5fplacevector_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_prdb_5fquery_5fplacevector_2eproto_metadata_getter(int index);
namespace prdb {
namespace placevector {
class PlaceVectorQ;
struct PlaceVectorQDefaultTypeInternal;
extern PlaceVectorQDefaultTypeInternal _PlaceVectorQ_default_instance_;
}  // namespace placevector
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> ::prdb::placevector::PlaceVectorQ* Arena::CreateMaybeMessage<::prdb::placevector::PlaceVectorQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prdb {
namespace placevector {

// ===================================================================

class PlaceVectorQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prdb.placevector.PlaceVectorQ) */ {
 public:
  inline PlaceVectorQ() : PlaceVectorQ(nullptr) {}
  virtual ~PlaceVectorQ();
  explicit constexpr PlaceVectorQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVectorQ(const PlaceVectorQ& from);
  PlaceVectorQ(PlaceVectorQ&& from) noexcept
    : PlaceVectorQ() {
    *this = ::std::move(from);
  }

  inline PlaceVectorQ& operator=(const PlaceVectorQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVectorQ& operator=(PlaceVectorQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVectorQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceVectorQ* internal_default_instance() {
    return reinterpret_cast<const PlaceVectorQ*>(
               &_PlaceVectorQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlaceVectorQ& a, PlaceVectorQ& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVectorQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVectorQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVectorQ* New() const final {
    return CreateMaybeMessage<PlaceVectorQ>(nullptr);
  }

  PlaceVectorQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVectorQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVectorQ& from);
  void MergeFrom(const PlaceVectorQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVectorQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prdb.placevector.PlaceVectorQ";
  }
  protected:
  explicit PlaceVectorQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prdb_5fquery_5fplacevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStNetVLADVectorFieldNumber = 1,
    kStSearchLocationFieldNumber = 5,
    kStDirectionVectorFieldNumber = 7,
    kU8NearestMaxKFieldNumber = 2,
    kU8DistanceTypeFieldNumber = 3,
    kF32DistanceThresholdFieldNumber = 4,
    kF32SearchRadiusFieldNumber = 6,
    kF32DirectionRangeFieldNumber = 8,
  };
  // .prdb.netvlad.NetVLAD_t stNetVLADVector = 1;
  bool has_stnetvladvector() const;
  private:
  bool _internal_has_stnetvladvector() const;
  public:
  void clear_stnetvladvector();
  const ::prdb::netvlad::NetVLAD_t& stnetvladvector() const;
  ::prdb::netvlad::NetVLAD_t* release_stnetvladvector();
  ::prdb::netvlad::NetVLAD_t* mutable_stnetvladvector();
  void set_allocated_stnetvladvector(::prdb::netvlad::NetVLAD_t* stnetvladvector);
  private:
  const ::prdb::netvlad::NetVLAD_t& _internal_stnetvladvector() const;
  ::prdb::netvlad::NetVLAD_t* _internal_mutable_stnetvladvector();
  public:
  void unsafe_arena_set_allocated_stnetvladvector(
      ::prdb::netvlad::NetVLAD_t* stnetvladvector);
  ::prdb::netvlad::NetVLAD_t* unsafe_arena_release_stnetvladvector();

  // .prdb.meta.XYZ64_t stSearchLocation = 5;
  bool has_stsearchlocation() const;
  private:
  bool _internal_has_stsearchlocation() const;
  public:
  void clear_stsearchlocation();
  const ::prdb::meta::XYZ64_t& stsearchlocation() const;
  ::prdb::meta::XYZ64_t* release_stsearchlocation();
  ::prdb::meta::XYZ64_t* mutable_stsearchlocation();
  void set_allocated_stsearchlocation(::prdb::meta::XYZ64_t* stsearchlocation);
  private:
  const ::prdb::meta::XYZ64_t& _internal_stsearchlocation() const;
  ::prdb::meta::XYZ64_t* _internal_mutable_stsearchlocation();
  public:
  void unsafe_arena_set_allocated_stsearchlocation(
      ::prdb::meta::XYZ64_t* stsearchlocation);
  ::prdb::meta::XYZ64_t* unsafe_arena_release_stsearchlocation();

  // .prdb.meta.XYZ32_t stDirectionVector = 7;
  bool has_stdirectionvector() const;
  private:
  bool _internal_has_stdirectionvector() const;
  public:
  void clear_stdirectionvector();
  const ::prdb::meta::XYZ32_t& stdirectionvector() const;
  ::prdb::meta::XYZ32_t* release_stdirectionvector();
  ::prdb::meta::XYZ32_t* mutable_stdirectionvector();
  void set_allocated_stdirectionvector(::prdb::meta::XYZ32_t* stdirectionvector);
  private:
  const ::prdb::meta::XYZ32_t& _internal_stdirectionvector() const;
  ::prdb::meta::XYZ32_t* _internal_mutable_stdirectionvector();
  public:
  void unsafe_arena_set_allocated_stdirectionvector(
      ::prdb::meta::XYZ32_t* stdirectionvector);
  ::prdb::meta::XYZ32_t* unsafe_arena_release_stdirectionvector();

  // uint32 u8NearestMaxK = 2;
  void clear_u8nearestmaxk();
  ::PROTOBUF_NAMESPACE_ID::uint32 u8nearestmaxk() const;
  void set_u8nearestmaxk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u8nearestmaxk() const;
  void _internal_set_u8nearestmaxk(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 u8DistanceType = 3;
  void clear_u8distancetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 u8distancetype() const;
  void set_u8distancetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u8distancetype() const;
  void _internal_set_u8distancetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float f32DistanceThreshold = 4;
  void clear_f32distancethreshold();
  float f32distancethreshold() const;
  void set_f32distancethreshold(float value);
  private:
  float _internal_f32distancethreshold() const;
  void _internal_set_f32distancethreshold(float value);
  public:

  // float f32SearchRadius = 6;
  void clear_f32searchradius();
  float f32searchradius() const;
  void set_f32searchradius(float value);
  private:
  float _internal_f32searchradius() const;
  void _internal_set_f32searchradius(float value);
  public:

  // float f32DirectionRange = 8;
  void clear_f32directionrange();
  float f32directionrange() const;
  void set_f32directionrange(float value);
  private:
  float _internal_f32directionrange() const;
  void _internal_set_f32directionrange(float value);
  public:

  // @@protoc_insertion_point(class_scope:prdb.placevector.PlaceVectorQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::prdb::netvlad::NetVLAD_t* stnetvladvector_;
  ::prdb::meta::XYZ64_t* stsearchlocation_;
  ::prdb::meta::XYZ32_t* stdirectionvector_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u8nearestmaxk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u8distancetype_;
  float f32distancethreshold_;
  float f32searchradius_;
  float f32directionrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prdb_5fquery_5fplacevector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaceVectorQ

// .prdb.netvlad.NetVLAD_t stNetVLADVector = 1;
inline bool PlaceVectorQ::_internal_has_stnetvladvector() const {
  return this != internal_default_instance() && stnetvladvector_ != nullptr;
}
inline bool PlaceVectorQ::has_stnetvladvector() const {
  return _internal_has_stnetvladvector();
}
inline const ::prdb::netvlad::NetVLAD_t& PlaceVectorQ::_internal_stnetvladvector() const {
  const ::prdb::netvlad::NetVLAD_t* p = stnetvladvector_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::netvlad::NetVLAD_t&>(
      ::prdb::netvlad::_NetVLAD_t_default_instance_);
}
inline const ::prdb::netvlad::NetVLAD_t& PlaceVectorQ::stnetvladvector() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.stNetVLADVector)
  return _internal_stnetvladvector();
}
inline void PlaceVectorQ::unsafe_arena_set_allocated_stnetvladvector(
    ::prdb::netvlad::NetVLAD_t* stnetvladvector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stnetvladvector_);
  }
  stnetvladvector_ = stnetvladvector;
  if (stnetvladvector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prdb.placevector.PlaceVectorQ.stNetVLADVector)
}
inline ::prdb::netvlad::NetVLAD_t* PlaceVectorQ::release_stnetvladvector() {
  
  ::prdb::netvlad::NetVLAD_t* temp = stnetvladvector_;
  stnetvladvector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::netvlad::NetVLAD_t* PlaceVectorQ::unsafe_arena_release_stnetvladvector() {
  // @@protoc_insertion_point(field_release:prdb.placevector.PlaceVectorQ.stNetVLADVector)
  
  ::prdb::netvlad::NetVLAD_t* temp = stnetvladvector_;
  stnetvladvector_ = nullptr;
  return temp;
}
inline ::prdb::netvlad::NetVLAD_t* PlaceVectorQ::_internal_mutable_stnetvladvector() {
  
  if (stnetvladvector_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::netvlad::NetVLAD_t>(GetArena());
    stnetvladvector_ = p;
  }
  return stnetvladvector_;
}
inline ::prdb::netvlad::NetVLAD_t* PlaceVectorQ::mutable_stnetvladvector() {
  // @@protoc_insertion_point(field_mutable:prdb.placevector.PlaceVectorQ.stNetVLADVector)
  return _internal_mutable_stnetvladvector();
}
inline void PlaceVectorQ::set_allocated_stnetvladvector(::prdb::netvlad::NetVLAD_t* stnetvladvector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stnetvladvector_);
  }
  if (stnetvladvector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stnetvladvector)->GetArena();
    if (message_arena != submessage_arena) {
      stnetvladvector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stnetvladvector, submessage_arena);
    }
    
  } else {
    
  }
  stnetvladvector_ = stnetvladvector;
  // @@protoc_insertion_point(field_set_allocated:prdb.placevector.PlaceVectorQ.stNetVLADVector)
}

// uint32 u8NearestMaxK = 2;
inline void PlaceVectorQ::clear_u8nearestmaxk() {
  u8nearestmaxk_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlaceVectorQ::_internal_u8nearestmaxk() const {
  return u8nearestmaxk_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlaceVectorQ::u8nearestmaxk() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.u8NearestMaxK)
  return _internal_u8nearestmaxk();
}
inline void PlaceVectorQ::_internal_set_u8nearestmaxk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u8nearestmaxk_ = value;
}
inline void PlaceVectorQ::set_u8nearestmaxk(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u8nearestmaxk(value);
  // @@protoc_insertion_point(field_set:prdb.placevector.PlaceVectorQ.u8NearestMaxK)
}

// uint32 u8DistanceType = 3;
inline void PlaceVectorQ::clear_u8distancetype() {
  u8distancetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlaceVectorQ::_internal_u8distancetype() const {
  return u8distancetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PlaceVectorQ::u8distancetype() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.u8DistanceType)
  return _internal_u8distancetype();
}
inline void PlaceVectorQ::_internal_set_u8distancetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u8distancetype_ = value;
}
inline void PlaceVectorQ::set_u8distancetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u8distancetype(value);
  // @@protoc_insertion_point(field_set:prdb.placevector.PlaceVectorQ.u8DistanceType)
}

// float f32DistanceThreshold = 4;
inline void PlaceVectorQ::clear_f32distancethreshold() {
  f32distancethreshold_ = 0;
}
inline float PlaceVectorQ::_internal_f32distancethreshold() const {
  return f32distancethreshold_;
}
inline float PlaceVectorQ::f32distancethreshold() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.f32DistanceThreshold)
  return _internal_f32distancethreshold();
}
inline void PlaceVectorQ::_internal_set_f32distancethreshold(float value) {
  
  f32distancethreshold_ = value;
}
inline void PlaceVectorQ::set_f32distancethreshold(float value) {
  _internal_set_f32distancethreshold(value);
  // @@protoc_insertion_point(field_set:prdb.placevector.PlaceVectorQ.f32DistanceThreshold)
}

// .prdb.meta.XYZ64_t stSearchLocation = 5;
inline bool PlaceVectorQ::_internal_has_stsearchlocation() const {
  return this != internal_default_instance() && stsearchlocation_ != nullptr;
}
inline bool PlaceVectorQ::has_stsearchlocation() const {
  return _internal_has_stsearchlocation();
}
inline const ::prdb::meta::XYZ64_t& PlaceVectorQ::_internal_stsearchlocation() const {
  const ::prdb::meta::XYZ64_t* p = stsearchlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ64_t&>(
      ::prdb::meta::_XYZ64_t_default_instance_);
}
inline const ::prdb::meta::XYZ64_t& PlaceVectorQ::stsearchlocation() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.stSearchLocation)
  return _internal_stsearchlocation();
}
inline void PlaceVectorQ::unsafe_arena_set_allocated_stsearchlocation(
    ::prdb::meta::XYZ64_t* stsearchlocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stsearchlocation_);
  }
  stsearchlocation_ = stsearchlocation;
  if (stsearchlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prdb.placevector.PlaceVectorQ.stSearchLocation)
}
inline ::prdb::meta::XYZ64_t* PlaceVectorQ::release_stsearchlocation() {
  
  ::prdb::meta::XYZ64_t* temp = stsearchlocation_;
  stsearchlocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ64_t* PlaceVectorQ::unsafe_arena_release_stsearchlocation() {
  // @@protoc_insertion_point(field_release:prdb.placevector.PlaceVectorQ.stSearchLocation)
  
  ::prdb::meta::XYZ64_t* temp = stsearchlocation_;
  stsearchlocation_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ64_t* PlaceVectorQ::_internal_mutable_stsearchlocation() {
  
  if (stsearchlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ64_t>(GetArena());
    stsearchlocation_ = p;
  }
  return stsearchlocation_;
}
inline ::prdb::meta::XYZ64_t* PlaceVectorQ::mutable_stsearchlocation() {
  // @@protoc_insertion_point(field_mutable:prdb.placevector.PlaceVectorQ.stSearchLocation)
  return _internal_mutable_stsearchlocation();
}
inline void PlaceVectorQ::set_allocated_stsearchlocation(::prdb::meta::XYZ64_t* stsearchlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stsearchlocation_);
  }
  if (stsearchlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stsearchlocation)->GetArena();
    if (message_arena != submessage_arena) {
      stsearchlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stsearchlocation, submessage_arena);
    }
    
  } else {
    
  }
  stsearchlocation_ = stsearchlocation;
  // @@protoc_insertion_point(field_set_allocated:prdb.placevector.PlaceVectorQ.stSearchLocation)
}

// float f32SearchRadius = 6;
inline void PlaceVectorQ::clear_f32searchradius() {
  f32searchradius_ = 0;
}
inline float PlaceVectorQ::_internal_f32searchradius() const {
  return f32searchradius_;
}
inline float PlaceVectorQ::f32searchradius() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.f32SearchRadius)
  return _internal_f32searchradius();
}
inline void PlaceVectorQ::_internal_set_f32searchradius(float value) {
  
  f32searchradius_ = value;
}
inline void PlaceVectorQ::set_f32searchradius(float value) {
  _internal_set_f32searchradius(value);
  // @@protoc_insertion_point(field_set:prdb.placevector.PlaceVectorQ.f32SearchRadius)
}

// .prdb.meta.XYZ32_t stDirectionVector = 7;
inline bool PlaceVectorQ::_internal_has_stdirectionvector() const {
  return this != internal_default_instance() && stdirectionvector_ != nullptr;
}
inline bool PlaceVectorQ::has_stdirectionvector() const {
  return _internal_has_stdirectionvector();
}
inline const ::prdb::meta::XYZ32_t& PlaceVectorQ::_internal_stdirectionvector() const {
  const ::prdb::meta::XYZ32_t* p = stdirectionvector_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ32_t&>(
      ::prdb::meta::_XYZ32_t_default_instance_);
}
inline const ::prdb::meta::XYZ32_t& PlaceVectorQ::stdirectionvector() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.stDirectionVector)
  return _internal_stdirectionvector();
}
inline void PlaceVectorQ::unsafe_arena_set_allocated_stdirectionvector(
    ::prdb::meta::XYZ32_t* stdirectionvector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector_);
  }
  stdirectionvector_ = stdirectionvector;
  if (stdirectionvector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prdb.placevector.PlaceVectorQ.stDirectionVector)
}
inline ::prdb::meta::XYZ32_t* PlaceVectorQ::release_stdirectionvector() {
  
  ::prdb::meta::XYZ32_t* temp = stdirectionvector_;
  stdirectionvector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ32_t* PlaceVectorQ::unsafe_arena_release_stdirectionvector() {
  // @@protoc_insertion_point(field_release:prdb.placevector.PlaceVectorQ.stDirectionVector)
  
  ::prdb::meta::XYZ32_t* temp = stdirectionvector_;
  stdirectionvector_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ32_t* PlaceVectorQ::_internal_mutable_stdirectionvector() {
  
  if (stdirectionvector_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ32_t>(GetArena());
    stdirectionvector_ = p;
  }
  return stdirectionvector_;
}
inline ::prdb::meta::XYZ32_t* PlaceVectorQ::mutable_stdirectionvector() {
  // @@protoc_insertion_point(field_mutable:prdb.placevector.PlaceVectorQ.stDirectionVector)
  return _internal_mutable_stdirectionvector();
}
inline void PlaceVectorQ::set_allocated_stdirectionvector(::prdb::meta::XYZ32_t* stdirectionvector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector_);
  }
  if (stdirectionvector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector)->GetArena();
    if (message_arena != submessage_arena) {
      stdirectionvector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stdirectionvector, submessage_arena);
    }
    
  } else {
    
  }
  stdirectionvector_ = stdirectionvector;
  // @@protoc_insertion_point(field_set_allocated:prdb.placevector.PlaceVectorQ.stDirectionVector)
}

// float f32DirectionRange = 8;
inline void PlaceVectorQ::clear_f32directionrange() {
  f32directionrange_ = 0;
}
inline float PlaceVectorQ::_internal_f32directionrange() const {
  return f32directionrange_;
}
inline float PlaceVectorQ::f32directionrange() const {
  // @@protoc_insertion_point(field_get:prdb.placevector.PlaceVectorQ.f32DirectionRange)
  return _internal_f32directionrange();
}
inline void PlaceVectorQ::_internal_set_f32directionrange(float value) {
  
  f32directionrange_ = value;
}
inline void PlaceVectorQ::set_f32directionrange(float value) {
  _internal_set_f32directionrange(value);
  // @@protoc_insertion_point(field_set:prdb.placevector.PlaceVectorQ.f32DirectionRange)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace placevector
}  // namespace prdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prdb_5fquery_5fplacevector_2eproto
