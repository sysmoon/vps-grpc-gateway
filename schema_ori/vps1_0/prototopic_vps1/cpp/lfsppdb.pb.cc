// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lfsppdb.proto

#include "lfsppdb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lfsppdb {
constexpr KeyPoint_t::KeyPoint_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arf32descriptor_()
  , _arf32descriptor_cached_byte_size_()
  , stf32keypointworld_(nullptr)
  , stkeypointimage_(nullptr)
  , u8locationidx_(0u){}
struct KeyPoint_tDefaultTypeInternal {
  constexpr KeyPoint_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyPoint_tDefaultTypeInternal() {}
  union {
    KeyPoint_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyPoint_tDefaultTypeInternal _KeyPoint_t_default_instance_;
constexpr LFSPPDBUnit_t::LFSPPDBUnit_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstkeypoints_()
  , stf64reflocation_(nullptr)
  , u64keyframeindex_(PROTOBUF_ULONGLONG(0))
  , u64timestamp_(PROTOBUF_ULONGLONG(0))
  , u16numofkeypointsn_(0u){}
struct LFSPPDBUnit_tDefaultTypeInternal {
  constexpr LFSPPDBUnit_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LFSPPDBUnit_tDefaultTypeInternal() {}
  union {
    LFSPPDBUnit_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LFSPPDBUnit_tDefaultTypeInternal _LFSPPDBUnit_t_default_instance_;
constexpr LFSPPDBSet_t::LFSPPDBSet_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstlfsppdbset_(){}
struct LFSPPDBSet_tDefaultTypeInternal {
  constexpr LFSPPDBSet_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LFSPPDBSet_tDefaultTypeInternal() {}
  union {
    LFSPPDBSet_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LFSPPDBSet_tDefaultTypeInternal _LFSPPDBSet_t_default_instance_;
}  // namespace lfsppdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lfsppdb_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lfsppdb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lfsppdb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lfsppdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::KeyPoint_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::KeyPoint_t, stf32keypointworld_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::KeyPoint_t, stkeypointimage_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::KeyPoint_t, arf32descriptor_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::KeyPoint_t, u8locationidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBUnit_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBUnit_t, u64keyframeindex_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBUnit_t, u64timestamp_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBUnit_t, stf64reflocation_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBUnit_t, u16numofkeypointsn_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBUnit_t, arstkeypoints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBSet_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::LFSPPDBSet_t, arstlfsppdbset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lfsppdb::KeyPoint_t)},
  { 9, -1, sizeof(::lfsppdb::LFSPPDBUnit_t)},
  { 19, -1, sizeof(::lfsppdb::LFSPPDBSet_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::_KeyPoint_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::_LFSPPDBUnit_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::_LFSPPDBSet_t_default_instance_),
};

const char descriptor_table_protodef_lfsppdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rlfsppdb.proto\022\007lfsppdb\032\017prdb_meta.prot"
  "o\"\233\001\n\nKeyPoint_t\022.\n\022stf32KeyPointWorld\030\001"
  " \001(\0132\022.prdb.meta.XYZ32_t\022-\n\017stKeyPointIm"
  "age\030\002 \001(\0132\024.prdb.meta.UVPoint_t\022\027\n\017arf32"
  "Descriptor\030\003 \003(\002\022\025\n\ru8LocationIdx\030\004 \001(\r\""
  "\265\001\n\rLFSPPDBUnit_t\022\030\n\020u64KeyFrameIndex\030\001 "
  "\001(\004\022\024\n\014u64Timestamp\030\002 \001(\004\022,\n\020stf64RefLoc"
  "ation\030\003 \001(\0132\022.prdb.meta.XYZ64_t\022\032\n\022u16Nu"
  "mofKeyPointsN\030\004 \001(\r\022*\n\rarstKeyPoints\030\005 \003"
  "(\0132\023.lfsppdb.KeyPoint_t\">\n\014LFSPPDBSet_t\022"
  ".\n\016arstLFSPPDBSet\030\001 \003(\0132\026.lfsppdb.LFSPPD"
  "BUnit_tB\016\n\014dbms.lfsppdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lfsppdb_2eproto_deps[1] = {
  &::descriptor_table_prdb_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lfsppdb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lfsppdb_2eproto = {
  false, false, 471, descriptor_table_protodef_lfsppdb_2eproto, "lfsppdb.proto", 
  &descriptor_table_lfsppdb_2eproto_once, descriptor_table_lfsppdb_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_lfsppdb_2eproto::offsets,
  file_level_metadata_lfsppdb_2eproto, file_level_enum_descriptors_lfsppdb_2eproto, file_level_service_descriptors_lfsppdb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_lfsppdb_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lfsppdb_2eproto);
  return descriptor_table_lfsppdb_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_lfsppdb_2eproto(&descriptor_table_lfsppdb_2eproto);
namespace lfsppdb {

// ===================================================================

class KeyPoint_t::_Internal {
 public:
  static const ::prdb::meta::XYZ32_t& stf32keypointworld(const KeyPoint_t* msg);
  static const ::prdb::meta::UVPoint_t& stkeypointimage(const KeyPoint_t* msg);
};

const ::prdb::meta::XYZ32_t&
KeyPoint_t::_Internal::stf32keypointworld(const KeyPoint_t* msg) {
  return *msg->stf32keypointworld_;
}
const ::prdb::meta::UVPoint_t&
KeyPoint_t::_Internal::stkeypointimage(const KeyPoint_t* msg) {
  return *msg->stkeypointimage_;
}
void KeyPoint_t::clear_stf32keypointworld() {
  if (GetArena() == nullptr && stf32keypointworld_ != nullptr) {
    delete stf32keypointworld_;
  }
  stf32keypointworld_ = nullptr;
}
void KeyPoint_t::clear_stkeypointimage() {
  if (GetArena() == nullptr && stkeypointimage_ != nullptr) {
    delete stkeypointimage_;
  }
  stkeypointimage_ = nullptr;
}
KeyPoint_t::KeyPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arf32descriptor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.KeyPoint_t)
}
KeyPoint_t::KeyPoint_t(const KeyPoint_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arf32descriptor_(from.arf32descriptor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stf32keypointworld()) {
    stf32keypointworld_ = new ::prdb::meta::XYZ32_t(*from.stf32keypointworld_);
  } else {
    stf32keypointworld_ = nullptr;
  }
  if (from._internal_has_stkeypointimage()) {
    stkeypointimage_ = new ::prdb::meta::UVPoint_t(*from.stkeypointimage_);
  } else {
    stkeypointimage_ = nullptr;
  }
  u8locationidx_ = from.u8locationidx_;
  // @@protoc_insertion_point(copy_constructor:lfsppdb.KeyPoint_t)
}

void KeyPoint_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stf32keypointworld_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u8locationidx_) -
    reinterpret_cast<char*>(&stf32keypointworld_)) + sizeof(u8locationidx_));
}

KeyPoint_t::~KeyPoint_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.KeyPoint_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPoint_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stf32keypointworld_;
  if (this != internal_default_instance()) delete stkeypointimage_;
}

void KeyPoint_t::ArenaDtor(void* object) {
  KeyPoint_t* _this = reinterpret_cast< KeyPoint_t* >(object);
  (void)_this;
}
void KeyPoint_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPoint_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyPoint_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.KeyPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arf32descriptor_.Clear();
  if (GetArena() == nullptr && stf32keypointworld_ != nullptr) {
    delete stf32keypointworld_;
  }
  stf32keypointworld_ = nullptr;
  if (GetArena() == nullptr && stkeypointimage_ != nullptr) {
    delete stkeypointimage_;
  }
  stkeypointimage_ = nullptr;
  u8locationidx_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPoint_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .prdb.meta.XYZ32_t stf32KeyPointWorld = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stf32keypointworld(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.UVPoint_t stKeyPointImage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stkeypointimage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float arf32Descriptor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32descriptor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_arf32descriptor(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 u8LocationIdx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          u8locationidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPoint_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.KeyPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prdb.meta.XYZ32_t stf32KeyPointWorld = 1;
  if (this->has_stf32keypointworld()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stf32keypointworld(this), target, stream);
  }

  // .prdb.meta.UVPoint_t stKeyPointImage = 2;
  if (this->has_stkeypointimage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stkeypointimage(this), target, stream);
  }

  // repeated float arf32Descriptor = 3;
  if (this->_internal_arf32descriptor_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_arf32descriptor(), target);
  }

  // uint32 u8LocationIdx = 4;
  if (this->u8locationidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_u8locationidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.KeyPoint_t)
  return target;
}

size_t KeyPoint_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.KeyPoint_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arf32Descriptor = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32descriptor_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32descriptor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .prdb.meta.XYZ32_t stf32KeyPointWorld = 1;
  if (this->has_stf32keypointworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stf32keypointworld_);
  }

  // .prdb.meta.UVPoint_t stKeyPointImage = 2;
  if (this->has_stkeypointimage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stkeypointimage_);
  }

  // uint32 u8LocationIdx = 4;
  if (this->u8locationidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u8locationidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPoint_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.KeyPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPoint_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPoint_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.KeyPoint_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.KeyPoint_t)
    MergeFrom(*source);
  }
}

void KeyPoint_t::MergeFrom(const KeyPoint_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.KeyPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arf32descriptor_.MergeFrom(from.arf32descriptor_);
  if (from.has_stf32keypointworld()) {
    _internal_mutable_stf32keypointworld()->::prdb::meta::XYZ32_t::MergeFrom(from._internal_stf32keypointworld());
  }
  if (from.has_stkeypointimage()) {
    _internal_mutable_stkeypointimage()->::prdb::meta::UVPoint_t::MergeFrom(from._internal_stkeypointimage());
  }
  if (from.u8locationidx() != 0) {
    _internal_set_u8locationidx(from._internal_u8locationidx());
  }
}

void KeyPoint_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.KeyPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPoint_t::CopyFrom(const KeyPoint_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.KeyPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPoint_t::IsInitialized() const {
  return true;
}

void KeyPoint_t::InternalSwap(KeyPoint_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arf32descriptor_.InternalSwap(&other->arf32descriptor_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPoint_t, u8locationidx_)
      + sizeof(KeyPoint_t::u8locationidx_)
      - PROTOBUF_FIELD_OFFSET(KeyPoint_t, stf32keypointworld_)>(
          reinterpret_cast<char*>(&stf32keypointworld_),
          reinterpret_cast<char*>(&other->stf32keypointworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPoint_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LFSPPDBUnit_t::_Internal {
 public:
  static const ::prdb::meta::XYZ64_t& stf64reflocation(const LFSPPDBUnit_t* msg);
};

const ::prdb::meta::XYZ64_t&
LFSPPDBUnit_t::_Internal::stf64reflocation(const LFSPPDBUnit_t* msg) {
  return *msg->stf64reflocation_;
}
void LFSPPDBUnit_t::clear_stf64reflocation() {
  if (GetArena() == nullptr && stf64reflocation_ != nullptr) {
    delete stf64reflocation_;
  }
  stf64reflocation_ = nullptr;
}
LFSPPDBUnit_t::LFSPPDBUnit_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstkeypoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.LFSPPDBUnit_t)
}
LFSPPDBUnit_t::LFSPPDBUnit_t(const LFSPPDBUnit_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstkeypoints_(from.arstkeypoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stf64reflocation()) {
    stf64reflocation_ = new ::prdb::meta::XYZ64_t(*from.stf64reflocation_);
  } else {
    stf64reflocation_ = nullptr;
  }
  ::memcpy(&u64keyframeindex_, &from.u64keyframeindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&u16numofkeypointsn_) -
    reinterpret_cast<char*>(&u64keyframeindex_)) + sizeof(u16numofkeypointsn_));
  // @@protoc_insertion_point(copy_constructor:lfsppdb.LFSPPDBUnit_t)
}

void LFSPPDBUnit_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stf64reflocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u16numofkeypointsn_) -
    reinterpret_cast<char*>(&stf64reflocation_)) + sizeof(u16numofkeypointsn_));
}

LFSPPDBUnit_t::~LFSPPDBUnit_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.LFSPPDBUnit_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LFSPPDBUnit_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stf64reflocation_;
}

void LFSPPDBUnit_t::ArenaDtor(void* object) {
  LFSPPDBUnit_t* _this = reinterpret_cast< LFSPPDBUnit_t* >(object);
  (void)_this;
}
void LFSPPDBUnit_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LFSPPDBUnit_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LFSPPDBUnit_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.LFSPPDBUnit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstkeypoints_.Clear();
  if (GetArena() == nullptr && stf64reflocation_ != nullptr) {
    delete stf64reflocation_;
  }
  stf64reflocation_ = nullptr;
  ::memset(&u64keyframeindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u16numofkeypointsn_) -
      reinterpret_cast<char*>(&u64keyframeindex_)) + sizeof(u16numofkeypointsn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LFSPPDBUnit_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64KeyFrameIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64keyframeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 u64Timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          u64timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ64_t stf64RefLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stf64reflocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 u16NumofKeyPointsN = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          u16numofkeypointsn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lfsppdb.KeyPoint_t arstKeyPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstkeypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LFSPPDBUnit_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.LFSPPDBUnit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64KeyFrameIndex = 1;
  if (this->u64keyframeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64keyframeindex(), target);
  }

  // uint64 u64Timestamp = 2;
  if (this->u64timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_u64timestamp(), target);
  }

  // .prdb.meta.XYZ64_t stf64RefLocation = 3;
  if (this->has_stf64reflocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stf64reflocation(this), target, stream);
  }

  // uint32 u16NumofKeyPointsN = 4;
  if (this->u16numofkeypointsn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_u16numofkeypointsn(), target);
  }

  // repeated .lfsppdb.KeyPoint_t arstKeyPoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstkeypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_arstkeypoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.LFSPPDBUnit_t)
  return target;
}

size_t LFSPPDBUnit_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.LFSPPDBUnit_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.KeyPoint_t arstKeyPoints = 5;
  total_size += 1UL * this->_internal_arstkeypoints_size();
  for (const auto& msg : this->arstkeypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .prdb.meta.XYZ64_t stf64RefLocation = 3;
  if (this->has_stf64reflocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stf64reflocation_);
  }

  // uint64 u64KeyFrameIndex = 1;
  if (this->u64keyframeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64keyframeindex());
  }

  // uint64 u64Timestamp = 2;
  if (this->u64timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64timestamp());
  }

  // uint32 u16NumofKeyPointsN = 4;
  if (this->u16numofkeypointsn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u16numofkeypointsn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LFSPPDBUnit_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.LFSPPDBUnit_t)
  GOOGLE_DCHECK_NE(&from, this);
  const LFSPPDBUnit_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LFSPPDBUnit_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.LFSPPDBUnit_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.LFSPPDBUnit_t)
    MergeFrom(*source);
  }
}

void LFSPPDBUnit_t::MergeFrom(const LFSPPDBUnit_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.LFSPPDBUnit_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstkeypoints_.MergeFrom(from.arstkeypoints_);
  if (from.has_stf64reflocation()) {
    _internal_mutable_stf64reflocation()->::prdb::meta::XYZ64_t::MergeFrom(from._internal_stf64reflocation());
  }
  if (from.u64keyframeindex() != 0) {
    _internal_set_u64keyframeindex(from._internal_u64keyframeindex());
  }
  if (from.u64timestamp() != 0) {
    _internal_set_u64timestamp(from._internal_u64timestamp());
  }
  if (from.u16numofkeypointsn() != 0) {
    _internal_set_u16numofkeypointsn(from._internal_u16numofkeypointsn());
  }
}

void LFSPPDBUnit_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.LFSPPDBUnit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LFSPPDBUnit_t::CopyFrom(const LFSPPDBUnit_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.LFSPPDBUnit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LFSPPDBUnit_t::IsInitialized() const {
  return true;
}

void LFSPPDBUnit_t::InternalSwap(LFSPPDBUnit_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstkeypoints_.InternalSwap(&other->arstkeypoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LFSPPDBUnit_t, u16numofkeypointsn_)
      + sizeof(LFSPPDBUnit_t::u16numofkeypointsn_)
      - PROTOBUF_FIELD_OFFSET(LFSPPDBUnit_t, stf64reflocation_)>(
          reinterpret_cast<char*>(&stf64reflocation_),
          reinterpret_cast<char*>(&other->stf64reflocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LFSPPDBUnit_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LFSPPDBSet_t::_Internal {
 public:
};

LFSPPDBSet_t::LFSPPDBSet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstlfsppdbset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.LFSPPDBSet_t)
}
LFSPPDBSet_t::LFSPPDBSet_t(const LFSPPDBSet_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstlfsppdbset_(from.arstlfsppdbset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lfsppdb.LFSPPDBSet_t)
}

void LFSPPDBSet_t::SharedCtor() {
}

LFSPPDBSet_t::~LFSPPDBSet_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.LFSPPDBSet_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LFSPPDBSet_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LFSPPDBSet_t::ArenaDtor(void* object) {
  LFSPPDBSet_t* _this = reinterpret_cast< LFSPPDBSet_t* >(object);
  (void)_this;
}
void LFSPPDBSet_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LFSPPDBSet_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LFSPPDBSet_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.LFSPPDBSet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstlfsppdbset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LFSPPDBSet_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lfsppdb.LFSPPDBUnit_t arstLFSPPDBSet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstlfsppdbset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LFSPPDBSet_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.LFSPPDBSet_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lfsppdb.LFSPPDBUnit_t arstLFSPPDBSet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstlfsppdbset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arstlfsppdbset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.LFSPPDBSet_t)
  return target;
}

size_t LFSPPDBSet_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.LFSPPDBSet_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.LFSPPDBUnit_t arstLFSPPDBSet = 1;
  total_size += 1UL * this->_internal_arstlfsppdbset_size();
  for (const auto& msg : this->arstlfsppdbset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LFSPPDBSet_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.LFSPPDBSet_t)
  GOOGLE_DCHECK_NE(&from, this);
  const LFSPPDBSet_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LFSPPDBSet_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.LFSPPDBSet_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.LFSPPDBSet_t)
    MergeFrom(*source);
  }
}

void LFSPPDBSet_t::MergeFrom(const LFSPPDBSet_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.LFSPPDBSet_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstlfsppdbset_.MergeFrom(from.arstlfsppdbset_);
}

void LFSPPDBSet_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.LFSPPDBSet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LFSPPDBSet_t::CopyFrom(const LFSPPDBSet_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.LFSPPDBSet_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LFSPPDBSet_t::IsInitialized() const {
  return true;
}

void LFSPPDBSet_t::InternalSwap(LFSPPDBSet_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstlfsppdbset_.InternalSwap(&other->arstlfsppdbset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LFSPPDBSet_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lfsppdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lfsppdb::KeyPoint_t* Arena::CreateMaybeMessage< ::lfsppdb::KeyPoint_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::KeyPoint_t >(arena);
}
template<> PROTOBUF_NOINLINE ::lfsppdb::LFSPPDBUnit_t* Arena::CreateMaybeMessage< ::lfsppdb::LFSPPDBUnit_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::LFSPPDBUnit_t >(arena);
}
template<> PROTOBUF_NOINLINE ::lfsppdb::LFSPPDBSet_t* Arena::CreateMaybeMessage< ::lfsppdb::LFSPPDBSet_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::LFSPPDBSet_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
