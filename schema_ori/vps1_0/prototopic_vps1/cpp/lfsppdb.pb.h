// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lfsppdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lfsppdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lfsppdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "prdb_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lfsppdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lfsppdb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lfsppdb_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_lfsppdb_2eproto_metadata_getter(int index);
namespace lfsppdb {
class KeyPoint_t;
struct KeyPoint_tDefaultTypeInternal;
extern KeyPoint_tDefaultTypeInternal _KeyPoint_t_default_instance_;
class LFSPPDBSet_t;
struct LFSPPDBSet_tDefaultTypeInternal;
extern LFSPPDBSet_tDefaultTypeInternal _LFSPPDBSet_t_default_instance_;
class LFSPPDBUnit_t;
struct LFSPPDBUnit_tDefaultTypeInternal;
extern LFSPPDBUnit_tDefaultTypeInternal _LFSPPDBUnit_t_default_instance_;
}  // namespace lfsppdb
PROTOBUF_NAMESPACE_OPEN
template<> ::lfsppdb::KeyPoint_t* Arena::CreateMaybeMessage<::lfsppdb::KeyPoint_t>(Arena*);
template<> ::lfsppdb::LFSPPDBSet_t* Arena::CreateMaybeMessage<::lfsppdb::LFSPPDBSet_t>(Arena*);
template<> ::lfsppdb::LFSPPDBUnit_t* Arena::CreateMaybeMessage<::lfsppdb::LFSPPDBUnit_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lfsppdb {

// ===================================================================

class KeyPoint_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.KeyPoint_t) */ {
 public:
  inline KeyPoint_t() : KeyPoint_t(nullptr) {}
  virtual ~KeyPoint_t();
  explicit constexpr KeyPoint_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyPoint_t(const KeyPoint_t& from);
  KeyPoint_t(KeyPoint_t&& from) noexcept
    : KeyPoint_t() {
    *this = ::std::move(from);
  }

  inline KeyPoint_t& operator=(const KeyPoint_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPoint_t& operator=(KeyPoint_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyPoint_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPoint_t* internal_default_instance() {
    return reinterpret_cast<const KeyPoint_t*>(
               &_KeyPoint_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPoint_t& a, KeyPoint_t& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPoint_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPoint_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPoint_t* New() const final {
    return CreateMaybeMessage<KeyPoint_t>(nullptr);
  }

  KeyPoint_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPoint_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPoint_t& from);
  void MergeFrom(const KeyPoint_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPoint_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.KeyPoint_t";
  }
  protected:
  explicit KeyPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArf32DescriptorFieldNumber = 3,
    kStf32KeyPointWorldFieldNumber = 1,
    kStKeyPointImageFieldNumber = 2,
    kU8LocationIdxFieldNumber = 4,
  };
  // repeated float arf32Descriptor = 3;
  int arf32descriptor_size() const;
  private:
  int _internal_arf32descriptor_size() const;
  public:
  void clear_arf32descriptor();
  private:
  float _internal_arf32descriptor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32descriptor() const;
  void _internal_add_arf32descriptor(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32descriptor();
  public:
  float arf32descriptor(int index) const;
  void set_arf32descriptor(int index, float value);
  void add_arf32descriptor(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32descriptor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32descriptor();

  // .prdb.meta.XYZ32_t stf32KeyPointWorld = 1;
  bool has_stf32keypointworld() const;
  private:
  bool _internal_has_stf32keypointworld() const;
  public:
  void clear_stf32keypointworld();
  const ::prdb::meta::XYZ32_t& stf32keypointworld() const;
  ::prdb::meta::XYZ32_t* release_stf32keypointworld();
  ::prdb::meta::XYZ32_t* mutable_stf32keypointworld();
  void set_allocated_stf32keypointworld(::prdb::meta::XYZ32_t* stf32keypointworld);
  private:
  const ::prdb::meta::XYZ32_t& _internal_stf32keypointworld() const;
  ::prdb::meta::XYZ32_t* _internal_mutable_stf32keypointworld();
  public:
  void unsafe_arena_set_allocated_stf32keypointworld(
      ::prdb::meta::XYZ32_t* stf32keypointworld);
  ::prdb::meta::XYZ32_t* unsafe_arena_release_stf32keypointworld();

  // .prdb.meta.UVPoint_t stKeyPointImage = 2;
  bool has_stkeypointimage() const;
  private:
  bool _internal_has_stkeypointimage() const;
  public:
  void clear_stkeypointimage();
  const ::prdb::meta::UVPoint_t& stkeypointimage() const;
  ::prdb::meta::UVPoint_t* release_stkeypointimage();
  ::prdb::meta::UVPoint_t* mutable_stkeypointimage();
  void set_allocated_stkeypointimage(::prdb::meta::UVPoint_t* stkeypointimage);
  private:
  const ::prdb::meta::UVPoint_t& _internal_stkeypointimage() const;
  ::prdb::meta::UVPoint_t* _internal_mutable_stkeypointimage();
  public:
  void unsafe_arena_set_allocated_stkeypointimage(
      ::prdb::meta::UVPoint_t* stkeypointimage);
  ::prdb::meta::UVPoint_t* unsafe_arena_release_stkeypointimage();

  // uint32 u8LocationIdx = 4;
  void clear_u8locationidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 u8locationidx() const;
  void set_u8locationidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u8locationidx() const;
  void _internal_set_u8locationidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lfsppdb.KeyPoint_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32descriptor_;
  mutable std::atomic<int> _arf32descriptor_cached_byte_size_;
  ::prdb::meta::XYZ32_t* stf32keypointworld_;
  ::prdb::meta::UVPoint_t* stkeypointimage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u8locationidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_2eproto;
};
// -------------------------------------------------------------------

class LFSPPDBUnit_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.LFSPPDBUnit_t) */ {
 public:
  inline LFSPPDBUnit_t() : LFSPPDBUnit_t(nullptr) {}
  virtual ~LFSPPDBUnit_t();
  explicit constexpr LFSPPDBUnit_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LFSPPDBUnit_t(const LFSPPDBUnit_t& from);
  LFSPPDBUnit_t(LFSPPDBUnit_t&& from) noexcept
    : LFSPPDBUnit_t() {
    *this = ::std::move(from);
  }

  inline LFSPPDBUnit_t& operator=(const LFSPPDBUnit_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline LFSPPDBUnit_t& operator=(LFSPPDBUnit_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LFSPPDBUnit_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const LFSPPDBUnit_t* internal_default_instance() {
    return reinterpret_cast<const LFSPPDBUnit_t*>(
               &_LFSPPDBUnit_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LFSPPDBUnit_t& a, LFSPPDBUnit_t& b) {
    a.Swap(&b);
  }
  inline void Swap(LFSPPDBUnit_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LFSPPDBUnit_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LFSPPDBUnit_t* New() const final {
    return CreateMaybeMessage<LFSPPDBUnit_t>(nullptr);
  }

  LFSPPDBUnit_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LFSPPDBUnit_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LFSPPDBUnit_t& from);
  void MergeFrom(const LFSPPDBUnit_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LFSPPDBUnit_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.LFSPPDBUnit_t";
  }
  protected:
  explicit LFSPPDBUnit_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstKeyPointsFieldNumber = 5,
    kStf64RefLocationFieldNumber = 3,
    kU64KeyFrameIndexFieldNumber = 1,
    kU64TimestampFieldNumber = 2,
    kU16NumofKeyPointsNFieldNumber = 4,
  };
  // repeated .lfsppdb.KeyPoint_t arstKeyPoints = 5;
  int arstkeypoints_size() const;
  private:
  int _internal_arstkeypoints_size() const;
  public:
  void clear_arstkeypoints();
  ::lfsppdb::KeyPoint_t* mutable_arstkeypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >*
      mutable_arstkeypoints();
  private:
  const ::lfsppdb::KeyPoint_t& _internal_arstkeypoints(int index) const;
  ::lfsppdb::KeyPoint_t* _internal_add_arstkeypoints();
  public:
  const ::lfsppdb::KeyPoint_t& arstkeypoints(int index) const;
  ::lfsppdb::KeyPoint_t* add_arstkeypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >&
      arstkeypoints() const;

  // .prdb.meta.XYZ64_t stf64RefLocation = 3;
  bool has_stf64reflocation() const;
  private:
  bool _internal_has_stf64reflocation() const;
  public:
  void clear_stf64reflocation();
  const ::prdb::meta::XYZ64_t& stf64reflocation() const;
  ::prdb::meta::XYZ64_t* release_stf64reflocation();
  ::prdb::meta::XYZ64_t* mutable_stf64reflocation();
  void set_allocated_stf64reflocation(::prdb::meta::XYZ64_t* stf64reflocation);
  private:
  const ::prdb::meta::XYZ64_t& _internal_stf64reflocation() const;
  ::prdb::meta::XYZ64_t* _internal_mutable_stf64reflocation();
  public:
  void unsafe_arena_set_allocated_stf64reflocation(
      ::prdb::meta::XYZ64_t* stf64reflocation);
  ::prdb::meta::XYZ64_t* unsafe_arena_release_stf64reflocation();

  // uint64 u64KeyFrameIndex = 1;
  void clear_u64keyframeindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64keyframeindex() const;
  void set_u64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64keyframeindex() const;
  void _internal_set_u64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 u64Timestamp = 2;
  void clear_u64timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64timestamp() const;
  void set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64timestamp() const;
  void _internal_set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 u16NumofKeyPointsN = 4;
  void clear_u16numofkeypointsn();
  ::PROTOBUF_NAMESPACE_ID::uint32 u16numofkeypointsn() const;
  void set_u16numofkeypointsn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u16numofkeypointsn() const;
  void _internal_set_u16numofkeypointsn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lfsppdb.LFSPPDBUnit_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t > arstkeypoints_;
  ::prdb::meta::XYZ64_t* stf64reflocation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64keyframeindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u16numofkeypointsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_2eproto;
};
// -------------------------------------------------------------------

class LFSPPDBSet_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.LFSPPDBSet_t) */ {
 public:
  inline LFSPPDBSet_t() : LFSPPDBSet_t(nullptr) {}
  virtual ~LFSPPDBSet_t();
  explicit constexpr LFSPPDBSet_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LFSPPDBSet_t(const LFSPPDBSet_t& from);
  LFSPPDBSet_t(LFSPPDBSet_t&& from) noexcept
    : LFSPPDBSet_t() {
    *this = ::std::move(from);
  }

  inline LFSPPDBSet_t& operator=(const LFSPPDBSet_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline LFSPPDBSet_t& operator=(LFSPPDBSet_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LFSPPDBSet_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const LFSPPDBSet_t* internal_default_instance() {
    return reinterpret_cast<const LFSPPDBSet_t*>(
               &_LFSPPDBSet_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LFSPPDBSet_t& a, LFSPPDBSet_t& b) {
    a.Swap(&b);
  }
  inline void Swap(LFSPPDBSet_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LFSPPDBSet_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LFSPPDBSet_t* New() const final {
    return CreateMaybeMessage<LFSPPDBSet_t>(nullptr);
  }

  LFSPPDBSet_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LFSPPDBSet_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LFSPPDBSet_t& from);
  void MergeFrom(const LFSPPDBSet_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LFSPPDBSet_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.LFSPPDBSet_t";
  }
  protected:
  explicit LFSPPDBSet_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstLFSPPDBSetFieldNumber = 1,
  };
  // repeated .lfsppdb.LFSPPDBUnit_t arstLFSPPDBSet = 1;
  int arstlfsppdbset_size() const;
  private:
  int _internal_arstlfsppdbset_size() const;
  public:
  void clear_arstlfsppdbset();
  ::lfsppdb::LFSPPDBUnit_t* mutable_arstlfsppdbset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::LFSPPDBUnit_t >*
      mutable_arstlfsppdbset();
  private:
  const ::lfsppdb::LFSPPDBUnit_t& _internal_arstlfsppdbset(int index) const;
  ::lfsppdb::LFSPPDBUnit_t* _internal_add_arstlfsppdbset();
  public:
  const ::lfsppdb::LFSPPDBUnit_t& arstlfsppdbset(int index) const;
  ::lfsppdb::LFSPPDBUnit_t* add_arstlfsppdbset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::LFSPPDBUnit_t >&
      arstlfsppdbset() const;

  // @@protoc_insertion_point(class_scope:lfsppdb.LFSPPDBSet_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::LFSPPDBUnit_t > arstlfsppdbset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPoint_t

// .prdb.meta.XYZ32_t stf32KeyPointWorld = 1;
inline bool KeyPoint_t::_internal_has_stf32keypointworld() const {
  return this != internal_default_instance() && stf32keypointworld_ != nullptr;
}
inline bool KeyPoint_t::has_stf32keypointworld() const {
  return _internal_has_stf32keypointworld();
}
inline const ::prdb::meta::XYZ32_t& KeyPoint_t::_internal_stf32keypointworld() const {
  const ::prdb::meta::XYZ32_t* p = stf32keypointworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ32_t&>(
      ::prdb::meta::_XYZ32_t_default_instance_);
}
inline const ::prdb::meta::XYZ32_t& KeyPoint_t::stf32keypointworld() const {
  // @@protoc_insertion_point(field_get:lfsppdb.KeyPoint_t.stf32KeyPointWorld)
  return _internal_stf32keypointworld();
}
inline void KeyPoint_t::unsafe_arena_set_allocated_stf32keypointworld(
    ::prdb::meta::XYZ32_t* stf32keypointworld) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf32keypointworld_);
  }
  stf32keypointworld_ = stf32keypointworld;
  if (stf32keypointworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.KeyPoint_t.stf32KeyPointWorld)
}
inline ::prdb::meta::XYZ32_t* KeyPoint_t::release_stf32keypointworld() {
  
  ::prdb::meta::XYZ32_t* temp = stf32keypointworld_;
  stf32keypointworld_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ32_t* KeyPoint_t::unsafe_arena_release_stf32keypointworld() {
  // @@protoc_insertion_point(field_release:lfsppdb.KeyPoint_t.stf32KeyPointWorld)
  
  ::prdb::meta::XYZ32_t* temp = stf32keypointworld_;
  stf32keypointworld_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ32_t* KeyPoint_t::_internal_mutable_stf32keypointworld() {
  
  if (stf32keypointworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ32_t>(GetArena());
    stf32keypointworld_ = p;
  }
  return stf32keypointworld_;
}
inline ::prdb::meta::XYZ32_t* KeyPoint_t::mutable_stf32keypointworld() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.KeyPoint_t.stf32KeyPointWorld)
  return _internal_mutable_stf32keypointworld();
}
inline void KeyPoint_t::set_allocated_stf32keypointworld(::prdb::meta::XYZ32_t* stf32keypointworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf32keypointworld_);
  }
  if (stf32keypointworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf32keypointworld)->GetArena();
    if (message_arena != submessage_arena) {
      stf32keypointworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stf32keypointworld, submessage_arena);
    }
    
  } else {
    
  }
  stf32keypointworld_ = stf32keypointworld;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.KeyPoint_t.stf32KeyPointWorld)
}

// .prdb.meta.UVPoint_t stKeyPointImage = 2;
inline bool KeyPoint_t::_internal_has_stkeypointimage() const {
  return this != internal_default_instance() && stkeypointimage_ != nullptr;
}
inline bool KeyPoint_t::has_stkeypointimage() const {
  return _internal_has_stkeypointimage();
}
inline const ::prdb::meta::UVPoint_t& KeyPoint_t::_internal_stkeypointimage() const {
  const ::prdb::meta::UVPoint_t* p = stkeypointimage_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::UVPoint_t&>(
      ::prdb::meta::_UVPoint_t_default_instance_);
}
inline const ::prdb::meta::UVPoint_t& KeyPoint_t::stkeypointimage() const {
  // @@protoc_insertion_point(field_get:lfsppdb.KeyPoint_t.stKeyPointImage)
  return _internal_stkeypointimage();
}
inline void KeyPoint_t::unsafe_arena_set_allocated_stkeypointimage(
    ::prdb::meta::UVPoint_t* stkeypointimage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stkeypointimage_);
  }
  stkeypointimage_ = stkeypointimage;
  if (stkeypointimage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.KeyPoint_t.stKeyPointImage)
}
inline ::prdb::meta::UVPoint_t* KeyPoint_t::release_stkeypointimage() {
  
  ::prdb::meta::UVPoint_t* temp = stkeypointimage_;
  stkeypointimage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::UVPoint_t* KeyPoint_t::unsafe_arena_release_stkeypointimage() {
  // @@protoc_insertion_point(field_release:lfsppdb.KeyPoint_t.stKeyPointImage)
  
  ::prdb::meta::UVPoint_t* temp = stkeypointimage_;
  stkeypointimage_ = nullptr;
  return temp;
}
inline ::prdb::meta::UVPoint_t* KeyPoint_t::_internal_mutable_stkeypointimage() {
  
  if (stkeypointimage_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::UVPoint_t>(GetArena());
    stkeypointimage_ = p;
  }
  return stkeypointimage_;
}
inline ::prdb::meta::UVPoint_t* KeyPoint_t::mutable_stkeypointimage() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.KeyPoint_t.stKeyPointImage)
  return _internal_mutable_stkeypointimage();
}
inline void KeyPoint_t::set_allocated_stkeypointimage(::prdb::meta::UVPoint_t* stkeypointimage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stkeypointimage_);
  }
  if (stkeypointimage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stkeypointimage)->GetArena();
    if (message_arena != submessage_arena) {
      stkeypointimage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stkeypointimage, submessage_arena);
    }
    
  } else {
    
  }
  stkeypointimage_ = stkeypointimage;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.KeyPoint_t.stKeyPointImage)
}

// repeated float arf32Descriptor = 3;
inline int KeyPoint_t::_internal_arf32descriptor_size() const {
  return arf32descriptor_.size();
}
inline int KeyPoint_t::arf32descriptor_size() const {
  return _internal_arf32descriptor_size();
}
inline void KeyPoint_t::clear_arf32descriptor() {
  arf32descriptor_.Clear();
}
inline float KeyPoint_t::_internal_arf32descriptor(int index) const {
  return arf32descriptor_.Get(index);
}
inline float KeyPoint_t::arf32descriptor(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.KeyPoint_t.arf32Descriptor)
  return _internal_arf32descriptor(index);
}
inline void KeyPoint_t::set_arf32descriptor(int index, float value) {
  arf32descriptor_.Set(index, value);
  // @@protoc_insertion_point(field_set:lfsppdb.KeyPoint_t.arf32Descriptor)
}
inline void KeyPoint_t::_internal_add_arf32descriptor(float value) {
  arf32descriptor_.Add(value);
}
inline void KeyPoint_t::add_arf32descriptor(float value) {
  _internal_add_arf32descriptor(value);
  // @@protoc_insertion_point(field_add:lfsppdb.KeyPoint_t.arf32Descriptor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyPoint_t::_internal_arf32descriptor() const {
  return arf32descriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyPoint_t::arf32descriptor() const {
  // @@protoc_insertion_point(field_list:lfsppdb.KeyPoint_t.arf32Descriptor)
  return _internal_arf32descriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyPoint_t::_internal_mutable_arf32descriptor() {
  return &arf32descriptor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyPoint_t::mutable_arf32descriptor() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.KeyPoint_t.arf32Descriptor)
  return _internal_mutable_arf32descriptor();
}

// uint32 u8LocationIdx = 4;
inline void KeyPoint_t::clear_u8locationidx() {
  u8locationidx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyPoint_t::_internal_u8locationidx() const {
  return u8locationidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyPoint_t::u8locationidx() const {
  // @@protoc_insertion_point(field_get:lfsppdb.KeyPoint_t.u8LocationIdx)
  return _internal_u8locationidx();
}
inline void KeyPoint_t::_internal_set_u8locationidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u8locationidx_ = value;
}
inline void KeyPoint_t::set_u8locationidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u8locationidx(value);
  // @@protoc_insertion_point(field_set:lfsppdb.KeyPoint_t.u8LocationIdx)
}

// -------------------------------------------------------------------

// LFSPPDBUnit_t

// uint64 u64KeyFrameIndex = 1;
inline void LFSPPDBUnit_t::clear_u64keyframeindex() {
  u64keyframeindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LFSPPDBUnit_t::_internal_u64keyframeindex() const {
  return u64keyframeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LFSPPDBUnit_t::u64keyframeindex() const {
  // @@protoc_insertion_point(field_get:lfsppdb.LFSPPDBUnit_t.u64KeyFrameIndex)
  return _internal_u64keyframeindex();
}
inline void LFSPPDBUnit_t::_internal_set_u64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64keyframeindex_ = value;
}
inline void LFSPPDBUnit_t::set_u64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64keyframeindex(value);
  // @@protoc_insertion_point(field_set:lfsppdb.LFSPPDBUnit_t.u64KeyFrameIndex)
}

// uint64 u64Timestamp = 2;
inline void LFSPPDBUnit_t::clear_u64timestamp() {
  u64timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LFSPPDBUnit_t::_internal_u64timestamp() const {
  return u64timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LFSPPDBUnit_t::u64timestamp() const {
  // @@protoc_insertion_point(field_get:lfsppdb.LFSPPDBUnit_t.u64Timestamp)
  return _internal_u64timestamp();
}
inline void LFSPPDBUnit_t::_internal_set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64timestamp_ = value;
}
inline void LFSPPDBUnit_t::set_u64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64timestamp(value);
  // @@protoc_insertion_point(field_set:lfsppdb.LFSPPDBUnit_t.u64Timestamp)
}

// .prdb.meta.XYZ64_t stf64RefLocation = 3;
inline bool LFSPPDBUnit_t::_internal_has_stf64reflocation() const {
  return this != internal_default_instance() && stf64reflocation_ != nullptr;
}
inline bool LFSPPDBUnit_t::has_stf64reflocation() const {
  return _internal_has_stf64reflocation();
}
inline const ::prdb::meta::XYZ64_t& LFSPPDBUnit_t::_internal_stf64reflocation() const {
  const ::prdb::meta::XYZ64_t* p = stf64reflocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ64_t&>(
      ::prdb::meta::_XYZ64_t_default_instance_);
}
inline const ::prdb::meta::XYZ64_t& LFSPPDBUnit_t::stf64reflocation() const {
  // @@protoc_insertion_point(field_get:lfsppdb.LFSPPDBUnit_t.stf64RefLocation)
  return _internal_stf64reflocation();
}
inline void LFSPPDBUnit_t::unsafe_arena_set_allocated_stf64reflocation(
    ::prdb::meta::XYZ64_t* stf64reflocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf64reflocation_);
  }
  stf64reflocation_ = stf64reflocation;
  if (stf64reflocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.LFSPPDBUnit_t.stf64RefLocation)
}
inline ::prdb::meta::XYZ64_t* LFSPPDBUnit_t::release_stf64reflocation() {
  
  ::prdb::meta::XYZ64_t* temp = stf64reflocation_;
  stf64reflocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ64_t* LFSPPDBUnit_t::unsafe_arena_release_stf64reflocation() {
  // @@protoc_insertion_point(field_release:lfsppdb.LFSPPDBUnit_t.stf64RefLocation)
  
  ::prdb::meta::XYZ64_t* temp = stf64reflocation_;
  stf64reflocation_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ64_t* LFSPPDBUnit_t::_internal_mutable_stf64reflocation() {
  
  if (stf64reflocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ64_t>(GetArena());
    stf64reflocation_ = p;
  }
  return stf64reflocation_;
}
inline ::prdb::meta::XYZ64_t* LFSPPDBUnit_t::mutable_stf64reflocation() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.LFSPPDBUnit_t.stf64RefLocation)
  return _internal_mutable_stf64reflocation();
}
inline void LFSPPDBUnit_t::set_allocated_stf64reflocation(::prdb::meta::XYZ64_t* stf64reflocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf64reflocation_);
  }
  if (stf64reflocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf64reflocation)->GetArena();
    if (message_arena != submessage_arena) {
      stf64reflocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stf64reflocation, submessage_arena);
    }
    
  } else {
    
  }
  stf64reflocation_ = stf64reflocation;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.LFSPPDBUnit_t.stf64RefLocation)
}

// uint32 u16NumofKeyPointsN = 4;
inline void LFSPPDBUnit_t::clear_u16numofkeypointsn() {
  u16numofkeypointsn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LFSPPDBUnit_t::_internal_u16numofkeypointsn() const {
  return u16numofkeypointsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LFSPPDBUnit_t::u16numofkeypointsn() const {
  // @@protoc_insertion_point(field_get:lfsppdb.LFSPPDBUnit_t.u16NumofKeyPointsN)
  return _internal_u16numofkeypointsn();
}
inline void LFSPPDBUnit_t::_internal_set_u16numofkeypointsn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u16numofkeypointsn_ = value;
}
inline void LFSPPDBUnit_t::set_u16numofkeypointsn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u16numofkeypointsn(value);
  // @@protoc_insertion_point(field_set:lfsppdb.LFSPPDBUnit_t.u16NumofKeyPointsN)
}

// repeated .lfsppdb.KeyPoint_t arstKeyPoints = 5;
inline int LFSPPDBUnit_t::_internal_arstkeypoints_size() const {
  return arstkeypoints_.size();
}
inline int LFSPPDBUnit_t::arstkeypoints_size() const {
  return _internal_arstkeypoints_size();
}
inline void LFSPPDBUnit_t::clear_arstkeypoints() {
  arstkeypoints_.Clear();
}
inline ::lfsppdb::KeyPoint_t* LFSPPDBUnit_t::mutable_arstkeypoints(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.LFSPPDBUnit_t.arstKeyPoints)
  return arstkeypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >*
LFSPPDBUnit_t::mutable_arstkeypoints() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.LFSPPDBUnit_t.arstKeyPoints)
  return &arstkeypoints_;
}
inline const ::lfsppdb::KeyPoint_t& LFSPPDBUnit_t::_internal_arstkeypoints(int index) const {
  return arstkeypoints_.Get(index);
}
inline const ::lfsppdb::KeyPoint_t& LFSPPDBUnit_t::arstkeypoints(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.LFSPPDBUnit_t.arstKeyPoints)
  return _internal_arstkeypoints(index);
}
inline ::lfsppdb::KeyPoint_t* LFSPPDBUnit_t::_internal_add_arstkeypoints() {
  return arstkeypoints_.Add();
}
inline ::lfsppdb::KeyPoint_t* LFSPPDBUnit_t::add_arstkeypoints() {
  // @@protoc_insertion_point(field_add:lfsppdb.LFSPPDBUnit_t.arstKeyPoints)
  return _internal_add_arstkeypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::KeyPoint_t >&
LFSPPDBUnit_t::arstkeypoints() const {
  // @@protoc_insertion_point(field_list:lfsppdb.LFSPPDBUnit_t.arstKeyPoints)
  return arstkeypoints_;
}

// -------------------------------------------------------------------

// LFSPPDBSet_t

// repeated .lfsppdb.LFSPPDBUnit_t arstLFSPPDBSet = 1;
inline int LFSPPDBSet_t::_internal_arstlfsppdbset_size() const {
  return arstlfsppdbset_.size();
}
inline int LFSPPDBSet_t::arstlfsppdbset_size() const {
  return _internal_arstlfsppdbset_size();
}
inline void LFSPPDBSet_t::clear_arstlfsppdbset() {
  arstlfsppdbset_.Clear();
}
inline ::lfsppdb::LFSPPDBUnit_t* LFSPPDBSet_t::mutable_arstlfsppdbset(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.LFSPPDBSet_t.arstLFSPPDBSet)
  return arstlfsppdbset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::LFSPPDBUnit_t >*
LFSPPDBSet_t::mutable_arstlfsppdbset() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.LFSPPDBSet_t.arstLFSPPDBSet)
  return &arstlfsppdbset_;
}
inline const ::lfsppdb::LFSPPDBUnit_t& LFSPPDBSet_t::_internal_arstlfsppdbset(int index) const {
  return arstlfsppdbset_.Get(index);
}
inline const ::lfsppdb::LFSPPDBUnit_t& LFSPPDBSet_t::arstlfsppdbset(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.LFSPPDBSet_t.arstLFSPPDBSet)
  return _internal_arstlfsppdbset(index);
}
inline ::lfsppdb::LFSPPDBUnit_t* LFSPPDBSet_t::_internal_add_arstlfsppdbset() {
  return arstlfsppdbset_.Add();
}
inline ::lfsppdb::LFSPPDBUnit_t* LFSPPDBSet_t::add_arstlfsppdbset() {
  // @@protoc_insertion_point(field_add:lfsppdb.LFSPPDBSet_t.arstLFSPPDBSet)
  return _internal_add_arstlfsppdbset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::LFSPPDBUnit_t >&
LFSPPDBSet_t::arstlfsppdbset() const {
  // @@protoc_insertion_point(field_list:lfsppdb.LFSPPDBSet_t.arstLFSPPDBSet)
  return arstlfsppdbset_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lfsppdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lfsppdb_2eproto
