// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lfsppdb_return_localfeature.proto

#include "lfsppdb_return_localfeature.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lfsppdb {
namespace localfeature {
constexpr Matched_t::Matched_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stf32matchedkeypointworld_(nullptr)
  , stmatchedkeypointimage_(nullptr)
  , u16matchedkeypointindex_(0u)
  , f32distance_(0)
  , u8matchedkeypointlocationidx_(0u){}
struct Matched_tDefaultTypeInternal {
  constexpr Matched_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matched_tDefaultTypeInternal() {}
  union {
    Matched_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matched_tDefaultTypeInternal _Matched_t_default_instance_;
constexpr QueryMatch_t::QueryMatch_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stmatchedtopk_()
  , u16queriedkeypointindex_(0u){}
struct QueryMatch_tDefaultTypeInternal {
  constexpr QueryMatch_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryMatch_tDefaultTypeInternal() {}
  union {
    QueryMatch_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryMatch_tDefaultTypeInternal _QueryMatch_t_default_instance_;
constexpr Data_t::Data_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stquerymatch_()
  , streferencelocation_(nullptr)
  , u64queriedkeyframeindex_(PROTOBUF_ULONGLONG(0)){}
struct Data_tDefaultTypeInternal {
  constexpr Data_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Data_tDefaultTypeInternal() {}
  union {
    Data_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Data_tDefaultTypeInternal _Data_t_default_instance_;
constexpr LocalFeatureR::LocalFeatureR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stdata_(){}
struct LocalFeatureRDefaultTypeInternal {
  constexpr LocalFeatureRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocalFeatureRDefaultTypeInternal() {}
  union {
    LocalFeatureR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocalFeatureRDefaultTypeInternal _LocalFeatureR_default_instance_;
}  // namespace localfeature
}  // namespace lfsppdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lfsppdb_5freturn_5flocalfeature_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lfsppdb_5freturn_5flocalfeature_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lfsppdb_5freturn_5flocalfeature_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Matched_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Matched_t, u16matchedkeypointindex_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Matched_t, stf32matchedkeypointworld_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Matched_t, stmatchedkeypointimage_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Matched_t, f32distance_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Matched_t, u8matchedkeypointlocationidx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::QueryMatch_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::QueryMatch_t, u16queriedkeypointindex_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::QueryMatch_t, stmatchedtopk_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Data_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Data_t, u64queriedkeyframeindex_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Data_t, streferencelocation_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::Data_t, stquerymatch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::LocalFeatureR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::localfeature::LocalFeatureR, stdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lfsppdb::localfeature::Matched_t)},
  { 10, -1, sizeof(::lfsppdb::localfeature::QueryMatch_t)},
  { 17, -1, sizeof(::lfsppdb::localfeature::Data_t)},
  { 25, -1, sizeof(::lfsppdb::localfeature::LocalFeatureR)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::localfeature::_Matched_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::localfeature::_QueryMatch_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::localfeature::_Data_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::localfeature::_LocalFeatureR_default_instance_),
};

const char descriptor_table_protodef_lfsppdb_5freturn_5flocalfeature_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!lfsppdb_return_localfeature.proto\022\024lfs"
  "ppdb.localfeature\032\017prdb_meta.proto\"\324\001\n\tM"
  "atched_t\022\037\n\027u16MatchedKeyPointIndex\030\001 \001("
  "\r\0225\n\031stf32MatchedKeyPointWorld\030\002 \001(\0132\022.p"
  "rdb.meta.XYZ32_t\0224\n\026stMatchedKeyPointIma"
  "ge\030\003 \001(\0132\024.prdb.meta.UVPoint_t\022\023\n\013f32Dis"
  "tance\030\004 \001(\002\022$\n\034u8MatchedKeypointLocation"
  "Idx\030\005 \001(\r\"g\n\014QueryMatch_t\022\037\n\027u16QueriedK"
  "eyPointIndex\030\001 \001(\r\0226\n\rstMatchedTopK\030\002 \003("
  "\0132\037.lfsppdb.localfeature.Matched_t\"\224\001\n\006D"
  "ata_t\022\037\n\027u64QueriedKeyFrameIndex\030\001 \001(\004\022/"
  "\n\023stReferenceLocation\030\002 \001(\0132\022.prdb.meta."
  "XYZ64_t\0228\n\014stQueryMatch\030\003 \003(\0132\".lfsppdb."
  "localfeature.QueryMatch_t\"=\n\rLocalFeatur"
  "eR\022,\n\006stData\030\001 \003(\0132\034.lfsppdb.localfeatur"
  "e.Data_tB\016\n\014dbms.lfsppdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_deps[1] = {
  &::descriptor_table_prdb_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto = {
  false, false, 632, descriptor_table_protodef_lfsppdb_5freturn_5flocalfeature_2eproto, "lfsppdb_return_localfeature.proto", 
  &descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_once, descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto::offsets,
  file_level_metadata_lfsppdb_5freturn_5flocalfeature_2eproto, file_level_enum_descriptors_lfsppdb_5freturn_5flocalfeature_2eproto, file_level_service_descriptors_lfsppdb_5freturn_5flocalfeature_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto);
  return descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_lfsppdb_5freturn_5flocalfeature_2eproto(&descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto);
namespace lfsppdb {
namespace localfeature {

// ===================================================================

class Matched_t::_Internal {
 public:
  static const ::prdb::meta::XYZ32_t& stf32matchedkeypointworld(const Matched_t* msg);
  static const ::prdb::meta::UVPoint_t& stmatchedkeypointimage(const Matched_t* msg);
};

const ::prdb::meta::XYZ32_t&
Matched_t::_Internal::stf32matchedkeypointworld(const Matched_t* msg) {
  return *msg->stf32matchedkeypointworld_;
}
const ::prdb::meta::UVPoint_t&
Matched_t::_Internal::stmatchedkeypointimage(const Matched_t* msg) {
  return *msg->stmatchedkeypointimage_;
}
void Matched_t::clear_stf32matchedkeypointworld() {
  if (GetArena() == nullptr && stf32matchedkeypointworld_ != nullptr) {
    delete stf32matchedkeypointworld_;
  }
  stf32matchedkeypointworld_ = nullptr;
}
void Matched_t::clear_stmatchedkeypointimage() {
  if (GetArena() == nullptr && stmatchedkeypointimage_ != nullptr) {
    delete stmatchedkeypointimage_;
  }
  stmatchedkeypointimage_ = nullptr;
}
Matched_t::Matched_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.localfeature.Matched_t)
}
Matched_t::Matched_t(const Matched_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stf32matchedkeypointworld()) {
    stf32matchedkeypointworld_ = new ::prdb::meta::XYZ32_t(*from.stf32matchedkeypointworld_);
  } else {
    stf32matchedkeypointworld_ = nullptr;
  }
  if (from._internal_has_stmatchedkeypointimage()) {
    stmatchedkeypointimage_ = new ::prdb::meta::UVPoint_t(*from.stmatchedkeypointimage_);
  } else {
    stmatchedkeypointimage_ = nullptr;
  }
  ::memcpy(&u16matchedkeypointindex_, &from.u16matchedkeypointindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&u8matchedkeypointlocationidx_) -
    reinterpret_cast<char*>(&u16matchedkeypointindex_)) + sizeof(u8matchedkeypointlocationidx_));
  // @@protoc_insertion_point(copy_constructor:lfsppdb.localfeature.Matched_t)
}

void Matched_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stf32matchedkeypointworld_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u8matchedkeypointlocationidx_) -
    reinterpret_cast<char*>(&stf32matchedkeypointworld_)) + sizeof(u8matchedkeypointlocationidx_));
}

Matched_t::~Matched_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.localfeature.Matched_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matched_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stf32matchedkeypointworld_;
  if (this != internal_default_instance()) delete stmatchedkeypointimage_;
}

void Matched_t::ArenaDtor(void* object) {
  Matched_t* _this = reinterpret_cast< Matched_t* >(object);
  (void)_this;
}
void Matched_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matched_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matched_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.localfeature.Matched_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stf32matchedkeypointworld_ != nullptr) {
    delete stf32matchedkeypointworld_;
  }
  stf32matchedkeypointworld_ = nullptr;
  if (GetArena() == nullptr && stmatchedkeypointimage_ != nullptr) {
    delete stmatchedkeypointimage_;
  }
  stmatchedkeypointimage_ = nullptr;
  ::memset(&u16matchedkeypointindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u8matchedkeypointlocationidx_) -
      reinterpret_cast<char*>(&u16matchedkeypointindex_)) + sizeof(u8matchedkeypointlocationidx_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matched_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 u16MatchedKeyPointIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u16matchedkeypointindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ32_t stf32MatchedKeyPointWorld = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stf32matchedkeypointworld(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.UVPoint_t stMatchedKeyPointImage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmatchedkeypointimage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32Distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 u8MatchedKeypointLocationIdx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          u8matchedkeypointlocationidx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matched_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.localfeature.Matched_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u16MatchedKeyPointIndex = 1;
  if (this->u16matchedkeypointindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_u16matchedkeypointindex(), target);
  }

  // .prdb.meta.XYZ32_t stf32MatchedKeyPointWorld = 2;
  if (this->has_stf32matchedkeypointworld()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stf32matchedkeypointworld(this), target, stream);
  }

  // .prdb.meta.UVPoint_t stMatchedKeyPointImage = 3;
  if (this->has_stmatchedkeypointimage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stmatchedkeypointimage(this), target, stream);
  }

  // float f32Distance = 4;
  if (!(this->f32distance() <= 0 && this->f32distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32distance(), target);
  }

  // uint32 u8MatchedKeypointLocationIdx = 5;
  if (this->u8matchedkeypointlocationidx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_u8matchedkeypointlocationidx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.localfeature.Matched_t)
  return target;
}

size_t Matched_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.localfeature.Matched_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prdb.meta.XYZ32_t stf32MatchedKeyPointWorld = 2;
  if (this->has_stf32matchedkeypointworld()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stf32matchedkeypointworld_);
  }

  // .prdb.meta.UVPoint_t stMatchedKeyPointImage = 3;
  if (this->has_stmatchedkeypointimage()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmatchedkeypointimage_);
  }

  // uint32 u16MatchedKeyPointIndex = 1;
  if (this->u16matchedkeypointindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u16matchedkeypointindex());
  }

  // float f32Distance = 4;
  if (!(this->f32distance() <= 0 && this->f32distance() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 u8MatchedKeypointLocationIdx = 5;
  if (this->u8matchedkeypointlocationidx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u8matchedkeypointlocationidx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matched_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.localfeature.Matched_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Matched_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matched_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.localfeature.Matched_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.localfeature.Matched_t)
    MergeFrom(*source);
  }
}

void Matched_t::MergeFrom(const Matched_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.localfeature.Matched_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stf32matchedkeypointworld()) {
    _internal_mutable_stf32matchedkeypointworld()->::prdb::meta::XYZ32_t::MergeFrom(from._internal_stf32matchedkeypointworld());
  }
  if (from.has_stmatchedkeypointimage()) {
    _internal_mutable_stmatchedkeypointimage()->::prdb::meta::UVPoint_t::MergeFrom(from._internal_stmatchedkeypointimage());
  }
  if (from.u16matchedkeypointindex() != 0) {
    _internal_set_u16matchedkeypointindex(from._internal_u16matchedkeypointindex());
  }
  if (!(from.f32distance() <= 0 && from.f32distance() >= 0)) {
    _internal_set_f32distance(from._internal_f32distance());
  }
  if (from.u8matchedkeypointlocationidx() != 0) {
    _internal_set_u8matchedkeypointlocationidx(from._internal_u8matchedkeypointlocationidx());
  }
}

void Matched_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.localfeature.Matched_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matched_t::CopyFrom(const Matched_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.localfeature.Matched_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matched_t::IsInitialized() const {
  return true;
}

void Matched_t::InternalSwap(Matched_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matched_t, u8matchedkeypointlocationidx_)
      + sizeof(Matched_t::u8matchedkeypointlocationidx_)
      - PROTOBUF_FIELD_OFFSET(Matched_t, stf32matchedkeypointworld_)>(
          reinterpret_cast<char*>(&stf32matchedkeypointworld_),
          reinterpret_cast<char*>(&other->stf32matchedkeypointworld_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matched_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class QueryMatch_t::_Internal {
 public:
};

QueryMatch_t::QueryMatch_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stmatchedtopk_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.localfeature.QueryMatch_t)
}
QueryMatch_t::QueryMatch_t(const QueryMatch_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stmatchedtopk_(from.stmatchedtopk_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u16queriedkeypointindex_ = from.u16queriedkeypointindex_;
  // @@protoc_insertion_point(copy_constructor:lfsppdb.localfeature.QueryMatch_t)
}

void QueryMatch_t::SharedCtor() {
u16queriedkeypointindex_ = 0u;
}

QueryMatch_t::~QueryMatch_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.localfeature.QueryMatch_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryMatch_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void QueryMatch_t::ArenaDtor(void* object) {
  QueryMatch_t* _this = reinterpret_cast< QueryMatch_t* >(object);
  (void)_this;
}
void QueryMatch_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryMatch_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryMatch_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.localfeature.QueryMatch_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stmatchedtopk_.Clear();
  u16queriedkeypointindex_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryMatch_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 u16QueriedKeyPointIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u16queriedkeypointindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lfsppdb.localfeature.Matched_t stMatchedTopK = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stmatchedtopk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryMatch_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.localfeature.QueryMatch_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 u16QueriedKeyPointIndex = 1;
  if (this->u16queriedkeypointindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_u16queriedkeypointindex(), target);
  }

  // repeated .lfsppdb.localfeature.Matched_t stMatchedTopK = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stmatchedtopk_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stmatchedtopk(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.localfeature.QueryMatch_t)
  return target;
}

size_t QueryMatch_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.localfeature.QueryMatch_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.localfeature.Matched_t stMatchedTopK = 2;
  total_size += 1UL * this->_internal_stmatchedtopk_size();
  for (const auto& msg : this->stmatchedtopk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 u16QueriedKeyPointIndex = 1;
  if (this->u16queriedkeypointindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u16queriedkeypointindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMatch_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.localfeature.QueryMatch_t)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMatch_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryMatch_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.localfeature.QueryMatch_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.localfeature.QueryMatch_t)
    MergeFrom(*source);
  }
}

void QueryMatch_t::MergeFrom(const QueryMatch_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.localfeature.QueryMatch_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stmatchedtopk_.MergeFrom(from.stmatchedtopk_);
  if (from.u16queriedkeypointindex() != 0) {
    _internal_set_u16queriedkeypointindex(from._internal_u16queriedkeypointindex());
  }
}

void QueryMatch_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.localfeature.QueryMatch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMatch_t::CopyFrom(const QueryMatch_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.localfeature.QueryMatch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMatch_t::IsInitialized() const {
  return true;
}

void QueryMatch_t::InternalSwap(QueryMatch_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stmatchedtopk_.InternalSwap(&other->stmatchedtopk_);
  swap(u16queriedkeypointindex_, other->u16queriedkeypointindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMatch_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Data_t::_Internal {
 public:
  static const ::prdb::meta::XYZ64_t& streferencelocation(const Data_t* msg);
};

const ::prdb::meta::XYZ64_t&
Data_t::_Internal::streferencelocation(const Data_t* msg) {
  return *msg->streferencelocation_;
}
void Data_t::clear_streferencelocation() {
  if (GetArena() == nullptr && streferencelocation_ != nullptr) {
    delete streferencelocation_;
  }
  streferencelocation_ = nullptr;
}
Data_t::Data_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stquerymatch_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.localfeature.Data_t)
}
Data_t::Data_t(const Data_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stquerymatch_(from.stquerymatch_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streferencelocation()) {
    streferencelocation_ = new ::prdb::meta::XYZ64_t(*from.streferencelocation_);
  } else {
    streferencelocation_ = nullptr;
  }
  u64queriedkeyframeindex_ = from.u64queriedkeyframeindex_;
  // @@protoc_insertion_point(copy_constructor:lfsppdb.localfeature.Data_t)
}

void Data_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&streferencelocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u64queriedkeyframeindex_) -
    reinterpret_cast<char*>(&streferencelocation_)) + sizeof(u64queriedkeyframeindex_));
}

Data_t::~Data_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.localfeature.Data_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Data_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streferencelocation_;
}

void Data_t::ArenaDtor(void* object) {
  Data_t* _this = reinterpret_cast< Data_t* >(object);
  (void)_this;
}
void Data_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.localfeature.Data_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stquerymatch_.Clear();
  if (GetArena() == nullptr && streferencelocation_ != nullptr) {
    delete streferencelocation_;
  }
  streferencelocation_ = nullptr;
  u64queriedkeyframeindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64QueriedKeyFrameIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64queriedkeyframeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ64_t stReferenceLocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_streferencelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lfsppdb.localfeature.QueryMatch_t stQueryMatch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stquerymatch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.localfeature.Data_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64QueriedKeyFrameIndex = 1;
  if (this->u64queriedkeyframeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64queriedkeyframeindex(), target);
  }

  // .prdb.meta.XYZ64_t stReferenceLocation = 2;
  if (this->has_streferencelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::streferencelocation(this), target, stream);
  }

  // repeated .lfsppdb.localfeature.QueryMatch_t stQueryMatch = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stquerymatch_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stquerymatch(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.localfeature.Data_t)
  return target;
}

size_t Data_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.localfeature.Data_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.localfeature.QueryMatch_t stQueryMatch = 3;
  total_size += 1UL * this->_internal_stquerymatch_size();
  for (const auto& msg : this->stquerymatch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .prdb.meta.XYZ64_t stReferenceLocation = 2;
  if (this->has_streferencelocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streferencelocation_);
  }

  // uint64 u64QueriedKeyFrameIndex = 1;
  if (this->u64queriedkeyframeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64queriedkeyframeindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.localfeature.Data_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.localfeature.Data_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.localfeature.Data_t)
    MergeFrom(*source);
  }
}

void Data_t::MergeFrom(const Data_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.localfeature.Data_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stquerymatch_.MergeFrom(from.stquerymatch_);
  if (from.has_streferencelocation()) {
    _internal_mutable_streferencelocation()->::prdb::meta::XYZ64_t::MergeFrom(from._internal_streferencelocation());
  }
  if (from.u64queriedkeyframeindex() != 0) {
    _internal_set_u64queriedkeyframeindex(from._internal_u64queriedkeyframeindex());
  }
}

void Data_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.localfeature.Data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_t::CopyFrom(const Data_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.localfeature.Data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_t::IsInitialized() const {
  return true;
}

void Data_t::InternalSwap(Data_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stquerymatch_.InternalSwap(&other->stquerymatch_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data_t, u64queriedkeyframeindex_)
      + sizeof(Data_t::u64queriedkeyframeindex_)
      - PROTOBUF_FIELD_OFFSET(Data_t, streferencelocation_)>(
          reinterpret_cast<char*>(&streferencelocation_),
          reinterpret_cast<char*>(&other->streferencelocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocalFeatureR::_Internal {
 public:
};

LocalFeatureR::LocalFeatureR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.localfeature.LocalFeatureR)
}
LocalFeatureR::LocalFeatureR(const LocalFeatureR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stdata_(from.stdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lfsppdb.localfeature.LocalFeatureR)
}

void LocalFeatureR::SharedCtor() {
}

LocalFeatureR::~LocalFeatureR() {
  // @@protoc_insertion_point(destructor:lfsppdb.localfeature.LocalFeatureR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalFeatureR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalFeatureR::ArenaDtor(void* object) {
  LocalFeatureR* _this = reinterpret_cast< LocalFeatureR* >(object);
  (void)_this;
}
void LocalFeatureR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalFeatureR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocalFeatureR::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.localfeature.LocalFeatureR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalFeatureR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lfsppdb.localfeature.Data_t stData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalFeatureR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.localfeature.LocalFeatureR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lfsppdb.localfeature.Data_t stData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.localfeature.LocalFeatureR)
  return target;
}

size_t LocalFeatureR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.localfeature.LocalFeatureR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.localfeature.Data_t stData = 1;
  total_size += 1UL * this->_internal_stdata_size();
  for (const auto& msg : this->stdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalFeatureR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.localfeature.LocalFeatureR)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalFeatureR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalFeatureR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.localfeature.LocalFeatureR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.localfeature.LocalFeatureR)
    MergeFrom(*source);
  }
}

void LocalFeatureR::MergeFrom(const LocalFeatureR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.localfeature.LocalFeatureR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stdata_.MergeFrom(from.stdata_);
}

void LocalFeatureR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.localfeature.LocalFeatureR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalFeatureR::CopyFrom(const LocalFeatureR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.localfeature.LocalFeatureR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalFeatureR::IsInitialized() const {
  return true;
}

void LocalFeatureR::InternalSwap(LocalFeatureR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdata_.InternalSwap(&other->stdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalFeatureR::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace localfeature
}  // namespace lfsppdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lfsppdb::localfeature::Matched_t* Arena::CreateMaybeMessage< ::lfsppdb::localfeature::Matched_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::localfeature::Matched_t >(arena);
}
template<> PROTOBUF_NOINLINE ::lfsppdb::localfeature::QueryMatch_t* Arena::CreateMaybeMessage< ::lfsppdb::localfeature::QueryMatch_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::localfeature::QueryMatch_t >(arena);
}
template<> PROTOBUF_NOINLINE ::lfsppdb::localfeature::Data_t* Arena::CreateMaybeMessage< ::lfsppdb::localfeature::Data_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::localfeature::Data_t >(arena);
}
template<> PROTOBUF_NOINLINE ::lfsppdb::localfeature::LocalFeatureR* Arena::CreateMaybeMessage< ::lfsppdb::localfeature::LocalFeatureR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::localfeature::LocalFeatureR >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
