// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lfsppdb_return_localfeature.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lfsppdb_5freturn_5flocalfeature_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lfsppdb_5freturn_5flocalfeature_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "prdb_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lfsppdb_5freturn_5flocalfeature_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_metadata_getter(int index);
namespace lfsppdb {
namespace localfeature {
class Data_t;
struct Data_tDefaultTypeInternal;
extern Data_tDefaultTypeInternal _Data_t_default_instance_;
class LocalFeatureR;
struct LocalFeatureRDefaultTypeInternal;
extern LocalFeatureRDefaultTypeInternal _LocalFeatureR_default_instance_;
class Matched_t;
struct Matched_tDefaultTypeInternal;
extern Matched_tDefaultTypeInternal _Matched_t_default_instance_;
class QueryMatch_t;
struct QueryMatch_tDefaultTypeInternal;
extern QueryMatch_tDefaultTypeInternal _QueryMatch_t_default_instance_;
}  // namespace localfeature
}  // namespace lfsppdb
PROTOBUF_NAMESPACE_OPEN
template<> ::lfsppdb::localfeature::Data_t* Arena::CreateMaybeMessage<::lfsppdb::localfeature::Data_t>(Arena*);
template<> ::lfsppdb::localfeature::LocalFeatureR* Arena::CreateMaybeMessage<::lfsppdb::localfeature::LocalFeatureR>(Arena*);
template<> ::lfsppdb::localfeature::Matched_t* Arena::CreateMaybeMessage<::lfsppdb::localfeature::Matched_t>(Arena*);
template<> ::lfsppdb::localfeature::QueryMatch_t* Arena::CreateMaybeMessage<::lfsppdb::localfeature::QueryMatch_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lfsppdb {
namespace localfeature {

// ===================================================================

class Matched_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.localfeature.Matched_t) */ {
 public:
  inline Matched_t() : Matched_t(nullptr) {}
  virtual ~Matched_t();
  explicit constexpr Matched_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matched_t(const Matched_t& from);
  Matched_t(Matched_t&& from) noexcept
    : Matched_t() {
    *this = ::std::move(from);
  }

  inline Matched_t& operator=(const Matched_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matched_t& operator=(Matched_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matched_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matched_t* internal_default_instance() {
    return reinterpret_cast<const Matched_t*>(
               &_Matched_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Matched_t& a, Matched_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Matched_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matched_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matched_t* New() const final {
    return CreateMaybeMessage<Matched_t>(nullptr);
  }

  Matched_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matched_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matched_t& from);
  void MergeFrom(const Matched_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matched_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.localfeature.Matched_t";
  }
  protected:
  explicit Matched_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStf32MatchedKeyPointWorldFieldNumber = 2,
    kStMatchedKeyPointImageFieldNumber = 3,
    kU16MatchedKeyPointIndexFieldNumber = 1,
    kF32DistanceFieldNumber = 4,
    kU8MatchedKeypointLocationIdxFieldNumber = 5,
  };
  // .prdb.meta.XYZ32_t stf32MatchedKeyPointWorld = 2;
  bool has_stf32matchedkeypointworld() const;
  private:
  bool _internal_has_stf32matchedkeypointworld() const;
  public:
  void clear_stf32matchedkeypointworld();
  const ::prdb::meta::XYZ32_t& stf32matchedkeypointworld() const;
  ::prdb::meta::XYZ32_t* release_stf32matchedkeypointworld();
  ::prdb::meta::XYZ32_t* mutable_stf32matchedkeypointworld();
  void set_allocated_stf32matchedkeypointworld(::prdb::meta::XYZ32_t* stf32matchedkeypointworld);
  private:
  const ::prdb::meta::XYZ32_t& _internal_stf32matchedkeypointworld() const;
  ::prdb::meta::XYZ32_t* _internal_mutable_stf32matchedkeypointworld();
  public:
  void unsafe_arena_set_allocated_stf32matchedkeypointworld(
      ::prdb::meta::XYZ32_t* stf32matchedkeypointworld);
  ::prdb::meta::XYZ32_t* unsafe_arena_release_stf32matchedkeypointworld();

  // .prdb.meta.UVPoint_t stMatchedKeyPointImage = 3;
  bool has_stmatchedkeypointimage() const;
  private:
  bool _internal_has_stmatchedkeypointimage() const;
  public:
  void clear_stmatchedkeypointimage();
  const ::prdb::meta::UVPoint_t& stmatchedkeypointimage() const;
  ::prdb::meta::UVPoint_t* release_stmatchedkeypointimage();
  ::prdb::meta::UVPoint_t* mutable_stmatchedkeypointimage();
  void set_allocated_stmatchedkeypointimage(::prdb::meta::UVPoint_t* stmatchedkeypointimage);
  private:
  const ::prdb::meta::UVPoint_t& _internal_stmatchedkeypointimage() const;
  ::prdb::meta::UVPoint_t* _internal_mutable_stmatchedkeypointimage();
  public:
  void unsafe_arena_set_allocated_stmatchedkeypointimage(
      ::prdb::meta::UVPoint_t* stmatchedkeypointimage);
  ::prdb::meta::UVPoint_t* unsafe_arena_release_stmatchedkeypointimage();

  // uint32 u16MatchedKeyPointIndex = 1;
  void clear_u16matchedkeypointindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 u16matchedkeypointindex() const;
  void set_u16matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u16matchedkeypointindex() const;
  void _internal_set_u16matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float f32Distance = 4;
  void clear_f32distance();
  float f32distance() const;
  void set_f32distance(float value);
  private:
  float _internal_f32distance() const;
  void _internal_set_f32distance(float value);
  public:

  // uint32 u8MatchedKeypointLocationIdx = 5;
  void clear_u8matchedkeypointlocationidx();
  ::PROTOBUF_NAMESPACE_ID::uint32 u8matchedkeypointlocationidx() const;
  void set_u8matchedkeypointlocationidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u8matchedkeypointlocationidx() const;
  void _internal_set_u8matchedkeypointlocationidx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lfsppdb.localfeature.Matched_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::prdb::meta::XYZ32_t* stf32matchedkeypointworld_;
  ::prdb::meta::UVPoint_t* stmatchedkeypointimage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u16matchedkeypointindex_;
  float f32distance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u8matchedkeypointlocationidx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto;
};
// -------------------------------------------------------------------

class QueryMatch_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.localfeature.QueryMatch_t) */ {
 public:
  inline QueryMatch_t() : QueryMatch_t(nullptr) {}
  virtual ~QueryMatch_t();
  explicit constexpr QueryMatch_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryMatch_t(const QueryMatch_t& from);
  QueryMatch_t(QueryMatch_t&& from) noexcept
    : QueryMatch_t() {
    *this = ::std::move(from);
  }

  inline QueryMatch_t& operator=(const QueryMatch_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMatch_t& operator=(QueryMatch_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryMatch_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryMatch_t* internal_default_instance() {
    return reinterpret_cast<const QueryMatch_t*>(
               &_QueryMatch_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryMatch_t& a, QueryMatch_t& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMatch_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryMatch_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryMatch_t* New() const final {
    return CreateMaybeMessage<QueryMatch_t>(nullptr);
  }

  QueryMatch_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryMatch_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryMatch_t& from);
  void MergeFrom(const QueryMatch_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMatch_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.localfeature.QueryMatch_t";
  }
  protected:
  explicit QueryMatch_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStMatchedTopKFieldNumber = 2,
    kU16QueriedKeyPointIndexFieldNumber = 1,
  };
  // repeated .lfsppdb.localfeature.Matched_t stMatchedTopK = 2;
  int stmatchedtopk_size() const;
  private:
  int _internal_stmatchedtopk_size() const;
  public:
  void clear_stmatchedtopk();
  ::lfsppdb::localfeature::Matched_t* mutable_stmatchedtopk(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Matched_t >*
      mutable_stmatchedtopk();
  private:
  const ::lfsppdb::localfeature::Matched_t& _internal_stmatchedtopk(int index) const;
  ::lfsppdb::localfeature::Matched_t* _internal_add_stmatchedtopk();
  public:
  const ::lfsppdb::localfeature::Matched_t& stmatchedtopk(int index) const;
  ::lfsppdb::localfeature::Matched_t* add_stmatchedtopk();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Matched_t >&
      stmatchedtopk() const;

  // uint32 u16QueriedKeyPointIndex = 1;
  void clear_u16queriedkeypointindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 u16queriedkeypointindex() const;
  void set_u16queriedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u16queriedkeypointindex() const;
  void _internal_set_u16queriedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lfsppdb.localfeature.QueryMatch_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Matched_t > stmatchedtopk_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u16queriedkeypointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto;
};
// -------------------------------------------------------------------

class Data_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.localfeature.Data_t) */ {
 public:
  inline Data_t() : Data_t(nullptr) {}
  virtual ~Data_t();
  explicit constexpr Data_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data_t(const Data_t& from);
  Data_t(Data_t&& from) noexcept
    : Data_t() {
    *this = ::std::move(from);
  }

  inline Data_t& operator=(const Data_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data_t& operator=(Data_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Data_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data_t* internal_default_instance() {
    return reinterpret_cast<const Data_t*>(
               &_Data_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Data_t& a, Data_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Data_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Data_t* New() const final {
    return CreateMaybeMessage<Data_t>(nullptr);
  }

  Data_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Data_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Data_t& from);
  void MergeFrom(const Data_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Data_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.localfeature.Data_t";
  }
  protected:
  explicit Data_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStQueryMatchFieldNumber = 3,
    kStReferenceLocationFieldNumber = 2,
    kU64QueriedKeyFrameIndexFieldNumber = 1,
  };
  // repeated .lfsppdb.localfeature.QueryMatch_t stQueryMatch = 3;
  int stquerymatch_size() const;
  private:
  int _internal_stquerymatch_size() const;
  public:
  void clear_stquerymatch();
  ::lfsppdb::localfeature::QueryMatch_t* mutable_stquerymatch(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::QueryMatch_t >*
      mutable_stquerymatch();
  private:
  const ::lfsppdb::localfeature::QueryMatch_t& _internal_stquerymatch(int index) const;
  ::lfsppdb::localfeature::QueryMatch_t* _internal_add_stquerymatch();
  public:
  const ::lfsppdb::localfeature::QueryMatch_t& stquerymatch(int index) const;
  ::lfsppdb::localfeature::QueryMatch_t* add_stquerymatch();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::QueryMatch_t >&
      stquerymatch() const;

  // .prdb.meta.XYZ64_t stReferenceLocation = 2;
  bool has_streferencelocation() const;
  private:
  bool _internal_has_streferencelocation() const;
  public:
  void clear_streferencelocation();
  const ::prdb::meta::XYZ64_t& streferencelocation() const;
  ::prdb::meta::XYZ64_t* release_streferencelocation();
  ::prdb::meta::XYZ64_t* mutable_streferencelocation();
  void set_allocated_streferencelocation(::prdb::meta::XYZ64_t* streferencelocation);
  private:
  const ::prdb::meta::XYZ64_t& _internal_streferencelocation() const;
  ::prdb::meta::XYZ64_t* _internal_mutable_streferencelocation();
  public:
  void unsafe_arena_set_allocated_streferencelocation(
      ::prdb::meta::XYZ64_t* streferencelocation);
  ::prdb::meta::XYZ64_t* unsafe_arena_release_streferencelocation();

  // uint64 u64QueriedKeyFrameIndex = 1;
  void clear_u64queriedkeyframeindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64queriedkeyframeindex() const;
  void set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64queriedkeyframeindex() const;
  void _internal_set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lfsppdb.localfeature.Data_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::QueryMatch_t > stquerymatch_;
  ::prdb::meta::XYZ64_t* streferencelocation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64queriedkeyframeindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatureR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lfsppdb.localfeature.LocalFeatureR) */ {
 public:
  inline LocalFeatureR() : LocalFeatureR(nullptr) {}
  virtual ~LocalFeatureR();
  explicit constexpr LocalFeatureR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatureR(const LocalFeatureR& from);
  LocalFeatureR(LocalFeatureR&& from) noexcept
    : LocalFeatureR() {
    *this = ::std::move(from);
  }

  inline LocalFeatureR& operator=(const LocalFeatureR& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatureR& operator=(LocalFeatureR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatureR& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeatureR* internal_default_instance() {
    return reinterpret_cast<const LocalFeatureR*>(
               &_LocalFeatureR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LocalFeatureR& a, LocalFeatureR& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatureR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatureR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatureR* New() const final {
    return CreateMaybeMessage<LocalFeatureR>(nullptr);
  }

  LocalFeatureR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatureR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatureR& from);
  void MergeFrom(const LocalFeatureR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatureR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lfsppdb.localfeature.LocalFeatureR";
  }
  protected:
  explicit LocalFeatureR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_lfsppdb_5freturn_5flocalfeature_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStDataFieldNumber = 1,
  };
  // repeated .lfsppdb.localfeature.Data_t stData = 1;
  int stdata_size() const;
  private:
  int _internal_stdata_size() const;
  public:
  void clear_stdata();
  ::lfsppdb::localfeature::Data_t* mutable_stdata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Data_t >*
      mutable_stdata();
  private:
  const ::lfsppdb::localfeature::Data_t& _internal_stdata(int index) const;
  ::lfsppdb::localfeature::Data_t* _internal_add_stdata();
  public:
  const ::lfsppdb::localfeature::Data_t& stdata(int index) const;
  ::lfsppdb::localfeature::Data_t* add_stdata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Data_t >&
      stdata() const;

  // @@protoc_insertion_point(class_scope:lfsppdb.localfeature.LocalFeatureR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Data_t > stdata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lfsppdb_5freturn_5flocalfeature_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Matched_t

// uint32 u16MatchedKeyPointIndex = 1;
inline void Matched_t::clear_u16matchedkeypointindex() {
  u16matchedkeypointindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matched_t::_internal_u16matchedkeypointindex() const {
  return u16matchedkeypointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matched_t::u16matchedkeypointindex() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Matched_t.u16MatchedKeyPointIndex)
  return _internal_u16matchedkeypointindex();
}
inline void Matched_t::_internal_set_u16matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u16matchedkeypointindex_ = value;
}
inline void Matched_t::set_u16matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u16matchedkeypointindex(value);
  // @@protoc_insertion_point(field_set:lfsppdb.localfeature.Matched_t.u16MatchedKeyPointIndex)
}

// .prdb.meta.XYZ32_t stf32MatchedKeyPointWorld = 2;
inline bool Matched_t::_internal_has_stf32matchedkeypointworld() const {
  return this != internal_default_instance() && stf32matchedkeypointworld_ != nullptr;
}
inline bool Matched_t::has_stf32matchedkeypointworld() const {
  return _internal_has_stf32matchedkeypointworld();
}
inline const ::prdb::meta::XYZ32_t& Matched_t::_internal_stf32matchedkeypointworld() const {
  const ::prdb::meta::XYZ32_t* p = stf32matchedkeypointworld_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ32_t&>(
      ::prdb::meta::_XYZ32_t_default_instance_);
}
inline const ::prdb::meta::XYZ32_t& Matched_t::stf32matchedkeypointworld() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Matched_t.stf32MatchedKeyPointWorld)
  return _internal_stf32matchedkeypointworld();
}
inline void Matched_t::unsafe_arena_set_allocated_stf32matchedkeypointworld(
    ::prdb::meta::XYZ32_t* stf32matchedkeypointworld) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf32matchedkeypointworld_);
  }
  stf32matchedkeypointworld_ = stf32matchedkeypointworld;
  if (stf32matchedkeypointworld) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.localfeature.Matched_t.stf32MatchedKeyPointWorld)
}
inline ::prdb::meta::XYZ32_t* Matched_t::release_stf32matchedkeypointworld() {
  
  ::prdb::meta::XYZ32_t* temp = stf32matchedkeypointworld_;
  stf32matchedkeypointworld_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ32_t* Matched_t::unsafe_arena_release_stf32matchedkeypointworld() {
  // @@protoc_insertion_point(field_release:lfsppdb.localfeature.Matched_t.stf32MatchedKeyPointWorld)
  
  ::prdb::meta::XYZ32_t* temp = stf32matchedkeypointworld_;
  stf32matchedkeypointworld_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ32_t* Matched_t::_internal_mutable_stf32matchedkeypointworld() {
  
  if (stf32matchedkeypointworld_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ32_t>(GetArena());
    stf32matchedkeypointworld_ = p;
  }
  return stf32matchedkeypointworld_;
}
inline ::prdb::meta::XYZ32_t* Matched_t::mutable_stf32matchedkeypointworld() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.localfeature.Matched_t.stf32MatchedKeyPointWorld)
  return _internal_mutable_stf32matchedkeypointworld();
}
inline void Matched_t::set_allocated_stf32matchedkeypointworld(::prdb::meta::XYZ32_t* stf32matchedkeypointworld) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf32matchedkeypointworld_);
  }
  if (stf32matchedkeypointworld) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stf32matchedkeypointworld)->GetArena();
    if (message_arena != submessage_arena) {
      stf32matchedkeypointworld = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stf32matchedkeypointworld, submessage_arena);
    }
    
  } else {
    
  }
  stf32matchedkeypointworld_ = stf32matchedkeypointworld;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.localfeature.Matched_t.stf32MatchedKeyPointWorld)
}

// .prdb.meta.UVPoint_t stMatchedKeyPointImage = 3;
inline bool Matched_t::_internal_has_stmatchedkeypointimage() const {
  return this != internal_default_instance() && stmatchedkeypointimage_ != nullptr;
}
inline bool Matched_t::has_stmatchedkeypointimage() const {
  return _internal_has_stmatchedkeypointimage();
}
inline const ::prdb::meta::UVPoint_t& Matched_t::_internal_stmatchedkeypointimage() const {
  const ::prdb::meta::UVPoint_t* p = stmatchedkeypointimage_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::UVPoint_t&>(
      ::prdb::meta::_UVPoint_t_default_instance_);
}
inline const ::prdb::meta::UVPoint_t& Matched_t::stmatchedkeypointimage() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Matched_t.stMatchedKeyPointImage)
  return _internal_stmatchedkeypointimage();
}
inline void Matched_t::unsafe_arena_set_allocated_stmatchedkeypointimage(
    ::prdb::meta::UVPoint_t* stmatchedkeypointimage) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stmatchedkeypointimage_);
  }
  stmatchedkeypointimage_ = stmatchedkeypointimage;
  if (stmatchedkeypointimage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.localfeature.Matched_t.stMatchedKeyPointImage)
}
inline ::prdb::meta::UVPoint_t* Matched_t::release_stmatchedkeypointimage() {
  
  ::prdb::meta::UVPoint_t* temp = stmatchedkeypointimage_;
  stmatchedkeypointimage_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::UVPoint_t* Matched_t::unsafe_arena_release_stmatchedkeypointimage() {
  // @@protoc_insertion_point(field_release:lfsppdb.localfeature.Matched_t.stMatchedKeyPointImage)
  
  ::prdb::meta::UVPoint_t* temp = stmatchedkeypointimage_;
  stmatchedkeypointimage_ = nullptr;
  return temp;
}
inline ::prdb::meta::UVPoint_t* Matched_t::_internal_mutable_stmatchedkeypointimage() {
  
  if (stmatchedkeypointimage_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::UVPoint_t>(GetArena());
    stmatchedkeypointimage_ = p;
  }
  return stmatchedkeypointimage_;
}
inline ::prdb::meta::UVPoint_t* Matched_t::mutable_stmatchedkeypointimage() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.localfeature.Matched_t.stMatchedKeyPointImage)
  return _internal_mutable_stmatchedkeypointimage();
}
inline void Matched_t::set_allocated_stmatchedkeypointimage(::prdb::meta::UVPoint_t* stmatchedkeypointimage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stmatchedkeypointimage_);
  }
  if (stmatchedkeypointimage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stmatchedkeypointimage)->GetArena();
    if (message_arena != submessage_arena) {
      stmatchedkeypointimage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stmatchedkeypointimage, submessage_arena);
    }
    
  } else {
    
  }
  stmatchedkeypointimage_ = stmatchedkeypointimage;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.localfeature.Matched_t.stMatchedKeyPointImage)
}

// float f32Distance = 4;
inline void Matched_t::clear_f32distance() {
  f32distance_ = 0;
}
inline float Matched_t::_internal_f32distance() const {
  return f32distance_;
}
inline float Matched_t::f32distance() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Matched_t.f32Distance)
  return _internal_f32distance();
}
inline void Matched_t::_internal_set_f32distance(float value) {
  
  f32distance_ = value;
}
inline void Matched_t::set_f32distance(float value) {
  _internal_set_f32distance(value);
  // @@protoc_insertion_point(field_set:lfsppdb.localfeature.Matched_t.f32Distance)
}

// uint32 u8MatchedKeypointLocationIdx = 5;
inline void Matched_t::clear_u8matchedkeypointlocationidx() {
  u8matchedkeypointlocationidx_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matched_t::_internal_u8matchedkeypointlocationidx() const {
  return u8matchedkeypointlocationidx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Matched_t::u8matchedkeypointlocationidx() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Matched_t.u8MatchedKeypointLocationIdx)
  return _internal_u8matchedkeypointlocationidx();
}
inline void Matched_t::_internal_set_u8matchedkeypointlocationidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u8matchedkeypointlocationidx_ = value;
}
inline void Matched_t::set_u8matchedkeypointlocationidx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u8matchedkeypointlocationidx(value);
  // @@protoc_insertion_point(field_set:lfsppdb.localfeature.Matched_t.u8MatchedKeypointLocationIdx)
}

// -------------------------------------------------------------------

// QueryMatch_t

// uint32 u16QueriedKeyPointIndex = 1;
inline void QueryMatch_t::clear_u16queriedkeypointindex() {
  u16queriedkeypointindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryMatch_t::_internal_u16queriedkeypointindex() const {
  return u16queriedkeypointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryMatch_t::u16queriedkeypointindex() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.QueryMatch_t.u16QueriedKeyPointIndex)
  return _internal_u16queriedkeypointindex();
}
inline void QueryMatch_t::_internal_set_u16queriedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u16queriedkeypointindex_ = value;
}
inline void QueryMatch_t::set_u16queriedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u16queriedkeypointindex(value);
  // @@protoc_insertion_point(field_set:lfsppdb.localfeature.QueryMatch_t.u16QueriedKeyPointIndex)
}

// repeated .lfsppdb.localfeature.Matched_t stMatchedTopK = 2;
inline int QueryMatch_t::_internal_stmatchedtopk_size() const {
  return stmatchedtopk_.size();
}
inline int QueryMatch_t::stmatchedtopk_size() const {
  return _internal_stmatchedtopk_size();
}
inline void QueryMatch_t::clear_stmatchedtopk() {
  stmatchedtopk_.Clear();
}
inline ::lfsppdb::localfeature::Matched_t* QueryMatch_t::mutable_stmatchedtopk(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.localfeature.QueryMatch_t.stMatchedTopK)
  return stmatchedtopk_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Matched_t >*
QueryMatch_t::mutable_stmatchedtopk() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.localfeature.QueryMatch_t.stMatchedTopK)
  return &stmatchedtopk_;
}
inline const ::lfsppdb::localfeature::Matched_t& QueryMatch_t::_internal_stmatchedtopk(int index) const {
  return stmatchedtopk_.Get(index);
}
inline const ::lfsppdb::localfeature::Matched_t& QueryMatch_t::stmatchedtopk(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.QueryMatch_t.stMatchedTopK)
  return _internal_stmatchedtopk(index);
}
inline ::lfsppdb::localfeature::Matched_t* QueryMatch_t::_internal_add_stmatchedtopk() {
  return stmatchedtopk_.Add();
}
inline ::lfsppdb::localfeature::Matched_t* QueryMatch_t::add_stmatchedtopk() {
  // @@protoc_insertion_point(field_add:lfsppdb.localfeature.QueryMatch_t.stMatchedTopK)
  return _internal_add_stmatchedtopk();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Matched_t >&
QueryMatch_t::stmatchedtopk() const {
  // @@protoc_insertion_point(field_list:lfsppdb.localfeature.QueryMatch_t.stMatchedTopK)
  return stmatchedtopk_;
}

// -------------------------------------------------------------------

// Data_t

// uint64 u64QueriedKeyFrameIndex = 1;
inline void Data_t::clear_u64queriedkeyframeindex() {
  u64queriedkeyframeindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Data_t::_internal_u64queriedkeyframeindex() const {
  return u64queriedkeyframeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Data_t::u64queriedkeyframeindex() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Data_t.u64QueriedKeyFrameIndex)
  return _internal_u64queriedkeyframeindex();
}
inline void Data_t::_internal_set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64queriedkeyframeindex_ = value;
}
inline void Data_t::set_u64queriedkeyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64queriedkeyframeindex(value);
  // @@protoc_insertion_point(field_set:lfsppdb.localfeature.Data_t.u64QueriedKeyFrameIndex)
}

// .prdb.meta.XYZ64_t stReferenceLocation = 2;
inline bool Data_t::_internal_has_streferencelocation() const {
  return this != internal_default_instance() && streferencelocation_ != nullptr;
}
inline bool Data_t::has_streferencelocation() const {
  return _internal_has_streferencelocation();
}
inline const ::prdb::meta::XYZ64_t& Data_t::_internal_streferencelocation() const {
  const ::prdb::meta::XYZ64_t* p = streferencelocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ64_t&>(
      ::prdb::meta::_XYZ64_t_default_instance_);
}
inline const ::prdb::meta::XYZ64_t& Data_t::streferencelocation() const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Data_t.stReferenceLocation)
  return _internal_streferencelocation();
}
inline void Data_t::unsafe_arena_set_allocated_streferencelocation(
    ::prdb::meta::XYZ64_t* streferencelocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streferencelocation_);
  }
  streferencelocation_ = streferencelocation;
  if (streferencelocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:lfsppdb.localfeature.Data_t.stReferenceLocation)
}
inline ::prdb::meta::XYZ64_t* Data_t::release_streferencelocation() {
  
  ::prdb::meta::XYZ64_t* temp = streferencelocation_;
  streferencelocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ64_t* Data_t::unsafe_arena_release_streferencelocation() {
  // @@protoc_insertion_point(field_release:lfsppdb.localfeature.Data_t.stReferenceLocation)
  
  ::prdb::meta::XYZ64_t* temp = streferencelocation_;
  streferencelocation_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ64_t* Data_t::_internal_mutable_streferencelocation() {
  
  if (streferencelocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ64_t>(GetArena());
    streferencelocation_ = p;
  }
  return streferencelocation_;
}
inline ::prdb::meta::XYZ64_t* Data_t::mutable_streferencelocation() {
  // @@protoc_insertion_point(field_mutable:lfsppdb.localfeature.Data_t.stReferenceLocation)
  return _internal_mutable_streferencelocation();
}
inline void Data_t::set_allocated_streferencelocation(::prdb::meta::XYZ64_t* streferencelocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(streferencelocation_);
  }
  if (streferencelocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streferencelocation)->GetArena();
    if (message_arena != submessage_arena) {
      streferencelocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streferencelocation, submessage_arena);
    }
    
  } else {
    
  }
  streferencelocation_ = streferencelocation;
  // @@protoc_insertion_point(field_set_allocated:lfsppdb.localfeature.Data_t.stReferenceLocation)
}

// repeated .lfsppdb.localfeature.QueryMatch_t stQueryMatch = 3;
inline int Data_t::_internal_stquerymatch_size() const {
  return stquerymatch_.size();
}
inline int Data_t::stquerymatch_size() const {
  return _internal_stquerymatch_size();
}
inline void Data_t::clear_stquerymatch() {
  stquerymatch_.Clear();
}
inline ::lfsppdb::localfeature::QueryMatch_t* Data_t::mutable_stquerymatch(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.localfeature.Data_t.stQueryMatch)
  return stquerymatch_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::QueryMatch_t >*
Data_t::mutable_stquerymatch() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.localfeature.Data_t.stQueryMatch)
  return &stquerymatch_;
}
inline const ::lfsppdb::localfeature::QueryMatch_t& Data_t::_internal_stquerymatch(int index) const {
  return stquerymatch_.Get(index);
}
inline const ::lfsppdb::localfeature::QueryMatch_t& Data_t::stquerymatch(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.Data_t.stQueryMatch)
  return _internal_stquerymatch(index);
}
inline ::lfsppdb::localfeature::QueryMatch_t* Data_t::_internal_add_stquerymatch() {
  return stquerymatch_.Add();
}
inline ::lfsppdb::localfeature::QueryMatch_t* Data_t::add_stquerymatch() {
  // @@protoc_insertion_point(field_add:lfsppdb.localfeature.Data_t.stQueryMatch)
  return _internal_add_stquerymatch();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::QueryMatch_t >&
Data_t::stquerymatch() const {
  // @@protoc_insertion_point(field_list:lfsppdb.localfeature.Data_t.stQueryMatch)
  return stquerymatch_;
}

// -------------------------------------------------------------------

// LocalFeatureR

// repeated .lfsppdb.localfeature.Data_t stData = 1;
inline int LocalFeatureR::_internal_stdata_size() const {
  return stdata_.size();
}
inline int LocalFeatureR::stdata_size() const {
  return _internal_stdata_size();
}
inline void LocalFeatureR::clear_stdata() {
  stdata_.Clear();
}
inline ::lfsppdb::localfeature::Data_t* LocalFeatureR::mutable_stdata(int index) {
  // @@protoc_insertion_point(field_mutable:lfsppdb.localfeature.LocalFeatureR.stData)
  return stdata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Data_t >*
LocalFeatureR::mutable_stdata() {
  // @@protoc_insertion_point(field_mutable_list:lfsppdb.localfeature.LocalFeatureR.stData)
  return &stdata_;
}
inline const ::lfsppdb::localfeature::Data_t& LocalFeatureR::_internal_stdata(int index) const {
  return stdata_.Get(index);
}
inline const ::lfsppdb::localfeature::Data_t& LocalFeatureR::stdata(int index) const {
  // @@protoc_insertion_point(field_get:lfsppdb.localfeature.LocalFeatureR.stData)
  return _internal_stdata(index);
}
inline ::lfsppdb::localfeature::Data_t* LocalFeatureR::_internal_add_stdata() {
  return stdata_.Add();
}
inline ::lfsppdb::localfeature::Data_t* LocalFeatureR::add_stdata() {
  // @@protoc_insertion_point(field_add:lfsppdb.localfeature.LocalFeatureR.stData)
  return _internal_add_stdata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lfsppdb::localfeature::Data_t >&
LocalFeatureR::stdata() const {
  // @@protoc_insertion_point(field_list:lfsppdb.localfeature.LocalFeatureR.stData)
  return stdata_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localfeature
}  // namespace lfsppdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lfsppdb_5freturn_5flocalfeature_2eproto
