// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lfsppdb_return_keyframeindex.proto

#include "lfsppdb_return_keyframeindex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace lfsppdb {
namespace keyframeindex {
constexpr Data_t::Data_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstkeypoint_()
  , streferencelocation_(nullptr)
  , u64queriedkeyframeindex_(PROTOBUF_ULONGLONG(0)){}
struct Data_tDefaultTypeInternal {
  constexpr Data_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Data_tDefaultTypeInternal() {}
  union {
    Data_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Data_tDefaultTypeInternal _Data_t_default_instance_;
constexpr KeyFrameIndexR::KeyFrameIndexR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stdata_(){}
struct KeyFrameIndexRDefaultTypeInternal {
  constexpr KeyFrameIndexRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyFrameIndexRDefaultTypeInternal() {}
  union {
    KeyFrameIndexR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyFrameIndexRDefaultTypeInternal _KeyFrameIndexR_default_instance_;
}  // namespace keyframeindex
}  // namespace lfsppdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_lfsppdb_5freturn_5fkeyframeindex_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_lfsppdb_5freturn_5fkeyframeindex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_lfsppdb_5freturn_5fkeyframeindex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_lfsppdb_5freturn_5fkeyframeindex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::keyframeindex::Data_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::keyframeindex::Data_t, u64queriedkeyframeindex_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::keyframeindex::Data_t, streferencelocation_),
  PROTOBUF_FIELD_OFFSET(::lfsppdb::keyframeindex::Data_t, arstkeypoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::keyframeindex::KeyFrameIndexR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lfsppdb::keyframeindex::KeyFrameIndexR, stdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lfsppdb::keyframeindex::Data_t)},
  { 8, -1, sizeof(::lfsppdb::keyframeindex::KeyFrameIndexR)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::keyframeindex::_Data_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lfsppdb::keyframeindex::_KeyFrameIndexR_default_instance_),
};

const char descriptor_table_protodef_lfsppdb_5freturn_5fkeyframeindex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"lfsppdb_return_keyframeindex.proto\022\025lf"
  "sppdb.keyframeindex\032\017prdb_meta.proto\032\rlf"
  "sppdb.proto\"\205\001\n\006Data_t\022\037\n\027u64QueriedKeyF"
  "rameIndex\030\001 \001(\004\022/\n\023stReferenceLocation\030\002"
  " \001(\0132\022.prdb.meta.XYZ64_t\022)\n\014arstKeyPoint"
  "\030\003 \003(\0132\023.lfsppdb.KeyPoint_t\"\?\n\016KeyFrameI"
  "ndexR\022-\n\006stData\030\001 \003(\0132\035.lfsppdb.keyframe"
  "index.Data_tB\016\n\014dbms.lfsppdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_deps[2] = {
  &::descriptor_table_lfsppdb_2eproto,
  &::descriptor_table_prdb_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto = {
  false, false, 316, descriptor_table_protodef_lfsppdb_5freturn_5fkeyframeindex_2eproto, "lfsppdb_return_keyframeindex.proto", 
  &descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_once, descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_lfsppdb_5freturn_5fkeyframeindex_2eproto::offsets,
  file_level_metadata_lfsppdb_5freturn_5fkeyframeindex_2eproto, file_level_enum_descriptors_lfsppdb_5freturn_5fkeyframeindex_2eproto, file_level_service_descriptors_lfsppdb_5freturn_5fkeyframeindex_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto);
  return descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_lfsppdb_5freturn_5fkeyframeindex_2eproto(&descriptor_table_lfsppdb_5freturn_5fkeyframeindex_2eproto);
namespace lfsppdb {
namespace keyframeindex {

// ===================================================================

class Data_t::_Internal {
 public:
  static const ::prdb::meta::XYZ64_t& streferencelocation(const Data_t* msg);
};

const ::prdb::meta::XYZ64_t&
Data_t::_Internal::streferencelocation(const Data_t* msg) {
  return *msg->streferencelocation_;
}
void Data_t::clear_streferencelocation() {
  if (GetArena() == nullptr && streferencelocation_ != nullptr) {
    delete streferencelocation_;
  }
  streferencelocation_ = nullptr;
}
void Data_t::clear_arstkeypoint() {
  arstkeypoint_.Clear();
}
Data_t::Data_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstkeypoint_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.keyframeindex.Data_t)
}
Data_t::Data_t(const Data_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstkeypoint_(from.arstkeypoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streferencelocation()) {
    streferencelocation_ = new ::prdb::meta::XYZ64_t(*from.streferencelocation_);
  } else {
    streferencelocation_ = nullptr;
  }
  u64queriedkeyframeindex_ = from.u64queriedkeyframeindex_;
  // @@protoc_insertion_point(copy_constructor:lfsppdb.keyframeindex.Data_t)
}

void Data_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&streferencelocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u64queriedkeyframeindex_) -
    reinterpret_cast<char*>(&streferencelocation_)) + sizeof(u64queriedkeyframeindex_));
}

Data_t::~Data_t() {
  // @@protoc_insertion_point(destructor:lfsppdb.keyframeindex.Data_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Data_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streferencelocation_;
}

void Data_t::ArenaDtor(void* object) {
  Data_t* _this = reinterpret_cast< Data_t* >(object);
  (void)_this;
}
void Data_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data_t::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.keyframeindex.Data_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstkeypoint_.Clear();
  if (GetArena() == nullptr && streferencelocation_ != nullptr) {
    delete streferencelocation_;
  }
  streferencelocation_ = nullptr;
  u64queriedkeyframeindex_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64QueriedKeyFrameIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64queriedkeyframeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ64_t stReferenceLocation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_streferencelocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lfsppdb.KeyPoint_t arstKeyPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstkeypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.keyframeindex.Data_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64QueriedKeyFrameIndex = 1;
  if (this->u64queriedkeyframeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64queriedkeyframeindex(), target);
  }

  // .prdb.meta.XYZ64_t stReferenceLocation = 2;
  if (this->has_streferencelocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::streferencelocation(this), target, stream);
  }

  // repeated .lfsppdb.KeyPoint_t arstKeyPoint = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstkeypoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_arstkeypoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.keyframeindex.Data_t)
  return target;
}

size_t Data_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.keyframeindex.Data_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.KeyPoint_t arstKeyPoint = 3;
  total_size += 1UL * this->_internal_arstkeypoint_size();
  for (const auto& msg : this->arstkeypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .prdb.meta.XYZ64_t stReferenceLocation = 2;
  if (this->has_streferencelocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streferencelocation_);
  }

  // uint64 u64QueriedKeyFrameIndex = 1;
  if (this->u64queriedkeyframeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64queriedkeyframeindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.keyframeindex.Data_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.keyframeindex.Data_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.keyframeindex.Data_t)
    MergeFrom(*source);
  }
}

void Data_t::MergeFrom(const Data_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.keyframeindex.Data_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstkeypoint_.MergeFrom(from.arstkeypoint_);
  if (from.has_streferencelocation()) {
    _internal_mutable_streferencelocation()->::prdb::meta::XYZ64_t::MergeFrom(from._internal_streferencelocation());
  }
  if (from.u64queriedkeyframeindex() != 0) {
    _internal_set_u64queriedkeyframeindex(from._internal_u64queriedkeyframeindex());
  }
}

void Data_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.keyframeindex.Data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_t::CopyFrom(const Data_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.keyframeindex.Data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_t::IsInitialized() const {
  return true;
}

void Data_t::InternalSwap(Data_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstkeypoint_.InternalSwap(&other->arstkeypoint_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data_t, u64queriedkeyframeindex_)
      + sizeof(Data_t::u64queriedkeyframeindex_)
      - PROTOBUF_FIELD_OFFSET(Data_t, streferencelocation_)>(
          reinterpret_cast<char*>(&streferencelocation_),
          reinterpret_cast<char*>(&other->streferencelocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyFrameIndexR::_Internal {
 public:
};

KeyFrameIndexR::KeyFrameIndexR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:lfsppdb.keyframeindex.KeyFrameIndexR)
}
KeyFrameIndexR::KeyFrameIndexR(const KeyFrameIndexR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stdata_(from.stdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lfsppdb.keyframeindex.KeyFrameIndexR)
}

void KeyFrameIndexR::SharedCtor() {
}

KeyFrameIndexR::~KeyFrameIndexR() {
  // @@protoc_insertion_point(destructor:lfsppdb.keyframeindex.KeyFrameIndexR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyFrameIndexR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyFrameIndexR::ArenaDtor(void* object) {
  KeyFrameIndexR* _this = reinterpret_cast< KeyFrameIndexR* >(object);
  (void)_this;
}
void KeyFrameIndexR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyFrameIndexR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyFrameIndexR::Clear() {
// @@protoc_insertion_point(message_clear_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyFrameIndexR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lfsppdb.keyframeindex.Data_t stData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyFrameIndexR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lfsppdb.keyframeindex.Data_t stData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lfsppdb.keyframeindex.KeyFrameIndexR)
  return target;
}

size_t KeyFrameIndexR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lfsppdb.keyframeindex.Data_t stData = 1;
  total_size += 1UL * this->_internal_stdata_size();
  for (const auto& msg : this->stdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyFrameIndexR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyFrameIndexR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyFrameIndexR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lfsppdb.keyframeindex.KeyFrameIndexR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lfsppdb.keyframeindex.KeyFrameIndexR)
    MergeFrom(*source);
  }
}

void KeyFrameIndexR::MergeFrom(const KeyFrameIndexR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stdata_.MergeFrom(from.stdata_);
}

void KeyFrameIndexR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyFrameIndexR::CopyFrom(const KeyFrameIndexR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lfsppdb.keyframeindex.KeyFrameIndexR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyFrameIndexR::IsInitialized() const {
  return true;
}

void KeyFrameIndexR::InternalSwap(KeyFrameIndexR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdata_.InternalSwap(&other->stdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyFrameIndexR::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace keyframeindex
}  // namespace lfsppdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lfsppdb::keyframeindex::Data_t* Arena::CreateMaybeMessage< ::lfsppdb::keyframeindex::Data_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::keyframeindex::Data_t >(arena);
}
template<> PROTOBUF_NOINLINE ::lfsppdb::keyframeindex::KeyFrameIndexR* Arena::CreateMaybeMessage< ::lfsppdb::keyframeindex::KeyFrameIndexR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::lfsppdb::keyframeindex::KeyFrameIndexR >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
