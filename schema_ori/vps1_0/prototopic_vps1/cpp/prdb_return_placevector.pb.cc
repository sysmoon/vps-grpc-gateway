// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_return_placevector.proto

#include "prdb_return_placevector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace prdb {
namespace placevector {
constexpr Data_t::Data_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stmeta_(nullptr)
  , f32distance_(0){}
struct Data_tDefaultTypeInternal {
  constexpr Data_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Data_tDefaultTypeInternal() {}
  union {
    Data_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Data_tDefaultTypeInternal _Data_t_default_instance_;
constexpr PlaceVectorR::PlaceVectorR(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stdata_(){}
struct PlaceVectorRDefaultTypeInternal {
  constexpr PlaceVectorRDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorRDefaultTypeInternal() {}
  union {
    PlaceVectorR _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorRDefaultTypeInternal _PlaceVectorR_default_instance_;
}  // namespace placevector
}  // namespace prdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prdb_5freturn_5fplacevector_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prdb_5freturn_5fplacevector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prdb_5freturn_5fplacevector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prdb_5freturn_5fplacevector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::Data_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::Data_t, stmeta_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::Data_t, f32distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorR, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorR, stdata_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prdb::placevector::Data_t)},
  { 7, -1, sizeof(::prdb::placevector::PlaceVectorR)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::placevector::_Data_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::placevector::_PlaceVectorR_default_instance_),
};

const char descriptor_table_protodef_prdb_5freturn_5fplacevector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035prdb_return_placevector.proto\022\020prdb.pl"
  "acevector\032\017prdb_meta.proto\"@\n\006Data_t\022!\n\006"
  "stMeta\030\001 \001(\0132\021.prdb.meta.Meta_t\022\023\n\013f32Di"
  "stance\030\002 \001(\002\"8\n\014PlaceVectorR\022(\n\006stData\030\001"
  " \003(\0132\030.prdb.placevector.Data_tB\013\n\tdbms.p"
  "rdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prdb_5freturn_5fplacevector_2eproto_deps[1] = {
  &::descriptor_table_prdb_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prdb_5freturn_5fplacevector_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5freturn_5fplacevector_2eproto = {
  false, false, 211, descriptor_table_protodef_prdb_5freturn_5fplacevector_2eproto, "prdb_return_placevector.proto", 
  &descriptor_table_prdb_5freturn_5fplacevector_2eproto_once, descriptor_table_prdb_5freturn_5fplacevector_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_prdb_5freturn_5fplacevector_2eproto::offsets,
  file_level_metadata_prdb_5freturn_5fplacevector_2eproto, file_level_enum_descriptors_prdb_5freturn_5fplacevector_2eproto, file_level_service_descriptors_prdb_5freturn_5fplacevector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_prdb_5freturn_5fplacevector_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prdb_5freturn_5fplacevector_2eproto);
  return descriptor_table_prdb_5freturn_5fplacevector_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prdb_5freturn_5fplacevector_2eproto(&descriptor_table_prdb_5freturn_5fplacevector_2eproto);
namespace prdb {
namespace placevector {

// ===================================================================

class Data_t::_Internal {
 public:
  static const ::prdb::meta::Meta_t& stmeta(const Data_t* msg);
};

const ::prdb::meta::Meta_t&
Data_t::_Internal::stmeta(const Data_t* msg) {
  return *msg->stmeta_;
}
void Data_t::clear_stmeta() {
  if (GetArena() == nullptr && stmeta_ != nullptr) {
    delete stmeta_;
  }
  stmeta_ = nullptr;
}
Data_t::Data_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.placevector.Data_t)
}
Data_t::Data_t(const Data_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stmeta()) {
    stmeta_ = new ::prdb::meta::Meta_t(*from.stmeta_);
  } else {
    stmeta_ = nullptr;
  }
  f32distance_ = from.f32distance_;
  // @@protoc_insertion_point(copy_constructor:prdb.placevector.Data_t)
}

void Data_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stmeta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32distance_) -
    reinterpret_cast<char*>(&stmeta_)) + sizeof(f32distance_));
}

Data_t::~Data_t() {
  // @@protoc_insertion_point(destructor:prdb.placevector.Data_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Data_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stmeta_;
}

void Data_t::ArenaDtor(void* object) {
  Data_t* _this = reinterpret_cast< Data_t* >(object);
  (void)_this;
}
void Data_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data_t::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.placevector.Data_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stmeta_ != nullptr) {
    delete stmeta_;
  }
  stmeta_ = nullptr;
  f32distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .prdb.meta.Meta_t stMeta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmeta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32Distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Data_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.placevector.Data_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prdb.meta.Meta_t stMeta = 1;
  if (this->has_stmeta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stmeta(this), target, stream);
  }

  // float f32Distance = 2;
  if (!(this->f32distance() <= 0 && this->f32distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.placevector.Data_t)
  return target;
}

size_t Data_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.placevector.Data_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prdb.meta.Meta_t stMeta = 1;
  if (this->has_stmeta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmeta_);
  }

  // float f32Distance = 2;
  if (!(this->f32distance() <= 0 && this->f32distance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.placevector.Data_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Data_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Data_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.placevector.Data_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.placevector.Data_t)
    MergeFrom(*source);
  }
}

void Data_t::MergeFrom(const Data_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.placevector.Data_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stmeta()) {
    _internal_mutable_stmeta()->::prdb::meta::Meta_t::MergeFrom(from._internal_stmeta());
  }
  if (!(from.f32distance() <= 0 && from.f32distance() >= 0)) {
    _internal_set_f32distance(from._internal_f32distance());
  }
}

void Data_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.placevector.Data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Data_t::CopyFrom(const Data_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.placevector.Data_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_t::IsInitialized() const {
  return true;
}

void Data_t::InternalSwap(Data_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data_t, f32distance_)
      + sizeof(Data_t::f32distance_)
      - PROTOBUF_FIELD_OFFSET(Data_t, stmeta_)>(
          reinterpret_cast<char*>(&stmeta_),
          reinterpret_cast<char*>(&other->stmeta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceVectorR::_Internal {
 public:
};

PlaceVectorR::PlaceVectorR(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stdata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.placevector.PlaceVectorR)
}
PlaceVectorR::PlaceVectorR(const PlaceVectorR& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stdata_(from.stdata_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prdb.placevector.PlaceVectorR)
}

void PlaceVectorR::SharedCtor() {
}

PlaceVectorR::~PlaceVectorR() {
  // @@protoc_insertion_point(destructor:prdb.placevector.PlaceVectorR)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorR::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceVectorR::ArenaDtor(void* object) {
  PlaceVectorR* _this = reinterpret_cast< PlaceVectorR* >(object);
  (void)_this;
}
void PlaceVectorR::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorR::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorR::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.placevector.PlaceVectorR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stdata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorR::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .prdb.placevector.Data_t stData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stdata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorR::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.placevector.PlaceVectorR)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prdb.placevector.Data_t stData = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stdata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stdata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.placevector.PlaceVectorR)
  return target;
}

size_t PlaceVectorR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.placevector.PlaceVectorR)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prdb.placevector.Data_t stData = 1;
  total_size += 1UL * this->_internal_stdata_size();
  for (const auto& msg : this->stdata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorR::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.placevector.PlaceVectorR)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorR* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorR>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.placevector.PlaceVectorR)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.placevector.PlaceVectorR)
    MergeFrom(*source);
  }
}

void PlaceVectorR::MergeFrom(const PlaceVectorR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.placevector.PlaceVectorR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stdata_.MergeFrom(from.stdata_);
}

void PlaceVectorR::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.placevector.PlaceVectorR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorR::CopyFrom(const PlaceVectorR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.placevector.PlaceVectorR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorR::IsInitialized() const {
  return true;
}

void PlaceVectorR::InternalSwap(PlaceVectorR* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stdata_.InternalSwap(&other->stdata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorR::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace placevector
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prdb::placevector::Data_t* Arena::CreateMaybeMessage< ::prdb::placevector::Data_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::placevector::Data_t >(arena);
}
template<> PROTOBUF_NOINLINE ::prdb::placevector::PlaceVectorR* Arena::CreateMaybeMessage< ::prdb::placevector::PlaceVectorR >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::placevector::PlaceVectorR >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
