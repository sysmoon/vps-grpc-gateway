// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: vp_msg.proto

package SensorData

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VPHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StrSchemaVer   string    `protobuf:"bytes,1,opt,name=strSchemaVer,proto3" json:"strSchemaVer,omitempty"`
	StrDeviceName  string    `protobuf:"bytes,2,opt,name=strDeviceName,proto3" json:"strDeviceName,omitempty"`
	StrOSInfo      string    `protobuf:"bytes,3,opt,name=strOSInfo,proto3" json:"strOSInfo,omitempty"`
	Ars32TelcoPCI  []int32   `protobuf:"varint,4,rep,packed,name=ars32TelcoPCI,proto3" json:"ars32TelcoPCI,omitempty"`
	S32TelcoRSSI   int32     `protobuf:"varint,5,opt,name=s32TelcoRSSI,proto3" json:"s32TelcoRSSI,omitempty"`
	U64TSSend      uint64    `protobuf:"varint,6,opt,name=u64TSSend,proto3" json:"u64TSSend,omitempty"`
	Arf64LastLoc   []float64 `protobuf:"fixed64,7,rep,packed,name=arf64LastLoc,proto3" json:"arf64LastLoc,omitempty"`
	Arf32Extrinsic []float32 `protobuf:"fixed32,8,rep,packed,name=arf32Extrinsic,proto3" json:"arf32Extrinsic,omitempty"`
	StrTargetEnv   string    `protobuf:"bytes,9,opt,name=strTargetEnv,proto3" json:"strTargetEnv,omitempty"`
}

func (x *VPHeader) Reset() {
	*x = VPHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vp_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPHeader) ProtoMessage() {}

func (x *VPHeader) ProtoReflect() protoreflect.Message {
	mi := &file_vp_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPHeader.ProtoReflect.Descriptor instead.
func (*VPHeader) Descriptor() ([]byte, []int) {
	return file_vp_msg_proto_rawDescGZIP(), []int{0}
}

func (x *VPHeader) GetStrSchemaVer() string {
	if x != nil {
		return x.StrSchemaVer
	}
	return ""
}

func (x *VPHeader) GetStrDeviceName() string {
	if x != nil {
		return x.StrDeviceName
	}
	return ""
}

func (x *VPHeader) GetStrOSInfo() string {
	if x != nil {
		return x.StrOSInfo
	}
	return ""
}

func (x *VPHeader) GetArs32TelcoPCI() []int32 {
	if x != nil {
		return x.Ars32TelcoPCI
	}
	return nil
}

func (x *VPHeader) GetS32TelcoRSSI() int32 {
	if x != nil {
		return x.S32TelcoRSSI
	}
	return 0
}

func (x *VPHeader) GetU64TSSend() uint64 {
	if x != nil {
		return x.U64TSSend
	}
	return 0
}

func (x *VPHeader) GetArf64LastLoc() []float64 {
	if x != nil {
		return x.Arf64LastLoc
	}
	return nil
}

func (x *VPHeader) GetArf32Extrinsic() []float32 {
	if x != nil {
		return x.Arf32Extrinsic
	}
	return nil
}

func (x *VPHeader) GetStrTargetEnv() string {
	if x != nil {
		return x.StrTargetEnv
	}
	return ""
}

type VPBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StState              *VPStateT              `protobuf:"bytes,1,opt,name=stState,proto3" json:"stState,omitempty"`
	StCamera             *CameraT               `protobuf:"bytes,2,opt,name=stCamera,proto3" json:"stCamera,omitempty"`
	StGPS                []*GPST                `protobuf:"bytes,3,rep,name=stGPS,proto3" json:"stGPS,omitempty"`
	StIMU                []*IMUT                `protobuf:"bytes,4,rep,name=stIMU,proto3" json:"stIMU,omitempty"`
	StBaroMeter          []*BarometerT          `protobuf:"bytes,5,rep,name=stBaroMeter,proto3" json:"stBaroMeter,omitempty"`
	StMagneticCompass    []*MCompassT           `protobuf:"bytes,6,rep,name=stMagneticCompass,proto3" json:"stMagneticCompass,omitempty"`
	StGPSLocationInfo    []*GPSLocationInfoT    `protobuf:"bytes,7,rep,name=stGPSLocationInfo,proto3" json:"stGPSLocationInfo,omitempty"`
	StAccelerometerInfo  []*AccelerometerInfoT  `protobuf:"bytes,8,rep,name=stAccelerometerInfo,proto3" json:"stAccelerometerInfo,omitempty"`
	StGyroscopeInfo      []*GyroscopeInfoT      `protobuf:"bytes,9,rep,name=stGyroscopeInfo,proto3" json:"stGyroscopeInfo,omitempty"`
	StRotationVectorInfo []*RotationVectorInfoT `protobuf:"bytes,10,rep,name=stRotationVectorInfo,proto3" json:"stRotationVectorInfo,omitempty"`
	StStepCounterInfo    []*StepCounterInfoT    `protobuf:"bytes,11,rep,name=stStepCounterInfo,proto3" json:"stStepCounterInfo,omitempty"`
	StStepDetectorInfo   []*StepDetectorInfoT   `protobuf:"bytes,12,rep,name=stStepDetectorInfo,proto3" json:"stStepDetectorInfo,omitempty"`
	StMagneticFieldInfo  []*MagneticFieldInfoT  `protobuf:"bytes,13,rep,name=stMagneticFieldInfo,proto3" json:"stMagneticFieldInfo,omitempty"`
	StPressureInfo       []*PressureInfoT       `protobuf:"bytes,14,rep,name=stPressureInfo,proto3" json:"stPressureInfo,omitempty"`
	// Multi-camera
	StSubCameras []*CameraT `protobuf:"bytes,21,rep,name=stSubCameras,proto3" json:"stSubCameras,omitempty"`
}

func (x *VPBody) Reset() {
	*x = VPBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vp_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPBody) ProtoMessage() {}

func (x *VPBody) ProtoReflect() protoreflect.Message {
	mi := &file_vp_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPBody.ProtoReflect.Descriptor instead.
func (*VPBody) Descriptor() ([]byte, []int) {
	return file_vp_msg_proto_rawDescGZIP(), []int{1}
}

func (x *VPBody) GetStState() *VPStateT {
	if x != nil {
		return x.StState
	}
	return nil
}

func (x *VPBody) GetStCamera() *CameraT {
	if x != nil {
		return x.StCamera
	}
	return nil
}

func (x *VPBody) GetStGPS() []*GPST {
	if x != nil {
		return x.StGPS
	}
	return nil
}

func (x *VPBody) GetStIMU() []*IMUT {
	if x != nil {
		return x.StIMU
	}
	return nil
}

func (x *VPBody) GetStBaroMeter() []*BarometerT {
	if x != nil {
		return x.StBaroMeter
	}
	return nil
}

func (x *VPBody) GetStMagneticCompass() []*MCompassT {
	if x != nil {
		return x.StMagneticCompass
	}
	return nil
}

func (x *VPBody) GetStGPSLocationInfo() []*GPSLocationInfoT {
	if x != nil {
		return x.StGPSLocationInfo
	}
	return nil
}

func (x *VPBody) GetStAccelerometerInfo() []*AccelerometerInfoT {
	if x != nil {
		return x.StAccelerometerInfo
	}
	return nil
}

func (x *VPBody) GetStGyroscopeInfo() []*GyroscopeInfoT {
	if x != nil {
		return x.StGyroscopeInfo
	}
	return nil
}

func (x *VPBody) GetStRotationVectorInfo() []*RotationVectorInfoT {
	if x != nil {
		return x.StRotationVectorInfo
	}
	return nil
}

func (x *VPBody) GetStStepCounterInfo() []*StepCounterInfoT {
	if x != nil {
		return x.StStepCounterInfo
	}
	return nil
}

func (x *VPBody) GetStStepDetectorInfo() []*StepDetectorInfoT {
	if x != nil {
		return x.StStepDetectorInfo
	}
	return nil
}

func (x *VPBody) GetStMagneticFieldInfo() []*MagneticFieldInfoT {
	if x != nil {
		return x.StMagneticFieldInfo
	}
	return nil
}

func (x *VPBody) GetStPressureInfo() []*PressureInfoT {
	if x != nil {
		return x.StPressureInfo
	}
	return nil
}

func (x *VPBody) GetStSubCameras() []*CameraT {
	if x != nil {
		return x.StSubCameras
	}
	return nil
}

type VPData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StVPHeader *VPHeader `protobuf:"bytes,1,opt,name=stVPHeader,proto3" json:"stVPHeader,omitempty"`
	StVPBody   *VPBody   `protobuf:"bytes,2,opt,name=stVPBody,proto3" json:"stVPBody,omitempty"`
}

func (x *VPData) Reset() {
	*x = VPData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vp_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VPData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VPData) ProtoMessage() {}

func (x *VPData) ProtoReflect() protoreflect.Message {
	mi := &file_vp_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VPData.ProtoReflect.Descriptor instead.
func (*VPData) Descriptor() ([]byte, []int) {
	return file_vp_msg_proto_rawDescGZIP(), []int{2}
}

func (x *VPData) GetStVPHeader() *VPHeader {
	if x != nil {
		return x.StVPHeader
	}
	return nil
}

func (x *VPData) GetStVPBody() *VPBody {
	if x != nil {
		return x.StVPBody
	}
	return nil
}

var File_vp_msg_proto protoreflect.FileDescriptor

var file_vp_msg_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x70, 0x5f, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x0e, 0x76, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x70, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x76, 0x70, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x02, 0x0a, 0x08, 0x56, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x4f, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24,
	0x0a, 0x0d, 0x61, 0x72, 0x73, 0x33, 0x32, 0x54, 0x65, 0x6c, 0x63, 0x6f, 0x50, 0x43, 0x49, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x72, 0x73, 0x33, 0x32, 0x54, 0x65, 0x6c, 0x63,
	0x6f, 0x50, 0x43, 0x49, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x33, 0x32, 0x54, 0x65, 0x6c, 0x63, 0x6f,
	0x52, 0x53, 0x53, 0x49, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x33, 0x32, 0x54,
	0x65, 0x6c, 0x63, 0x6f, 0x52, 0x53, 0x53, 0x49, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x36, 0x34, 0x54,
	0x53, 0x53, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x36, 0x34,
	0x54, 0x53, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x66, 0x36, 0x34, 0x4c,
	0x61, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x72,
	0x66, 0x36, 0x34, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x61, 0x72,
	0x66, 0x33, 0x32, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x02, 0x52, 0x0e, 0x61, 0x72, 0x66, 0x33, 0x32, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73,
	0x69, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x45,
	0x6e, 0x76, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x45, 0x6e, 0x76, 0x22, 0xa1, 0x08, 0x0a, 0x06, 0x56, 0x50, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x31, 0x0a, 0x07, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x56, 0x50, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x52, 0x07, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x52,
	0x08, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x47,
	0x50, 0x53, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x47, 0x50, 0x53, 0x5f, 0x74, 0x52,
	0x05, 0x73, 0x74, 0x47, 0x50, 0x53, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x49, 0x4d, 0x55, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x49, 0x4d, 0x55, 0x5f, 0x74, 0x52, 0x05, 0x73, 0x74,
	0x49, 0x4d, 0x55, 0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x74, 0x42, 0x61, 0x72, 0x6f, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x42, 0x61, 0x72, 0x6f, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x42, 0x61, 0x72, 0x6f, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x73, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4d,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x5f, 0x74, 0x52, 0x11, 0x73, 0x74, 0x4d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x73, 0x73, 0x12, 0x4f, 0x0a, 0x11,
	0x73, 0x74, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x47, 0x50, 0x53, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52, 0x11, 0x73, 0x74, 0x47, 0x50,
	0x53, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55, 0x0a,
	0x13, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x70, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52,
	0x13, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x74, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63,
	0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x47,
	0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52, 0x0f,
	0x73, 0x74, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x58, 0x0a, 0x14, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x5f, 0x74, 0x52, 0x14, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4f, 0x0a, 0x11, 0x73, 0x74, 0x53,
	0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52, 0x11, 0x73, 0x74, 0x53, 0x74, 0x65, 0x70, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x52, 0x0a, 0x12, 0x73, 0x74,
	0x53, 0x74, 0x65, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52, 0x12, 0x73, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x55,
	0x0a, 0x13, 0x73, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x70,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74,
	0x52, 0x13, 0x73, 0x74, 0x4d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46, 0x0a, 0x0e, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x2e, 0x50,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x5f, 0x74, 0x52, 0x0e, 0x73,
	0x74, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a,
	0x0c, 0x73, 0x74, 0x53, 0x75, 0x62, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x52, 0x0c, 0x73, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x22, 0x66, 0x0a, 0x06, 0x56, 0x50,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x74, 0x56, 0x50, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x50, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x74, 0x56, 0x50,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x73, 0x74, 0x56, 0x50, 0x42, 0x6f,
	0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x56, 0x50, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x08, 0x73, 0x74, 0x56, 0x50, 0x42, 0x6f,
	0x64, 0x79, 0x42, 0x4c, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x73, 0x6d, 0x6f, 0x6f, 0x6e, 0x2f, 0x76, 0x70,
	0x73, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vp_msg_proto_rawDescOnce sync.Once
	file_vp_msg_proto_rawDescData = file_vp_msg_proto_rawDesc
)

func file_vp_msg_proto_rawDescGZIP() []byte {
	file_vp_msg_proto_rawDescOnce.Do(func() {
		file_vp_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_vp_msg_proto_rawDescData)
	})
	return file_vp_msg_proto_rawDescData
}

var file_vp_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_vp_msg_proto_goTypes = []interface{}{
	(*VPHeader)(nil),            // 0: vpdata.VPHeader
	(*VPBody)(nil),              // 1: vpdata.VPBody
	(*VPData)(nil),              // 2: vpdata.VPData
	(*VPStateT)(nil),            // 3: vpdata.state.VPState_t
	(*CameraT)(nil),             // 4: vpdata.camera.Camera_t
	(*GPST)(nil),                // 5: vpdata.sensors.GPS_t
	(*IMUT)(nil),                // 6: vpdata.sensors.IMU_t
	(*BarometerT)(nil),          // 7: vpdata.sensors.Barometer_t
	(*MCompassT)(nil),           // 8: vpdata.sensors.MCompass_t
	(*GPSLocationInfoT)(nil),    // 9: vpdata.sensors.GPSLocationInfo_t
	(*AccelerometerInfoT)(nil),  // 10: vpdata.sensors.AccelerometerInfo_t
	(*GyroscopeInfoT)(nil),      // 11: vpdata.sensors.GyroscopeInfo_t
	(*RotationVectorInfoT)(nil), // 12: vpdata.sensors.RotationVectorInfo_t
	(*StepCounterInfoT)(nil),    // 13: vpdata.sensors.StepCounterInfo_t
	(*StepDetectorInfoT)(nil),   // 14: vpdata.sensors.StepDetectorInfo_t
	(*MagneticFieldInfoT)(nil),  // 15: vpdata.sensors.MagneticFieldInfo_t
	(*PressureInfoT)(nil),       // 16: vpdata.sensors.PressureInfo_t
}
var file_vp_msg_proto_depIdxs = []int32{
	3,  // 0: vpdata.VPBody.stState:type_name -> vpdata.state.VPState_t
	4,  // 1: vpdata.VPBody.stCamera:type_name -> vpdata.camera.Camera_t
	5,  // 2: vpdata.VPBody.stGPS:type_name -> vpdata.sensors.GPS_t
	6,  // 3: vpdata.VPBody.stIMU:type_name -> vpdata.sensors.IMU_t
	7,  // 4: vpdata.VPBody.stBaroMeter:type_name -> vpdata.sensors.Barometer_t
	8,  // 5: vpdata.VPBody.stMagneticCompass:type_name -> vpdata.sensors.MCompass_t
	9,  // 6: vpdata.VPBody.stGPSLocationInfo:type_name -> vpdata.sensors.GPSLocationInfo_t
	10, // 7: vpdata.VPBody.stAccelerometerInfo:type_name -> vpdata.sensors.AccelerometerInfo_t
	11, // 8: vpdata.VPBody.stGyroscopeInfo:type_name -> vpdata.sensors.GyroscopeInfo_t
	12, // 9: vpdata.VPBody.stRotationVectorInfo:type_name -> vpdata.sensors.RotationVectorInfo_t
	13, // 10: vpdata.VPBody.stStepCounterInfo:type_name -> vpdata.sensors.StepCounterInfo_t
	14, // 11: vpdata.VPBody.stStepDetectorInfo:type_name -> vpdata.sensors.StepDetectorInfo_t
	15, // 12: vpdata.VPBody.stMagneticFieldInfo:type_name -> vpdata.sensors.MagneticFieldInfo_t
	16, // 13: vpdata.VPBody.stPressureInfo:type_name -> vpdata.sensors.PressureInfo_t
	4,  // 14: vpdata.VPBody.stSubCameras:type_name -> vpdata.camera.Camera_t
	0,  // 15: vpdata.VPData.stVPHeader:type_name -> vpdata.VPHeader
	1,  // 16: vpdata.VPData.stVPBody:type_name -> vpdata.VPBody
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_vp_msg_proto_init() }
func file_vp_msg_proto_init() {
	if File_vp_msg_proto != nil {
		return
	}
	file_vp_state_proto_init()
	file_vp_camera_proto_init()
	file_vp_sensors_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vp_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vp_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vp_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VPData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vp_msg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vp_msg_proto_goTypes,
		DependencyIndexes: file_vp_msg_proto_depIdxs,
		MessageInfos:      file_vp_msg_proto_msgTypes,
	}.Build()
	File_vp_msg_proto = out.File
	file_vp_msg_proto_rawDesc = nil
	file_vp_msg_proto_goTypes = nil
	file_vp_msg_proto_depIdxs = nil
}
