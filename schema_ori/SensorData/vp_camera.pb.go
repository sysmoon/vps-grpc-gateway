// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: vp_camera.proto

package SensorData

import (
	schema "github.com/sysmoon/vps-grpc-gateway/schema"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CameraT_CameraType int32

const (
	CameraT_eCameraStart CameraT_CameraType = 0
	CameraT_eFront_1     CameraT_CameraType = 1
	CameraT_eFront_2     CameraT_CameraType = 2
	CameraT_eFront_End   CameraT_CameraType = 4
	CameraT_eBack_1      CameraT_CameraType = 8
	CameraT_eBack_2      CameraT_CameraType = 16
	CameraT_eBack_3      CameraT_CameraType = 32
	CameraT_eBack_4      CameraT_CameraType = 64
	CameraT_eBack_5      CameraT_CameraType = 128
	CameraT_eBack_6      CameraT_CameraType = 256
	CameraT_eBack_End    CameraT_CameraType = 512
)

// Enum value maps for CameraT_CameraType.
var (
	CameraT_CameraType_name = map[int32]string{
		0:   "eCameraStart",
		1:   "eFront_1",
		2:   "eFront_2",
		4:   "eFront_End",
		8:   "eBack_1",
		16:  "eBack_2",
		32:  "eBack_3",
		64:  "eBack_4",
		128: "eBack_5",
		256: "eBack_6",
		512: "eBack_End",
	}
	CameraT_CameraType_value = map[string]int32{
		"eCameraStart": 0,
		"eFront_1":     1,
		"eFront_2":     2,
		"eFront_End":   4,
		"eBack_1":      8,
		"eBack_2":      16,
		"eBack_3":      32,
		"eBack_4":      64,
		"eBack_5":      128,
		"eBack_6":      256,
		"eBack_End":    512,
	}
)

func (x CameraT_CameraType) Enum() *CameraT_CameraType {
	p := new(CameraT_CameraType)
	*p = x
	return p
}

func (x CameraT_CameraType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraT_CameraType) Descriptor() protoreflect.EnumDescriptor {
	return file_vp_camera_proto_enumTypes[0].Descriptor()
}

func (CameraT_CameraType) Type() protoreflect.EnumType {
	return &file_vp_camera_proto_enumTypes[0]
}

func (x CameraT_CameraType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraT_CameraType.Descriptor instead.
func (CameraT_CameraType) EnumDescriptor() ([]byte, []int) {
	return file_vp_camera_proto_rawDescGZIP(), []int{0, 0}
}

type CameraT_Codec int32

const (
	CameraT_eUNKNOWN_CODEC CameraT_Codec = 0
	CameraT_eUNCOMPRESSED  CameraT_Codec = 1
	CameraT_eJPG           CameraT_Codec = 2
	CameraT_ePNG           CameraT_Codec = 3
)

// Enum value maps for CameraT_Codec.
var (
	CameraT_Codec_name = map[int32]string{
		0: "eUNKNOWN_CODEC",
		1: "eUNCOMPRESSED",
		2: "eJPG",
		3: "ePNG",
	}
	CameraT_Codec_value = map[string]int32{
		"eUNKNOWN_CODEC": 0,
		"eUNCOMPRESSED":  1,
		"eJPG":           2,
		"ePNG":           3,
	}
)

func (x CameraT_Codec) Enum() *CameraT_Codec {
	p := new(CameraT_Codec)
	*p = x
	return p
}

func (x CameraT_Codec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraT_Codec) Descriptor() protoreflect.EnumDescriptor {
	return file_vp_camera_proto_enumTypes[1].Descriptor()
}

func (CameraT_Codec) Type() protoreflect.EnumType {
	return &file_vp_camera_proto_enumTypes[1]
}

func (x CameraT_Codec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraT_Codec.Descriptor instead.
func (CameraT_Codec) EnumDescriptor() ([]byte, []int) {
	return file_vp_camera_proto_rawDescGZIP(), []int{0, 1}
}

type CameraT_PixelFormat int32

const (
	CameraT_eUNKNOWN_FORMAT CameraT_PixelFormat = 0
	CameraT_e8BIT           CameraT_PixelFormat = 10 // unsigned char
	CameraT_eGRAY8          CameraT_PixelFormat = 11
	CameraT_eRGB8           CameraT_PixelFormat = 12
	CameraT_eBGR8           CameraT_PixelFormat = 13
	CameraT_e16BIT          CameraT_PixelFormat = 20 // unsigned int16
	CameraT_eGRAY12         CameraT_PixelFormat = 21
	CameraT_eGRAY14         CameraT_PixelFormat = 22
	CameraT_eGRAY16         CameraT_PixelFormat = 23
	CameraT_eRGB12          CameraT_PixelFormat = 24
	CameraT_eBGR12          CameraT_PixelFormat = 25
	CameraT_eRGB14          CameraT_PixelFormat = 26
	CameraT_eBGR14          CameraT_PixelFormat = 27
	CameraT_eRGB16          CameraT_PixelFormat = 28
	CameraT_eBGR16          CameraT_PixelFormat = 29
	CameraT_e32BIT          CameraT_PixelFormat = 30 // unsigned int32 or float32
	CameraT_eGRAY32U        CameraT_PixelFormat = 31
	CameraT_eRGB32U         CameraT_PixelFormat = 32
	CameraT_eBGR32U         CameraT_PixelFormat = 33
	CameraT_eGRAY32F        CameraT_PixelFormat = 34
	CameraT_eRGB32F         CameraT_PixelFormat = 35
	CameraT_eBGR32F         CameraT_PixelFormat = 36
	CameraT_eCOMPRESSED     CameraT_PixelFormat = 50
	CameraT_eYUV420P8       CameraT_PixelFormat = 51 // Y, U+V
	CameraT_eYUYV422I8      CameraT_PixelFormat = 52 // YUYV
	CameraT_eUYVY422I8      CameraT_PixelFormat = 53 // UYVY
)

// Enum value maps for CameraT_PixelFormat.
var (
	CameraT_PixelFormat_name = map[int32]string{
		0:  "eUNKNOWN_FORMAT",
		10: "e8BIT",
		11: "eGRAY8",
		12: "eRGB8",
		13: "eBGR8",
		20: "e16BIT",
		21: "eGRAY12",
		22: "eGRAY14",
		23: "eGRAY16",
		24: "eRGB12",
		25: "eBGR12",
		26: "eRGB14",
		27: "eBGR14",
		28: "eRGB16",
		29: "eBGR16",
		30: "e32BIT",
		31: "eGRAY32U",
		32: "eRGB32U",
		33: "eBGR32U",
		34: "eGRAY32F",
		35: "eRGB32F",
		36: "eBGR32F",
		50: "eCOMPRESSED",
		51: "eYUV420P8",
		52: "eYUYV422I8",
		53: "eUYVY422I8",
	}
	CameraT_PixelFormat_value = map[string]int32{
		"eUNKNOWN_FORMAT": 0,
		"e8BIT":           10,
		"eGRAY8":          11,
		"eRGB8":           12,
		"eBGR8":           13,
		"e16BIT":          20,
		"eGRAY12":         21,
		"eGRAY14":         22,
		"eGRAY16":         23,
		"eRGB12":          24,
		"eBGR12":          25,
		"eRGB14":          26,
		"eBGR14":          27,
		"eRGB16":          28,
		"eBGR16":          29,
		"e32BIT":          30,
		"eGRAY32U":        31,
		"eRGB32U":         32,
		"eBGR32U":         33,
		"eGRAY32F":        34,
		"eRGB32F":         35,
		"eBGR32F":         36,
		"eCOMPRESSED":     50,
		"eYUV420P8":       51,
		"eYUYV422I8":      52,
		"eUYVY422I8":      53,
	}
)

func (x CameraT_PixelFormat) Enum() *CameraT_PixelFormat {
	p := new(CameraT_PixelFormat)
	*p = x
	return p
}

func (x CameraT_PixelFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraT_PixelFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_vp_camera_proto_enumTypes[2].Descriptor()
}

func (CameraT_PixelFormat) Type() protoreflect.EnumType {
	return &file_vp_camera_proto_enumTypes[2]
}

func (x CameraT_PixelFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraT_PixelFormat.Descriptor instead.
func (CameraT_PixelFormat) EnumDescriptor() ([]byte, []int) {
	return file_vp_camera_proto_rawDescGZIP(), []int{0, 2}
}

type CameraT struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U64TSCapture uint64              `protobuf:"varint,1,opt,name=u64TSCapture,proto3" json:"u64TSCapture,omitempty"`
	ECameraType  CameraT_CameraType  `protobuf:"varint,2,opt,name=eCameraType,proto3,enum=vpdata.camera.CameraT_CameraType" json:"eCameraType,omitempty"`
	ECodec       CameraT_Codec       `protobuf:"varint,3,opt,name=eCodec,proto3,enum=vpdata.camera.CameraT_Codec" json:"eCodec,omitempty"`
	U16Width     uint32              `protobuf:"varint,4,opt,name=u16Width,proto3" json:"u16Width,omitempty"`
	U16Height    uint32              `protobuf:"varint,5,opt,name=u16Height,proto3" json:"u16Height,omitempty"`
	EPixelFormat CameraT_PixelFormat `protobuf:"varint,6,opt,name=ePixelFormat,proto3,enum=vpdata.camera.CameraT_PixelFormat" json:"ePixelFormat,omitempty"`
	ImgData      []byte              `protobuf:"bytes,7,opt,name=imgData,proto3" json:"imgData,omitempty"`
	// Add Extrinsic
	StExtrinsic *schema.ExtrinsicT `protobuf:"bytes,11,opt,name=stExtrinsic,proto3" json:"stExtrinsic,omitempty"`
}

func (x *CameraT) Reset() {
	*x = CameraT{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vp_camera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraT) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraT) ProtoMessage() {}

func (x *CameraT) ProtoReflect() protoreflect.Message {
	mi := &file_vp_camera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraT.ProtoReflect.Descriptor instead.
func (*CameraT) Descriptor() ([]byte, []int) {
	return file_vp_camera_proto_rawDescGZIP(), []int{0}
}

func (x *CameraT) GetU64TSCapture() uint64 {
	if x != nil {
		return x.U64TSCapture
	}
	return 0
}

func (x *CameraT) GetECameraType() CameraT_CameraType {
	if x != nil {
		return x.ECameraType
	}
	return CameraT_eCameraStart
}

func (x *CameraT) GetECodec() CameraT_Codec {
	if x != nil {
		return x.ECodec
	}
	return CameraT_eUNKNOWN_CODEC
}

func (x *CameraT) GetU16Width() uint32 {
	if x != nil {
		return x.U16Width
	}
	return 0
}

func (x *CameraT) GetU16Height() uint32 {
	if x != nil {
		return x.U16Height
	}
	return 0
}

func (x *CameraT) GetEPixelFormat() CameraT_PixelFormat {
	if x != nil {
		return x.EPixelFormat
	}
	return CameraT_eUNKNOWN_FORMAT
}

func (x *CameraT) GetImgData() []byte {
	if x != nil {
		return x.ImgData
	}
	return nil
}

func (x *CameraT) GetStExtrinsic() *schema.ExtrinsicT {
	if x != nil {
		return x.StExtrinsic
	}
	return nil
}

var File_vp_camera_proto protoreflect.FileDescriptor

var file_vp_camera_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x76, 0x70, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x1a, 0x13, 0x76, 0x67, 0x65, 0x6f, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x07, 0x0a, 0x08, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x5f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x36, 0x34, 0x54, 0x53, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x75, 0x36, 0x34, 0x54, 0x53, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x76, 0x70,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x5f, 0x74, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x76,
	0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x52, 0x06, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x31, 0x36, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x31, 0x36, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x75, 0x31, 0x36, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x75, 0x31, 0x36, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x47, 0x0a,
	0x0c, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x76, 0x70, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x74, 0x2e, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x65, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6d, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x69, 0x6d, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x56, 0x67, 0x65, 0x6f, 0x44, 0x42, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x5f,
	0x74, 0x52, 0x0b, 0x73, 0x74, 0x45, 0x78, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x22, 0xaa,
	0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x65, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x65,
	0x46, 0x72, 0x6f, 0x6e, 0x74, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x5f, 0x31, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x42, 0x61, 0x63,
	0x6b, 0x5f, 0x32, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x5f, 0x33,
	0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x5f, 0x34, 0x10, 0x40, 0x12,
	0x0c, 0x0a, 0x07, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x5f, 0x35, 0x10, 0x80, 0x01, 0x12, 0x0c, 0x0a,
	0x07, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x5f, 0x36, 0x10, 0x80, 0x02, 0x12, 0x0e, 0x0a, 0x09, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x80, 0x04, 0x22, 0x42, 0x0a, 0x05, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x0e, 0x65, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x55, 0x4e, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x65,
	0x4a, 0x50, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x50, 0x4e, 0x47, 0x10, 0x03, 0x22,
	0xe6, 0x02, 0x0a, 0x0b, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12,
	0x13, 0x0a, 0x0f, 0x65, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x38, 0x42, 0x49, 0x54, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x65, 0x47, 0x52, 0x41, 0x59, 0x38, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x65,
	0x52, 0x47, 0x42, 0x38, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x42, 0x47, 0x52, 0x38, 0x10,
	0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x31, 0x36, 0x42, 0x49, 0x54, 0x10, 0x14, 0x12, 0x0b, 0x0a,
	0x07, 0x65, 0x47, 0x52, 0x41, 0x59, 0x31, 0x32, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x47,
	0x52, 0x41, 0x59, 0x31, 0x34, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x47, 0x52, 0x41, 0x59,
	0x31, 0x36, 0x10, 0x17, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x52, 0x47, 0x42, 0x31, 0x32, 0x10, 0x18,
	0x12, 0x0a, 0x0a, 0x06, 0x65, 0x42, 0x47, 0x52, 0x31, 0x32, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06,
	0x65, 0x52, 0x47, 0x42, 0x31, 0x34, 0x10, 0x1a, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x42, 0x47, 0x52,
	0x31, 0x34, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x52, 0x47, 0x42, 0x31, 0x36, 0x10, 0x1c,
	0x12, 0x0a, 0x0a, 0x06, 0x65, 0x42, 0x47, 0x52, 0x31, 0x36, 0x10, 0x1d, 0x12, 0x0a, 0x0a, 0x06,
	0x65, 0x33, 0x32, 0x42, 0x49, 0x54, 0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x65, 0x47, 0x52, 0x41,
	0x59, 0x33, 0x32, 0x55, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x52, 0x47, 0x42, 0x33, 0x32,
	0x55, 0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x65, 0x42, 0x47, 0x52, 0x33, 0x32, 0x55, 0x10, 0x21,
	0x12, 0x0c, 0x0a, 0x08, 0x65, 0x47, 0x52, 0x41, 0x59, 0x33, 0x32, 0x46, 0x10, 0x22, 0x12, 0x0b,
	0x0a, 0x07, 0x65, 0x52, 0x47, 0x42, 0x33, 0x32, 0x46, 0x10, 0x23, 0x12, 0x0b, 0x0a, 0x07, 0x65,
	0x42, 0x47, 0x52, 0x33, 0x32, 0x46, 0x10, 0x24, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x43, 0x4f, 0x4d,
	0x50, 0x52, 0x45, 0x53, 0x53, 0x45, 0x44, 0x10, 0x32, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x59, 0x55,
	0x56, 0x34, 0x32, 0x30, 0x50, 0x38, 0x10, 0x33, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x59, 0x55, 0x59,
	0x56, 0x34, 0x32, 0x32, 0x49, 0x38, 0x10, 0x34, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x55, 0x59, 0x56,
	0x59, 0x34, 0x32, 0x32, 0x49, 0x38, 0x10, 0x35, 0x42, 0x4c, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5a,
	0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x79, 0x73, 0x6d,
	0x6f, 0x6f, 0x6e, 0x2f, 0x76, 0x70, 0x73, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vp_camera_proto_rawDescOnce sync.Once
	file_vp_camera_proto_rawDescData = file_vp_camera_proto_rawDesc
)

func file_vp_camera_proto_rawDescGZIP() []byte {
	file_vp_camera_proto_rawDescOnce.Do(func() {
		file_vp_camera_proto_rawDescData = protoimpl.X.CompressGZIP(file_vp_camera_proto_rawDescData)
	})
	return file_vp_camera_proto_rawDescData
}

var file_vp_camera_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vp_camera_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_vp_camera_proto_goTypes = []interface{}{
	(CameraT_CameraType)(0),   // 0: vpdata.camera.Camera_t.CameraType
	(CameraT_Codec)(0),        // 1: vpdata.camera.Camera_t.Codec
	(CameraT_PixelFormat)(0),  // 2: vpdata.camera.Camera_t.PixelFormat
	(*CameraT)(nil),           // 3: vpdata.camera.Camera_t
	(*schema.ExtrinsicT)(nil), // 4: VgeoDB.common.Extrinsic_t
}
var file_vp_camera_proto_depIdxs = []int32{
	0, // 0: vpdata.camera.Camera_t.eCameraType:type_name -> vpdata.camera.Camera_t.CameraType
	1, // 1: vpdata.camera.Camera_t.eCodec:type_name -> vpdata.camera.Camera_t.Codec
	2, // 2: vpdata.camera.Camera_t.ePixelFormat:type_name -> vpdata.camera.Camera_t.PixelFormat
	4, // 3: vpdata.camera.Camera_t.stExtrinsic:type_name -> VgeoDB.common.Extrinsic_t
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_vp_camera_proto_init() }
func file_vp_camera_proto_init() {
	if File_vp_camera_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_vp_camera_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraT); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vp_camera_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vp_camera_proto_goTypes,
		DependencyIndexes: file_vp_camera_proto_depIdxs,
		EnumInfos:         file_vp_camera_proto_enumTypes,
		MessageInfos:      file_vp_camera_proto_msgTypes,
	}.Build()
	File_vp_camera_proto = out.File
	file_vp_camera_proto_rawDesc = nil
	file_vp_camera_proto_goTypes = nil
	file_vp_camera_proto_depIdxs = nil
}
