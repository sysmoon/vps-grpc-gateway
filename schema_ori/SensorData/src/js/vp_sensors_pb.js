// source: vp_sensors.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vpdata.sensors.AccelerometerInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.Barometer_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.GPSLocationInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.GPS_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.GyroscopeInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.IMU_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.MCompass_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.MagneticFieldInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.PressureInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.RotationVectorInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.StepCounterInfo_t', null, global);
goog.exportSymbol('proto.vpdata.sensors.StepDetectorInfo_t', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.GPS_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vpdata.sensors.GPS_t.repeatedFields_, null);
};
goog.inherits(proto.vpdata.sensors.GPS_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.GPS_t.displayName = 'proto.vpdata.sensors.GPS_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.IMU_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vpdata.sensors.IMU_t.repeatedFields_, null);
};
goog.inherits(proto.vpdata.sensors.IMU_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.IMU_t.displayName = 'proto.vpdata.sensors.IMU_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.Barometer_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vpdata.sensors.Barometer_t.repeatedFields_, null);
};
goog.inherits(proto.vpdata.sensors.Barometer_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.Barometer_t.displayName = 'proto.vpdata.sensors.Barometer_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.MCompass_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vpdata.sensors.MCompass_t.repeatedFields_, null);
};
goog.inherits(proto.vpdata.sensors.MCompass_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.MCompass_t.displayName = 'proto.vpdata.sensors.MCompass_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.GPSLocationInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.GPSLocationInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.GPSLocationInfo_t.displayName = 'proto.vpdata.sensors.GPSLocationInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.AccelerometerInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.AccelerometerInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.AccelerometerInfo_t.displayName = 'proto.vpdata.sensors.AccelerometerInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.GyroscopeInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.GyroscopeInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.GyroscopeInfo_t.displayName = 'proto.vpdata.sensors.GyroscopeInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.RotationVectorInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.RotationVectorInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.RotationVectorInfo_t.displayName = 'proto.vpdata.sensors.RotationVectorInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.StepCounterInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.StepCounterInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.StepCounterInfo_t.displayName = 'proto.vpdata.sensors.StepCounterInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.StepDetectorInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.StepDetectorInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.StepDetectorInfo_t.displayName = 'proto.vpdata.sensors.StepDetectorInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.MagneticFieldInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.MagneticFieldInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.MagneticFieldInfo_t.displayName = 'proto.vpdata.sensors.MagneticFieldInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vpdata.sensors.PressureInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vpdata.sensors.PressureInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vpdata.sensors.PressureInfo_t.displayName = 'proto.vpdata.sensors.PressureInfo_t';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vpdata.sensors.GPS_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.GPS_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.GPS_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.GPS_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.GPS_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arf32poseList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.GPS_t}
 */
proto.vpdata.sensors.GPS_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.GPS_t;
  return proto.vpdata.sensors.GPS_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.GPS_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.GPS_t}
 */
proto.vpdata.sensors.GPS_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArf32pose(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.GPS_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.GPS_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.GPS_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.GPS_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getArf32poseList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.GPS_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GPS_t} returns this
 */
proto.vpdata.sensors.GPS_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated float arf32Pose = 2;
 * @return {!Array<number>}
 */
proto.vpdata.sensors.GPS_t.prototype.getArf32poseList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vpdata.sensors.GPS_t} returns this
 */
proto.vpdata.sensors.GPS_t.prototype.setArf32poseList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vpdata.sensors.GPS_t} returns this
 */
proto.vpdata.sensors.GPS_t.prototype.addArf32pose = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vpdata.sensors.GPS_t} returns this
 */
proto.vpdata.sensors.GPS_t.prototype.clearArf32poseList = function() {
  return this.setArf32poseList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vpdata.sensors.IMU_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.IMU_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.IMU_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.IMU_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.IMU_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arf32dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.IMU_t}
 */
proto.vpdata.sensors.IMU_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.IMU_t;
  return proto.vpdata.sensors.IMU_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.IMU_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.IMU_t}
 */
proto.vpdata.sensors.IMU_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArf32data(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.IMU_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.IMU_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.IMU_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.IMU_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getArf32dataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.IMU_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.IMU_t} returns this
 */
proto.vpdata.sensors.IMU_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated float arf32Data = 2;
 * @return {!Array<number>}
 */
proto.vpdata.sensors.IMU_t.prototype.getArf32dataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vpdata.sensors.IMU_t} returns this
 */
proto.vpdata.sensors.IMU_t.prototype.setArf32dataList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vpdata.sensors.IMU_t} returns this
 */
proto.vpdata.sensors.IMU_t.prototype.addArf32data = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vpdata.sensors.IMU_t} returns this
 */
proto.vpdata.sensors.IMU_t.prototype.clearArf32dataList = function() {
  return this.setArf32dataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vpdata.sensors.Barometer_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.Barometer_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.Barometer_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.Barometer_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.Barometer_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arf32dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.Barometer_t}
 */
proto.vpdata.sensors.Barometer_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.Barometer_t;
  return proto.vpdata.sensors.Barometer_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.Barometer_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.Barometer_t}
 */
proto.vpdata.sensors.Barometer_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArf32data(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.Barometer_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.Barometer_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.Barometer_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.Barometer_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getArf32dataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.Barometer_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.Barometer_t} returns this
 */
proto.vpdata.sensors.Barometer_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated float arf32Data = 2;
 * @return {!Array<number>}
 */
proto.vpdata.sensors.Barometer_t.prototype.getArf32dataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vpdata.sensors.Barometer_t} returns this
 */
proto.vpdata.sensors.Barometer_t.prototype.setArf32dataList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vpdata.sensors.Barometer_t} returns this
 */
proto.vpdata.sensors.Barometer_t.prototype.addArf32data = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vpdata.sensors.Barometer_t} returns this
 */
proto.vpdata.sensors.Barometer_t.prototype.clearArf32dataList = function() {
  return this.setArf32dataList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vpdata.sensors.MCompass_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.MCompass_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.MCompass_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.MCompass_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.MCompass_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arf32dataList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.MCompass_t}
 */
proto.vpdata.sensors.MCompass_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.MCompass_t;
  return proto.vpdata.sensors.MCompass_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.MCompass_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.MCompass_t}
 */
proto.vpdata.sensors.MCompass_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArf32data(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.MCompass_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.MCompass_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.MCompass_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.MCompass_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getArf32dataList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.MCompass_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.MCompass_t} returns this
 */
proto.vpdata.sensors.MCompass_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated float arf32Data = 2;
 * @return {!Array<number>}
 */
proto.vpdata.sensors.MCompass_t.prototype.getArf32dataList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vpdata.sensors.MCompass_t} returns this
 */
proto.vpdata.sensors.MCompass_t.prototype.setArf32dataList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vpdata.sensors.MCompass_t} returns this
 */
proto.vpdata.sensors.MCompass_t.prototype.addArf32data = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vpdata.sensors.MCompass_t} returns this
 */
proto.vpdata.sensors.MCompass_t.prototype.clearArf32dataList = function() {
  return this.setArf32dataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.GPSLocationInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.GPSLocationInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.GPSLocationInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    f64longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f64latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f64altitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.GPSLocationInfo_t}
 */
proto.vpdata.sensors.GPSLocationInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.GPSLocationInfo_t;
  return proto.vpdata.sensors.GPSLocationInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.GPSLocationInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.GPSLocationInfo_t}
 */
proto.vpdata.sensors.GPSLocationInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64longitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64latitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64altitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.GPSLocationInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.GPSLocationInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.GPSLocationInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getF64longitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getF64latitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getF64altitude();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GPSLocationInfo_t} returns this
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double f64Longitude = 2;
 * @return {number}
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.getF64longitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GPSLocationInfo_t} returns this
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.setF64longitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double f64Latitude = 3;
 * @return {number}
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.getF64latitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GPSLocationInfo_t} returns this
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.setF64latitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double f64Altitude = 4;
 * @return {number}
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.getF64altitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GPSLocationInfo_t} returns this
 */
proto.vpdata.sensors.GPSLocationInfo_t.prototype.setF64altitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.AccelerometerInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.AccelerometerInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.AccelerometerInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    f32ax: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f32ay: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f32az: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.AccelerometerInfo_t}
 */
proto.vpdata.sensors.AccelerometerInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.AccelerometerInfo_t;
  return proto.vpdata.sensors.AccelerometerInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.AccelerometerInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.AccelerometerInfo_t}
 */
proto.vpdata.sensors.AccelerometerInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32ax(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32ay(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32az(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.AccelerometerInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.AccelerometerInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.AccelerometerInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getF32ax();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getF32ay();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getF32az();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.AccelerometerInfo_t} returns this
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float f32ax = 2;
 * @return {number}
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.getF32ax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.AccelerometerInfo_t} returns this
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.setF32ax = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float f32ay = 3;
 * @return {number}
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.getF32ay = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.AccelerometerInfo_t} returns this
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.setF32ay = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float f32az = 4;
 * @return {number}
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.getF32az = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.AccelerometerInfo_t} returns this
 */
proto.vpdata.sensors.AccelerometerInfo_t.prototype.setF32az = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.GyroscopeInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.GyroscopeInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.GyroscopeInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    f32gx: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f32gy: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f32gz: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.GyroscopeInfo_t}
 */
proto.vpdata.sensors.GyroscopeInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.GyroscopeInfo_t;
  return proto.vpdata.sensors.GyroscopeInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.GyroscopeInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.GyroscopeInfo_t}
 */
proto.vpdata.sensors.GyroscopeInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32gx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32gy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32gz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.GyroscopeInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.GyroscopeInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.GyroscopeInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getF32gx();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getF32gy();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getF32gz();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GyroscopeInfo_t} returns this
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float f32gx = 2;
 * @return {number}
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.getF32gx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GyroscopeInfo_t} returns this
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.setF32gx = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float f32gy = 3;
 * @return {number}
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.getF32gy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GyroscopeInfo_t} returns this
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.setF32gy = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float f32gz = 4;
 * @return {number}
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.getF32gz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.GyroscopeInfo_t} returns this
 */
proto.vpdata.sensors.GyroscopeInfo_t.prototype.setF32gz = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.RotationVectorInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.RotationVectorInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.RotationVectorInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    f32qx: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f32qy: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f32qz: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    f32qw: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t}
 */
proto.vpdata.sensors.RotationVectorInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.RotationVectorInfo_t;
  return proto.vpdata.sensors.RotationVectorInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.RotationVectorInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t}
 */
proto.vpdata.sensors.RotationVectorInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qz(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.RotationVectorInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.RotationVectorInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.RotationVectorInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getF32qx();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getF32qy();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getF32qz();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getF32qw();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t} returns this
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float f32qx = 2;
 * @return {number}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.getF32qx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t} returns this
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.setF32qx = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float f32qy = 3;
 * @return {number}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.getF32qy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t} returns this
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.setF32qy = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float f32qz = 4;
 * @return {number}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.getF32qz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t} returns this
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.setF32qz = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float f32qw = 5;
 * @return {number}
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.getF32qw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.RotationVectorInfo_t} returns this
 */
proto.vpdata.sensors.RotationVectorInfo_t.prototype.setF32qw = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.StepCounterInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.StepCounterInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.StepCounterInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.StepCounterInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    u32stepcounter: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.StepCounterInfo_t}
 */
proto.vpdata.sensors.StepCounterInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.StepCounterInfo_t;
  return proto.vpdata.sensors.StepCounterInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.StepCounterInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.StepCounterInfo_t}
 */
proto.vpdata.sensors.StepCounterInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setU32stepcounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.StepCounterInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.StepCounterInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.StepCounterInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.StepCounterInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getU32stepcounter();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.StepCounterInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.StepCounterInfo_t} returns this
 */
proto.vpdata.sensors.StepCounterInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 u32StepCounter = 2;
 * @return {number}
 */
proto.vpdata.sensors.StepCounterInfo_t.prototype.getU32stepcounter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.StepCounterInfo_t} returns this
 */
proto.vpdata.sensors.StepCounterInfo_t.prototype.setU32stepcounter = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.StepDetectorInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.StepDetectorInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.StepDetectorInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.StepDetectorInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    u32stepdetector: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.StepDetectorInfo_t}
 */
proto.vpdata.sensors.StepDetectorInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.StepDetectorInfo_t;
  return proto.vpdata.sensors.StepDetectorInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.StepDetectorInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.StepDetectorInfo_t}
 */
proto.vpdata.sensors.StepDetectorInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setU32stepdetector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.StepDetectorInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.StepDetectorInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.StepDetectorInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.StepDetectorInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getU32stepdetector();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.StepDetectorInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.StepDetectorInfo_t} returns this
 */
proto.vpdata.sensors.StepDetectorInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool u32StepDetector = 2;
 * @return {boolean}
 */
proto.vpdata.sensors.StepDetectorInfo_t.prototype.getU32stepdetector = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vpdata.sensors.StepDetectorInfo_t} returns this
 */
proto.vpdata.sensors.StepDetectorInfo_t.prototype.setU32stepdetector = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.MagneticFieldInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.MagneticFieldInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.MagneticFieldInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    f32mx: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f32my: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f32mz: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.MagneticFieldInfo_t}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.MagneticFieldInfo_t;
  return proto.vpdata.sensors.MagneticFieldInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.MagneticFieldInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.MagneticFieldInfo_t}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32mx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32my(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32mz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.MagneticFieldInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.MagneticFieldInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.MagneticFieldInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getF32mx();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getF32my();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getF32mz();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.MagneticFieldInfo_t} returns this
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float f32mx = 2;
 * @return {number}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.getF32mx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.MagneticFieldInfo_t} returns this
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.setF32mx = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float f32my = 3;
 * @return {number}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.getF32my = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.MagneticFieldInfo_t} returns this
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.setF32my = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float f32mz = 4;
 * @return {number}
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.getF32mz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.MagneticFieldInfo_t} returns this
 */
proto.vpdata.sensors.MagneticFieldInfo_t.prototype.setF32mz = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vpdata.sensors.PressureInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vpdata.sensors.PressureInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vpdata.sensors.PressureInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.PressureInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64tscapture: jspb.Message.getFieldWithDefault(msg, 1, 0),
    f32pressure: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vpdata.sensors.PressureInfo_t}
 */
proto.vpdata.sensors.PressureInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vpdata.sensors.PressureInfo_t;
  return proto.vpdata.sensors.PressureInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vpdata.sensors.PressureInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vpdata.sensors.PressureInfo_t}
 */
proto.vpdata.sensors.PressureInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64tscapture(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32pressure(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vpdata.sensors.PressureInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vpdata.sensors.PressureInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vpdata.sensors.PressureInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vpdata.sensors.PressureInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64tscapture();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getF32pressure();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional uint64 u64TSCapture = 1;
 * @return {number}
 */
proto.vpdata.sensors.PressureInfo_t.prototype.getU64tscapture = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.PressureInfo_t} returns this
 */
proto.vpdata.sensors.PressureInfo_t.prototype.setU64tscapture = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float f32Pressure = 2;
 * @return {number}
 */
proto.vpdata.sensors.PressureInfo_t.prototype.getF32pressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vpdata.sensors.PressureInfo_t} returns this
 */
proto.vpdata.sensors.PressureInfo_t.prototype.setF32pressure = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


goog.object.extend(exports, proto.vpdata.sensors);
