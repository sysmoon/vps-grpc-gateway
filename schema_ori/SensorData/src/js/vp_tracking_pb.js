// source: vp_tracking.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.vp.tracking.FramePoseInfo_t', null, global);
goog.exportSymbol('proto.vp.tracking.KalmanFilter_t', null, global);
goog.exportSymbol('proto.vp.tracking.MetaTrackingMode_t', null, global);
goog.exportSymbol('proto.vp.tracking.Param_t', null, global);
goog.exportSymbol('proto.vp.tracking.PoseInfo_t', null, global);
goog.exportSymbol('proto.vp.tracking.Pose_t', null, global);
goog.exportSymbol('proto.vp.tracking.VPStatusTrackingMode', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vp.tracking.Pose_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vp.tracking.Pose_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vp.tracking.Pose_t.displayName = 'proto.vp.tracking.Pose_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vp.tracking.PoseInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vp.tracking.PoseInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vp.tracking.PoseInfo_t.displayName = 'proto.vp.tracking.PoseInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vp.tracking.FramePoseInfo_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vp.tracking.FramePoseInfo_t.repeatedFields_, null);
};
goog.inherits(proto.vp.tracking.FramePoseInfo_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vp.tracking.FramePoseInfo_t.displayName = 'proto.vp.tracking.FramePoseInfo_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vp.tracking.KalmanFilter_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vp.tracking.KalmanFilter_t.repeatedFields_, null);
};
goog.inherits(proto.vp.tracking.KalmanFilter_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vp.tracking.KalmanFilter_t.displayName = 'proto.vp.tracking.KalmanFilter_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vp.tracking.Param_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vp.tracking.Param_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vp.tracking.Param_t.displayName = 'proto.vp.tracking.Param_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vp.tracking.MetaTrackingMode_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vp.tracking.MetaTrackingMode_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vp.tracking.MetaTrackingMode_t.displayName = 'proto.vp.tracking.MetaTrackingMode_t';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vp.tracking.Pose_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vp.tracking.Pose_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vp.tracking.Pose_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.Pose_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    f64x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    f64y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f64z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f32qx: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    f32qy: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    f32qz: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    f32qw: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vp.tracking.Pose_t}
 */
proto.vp.tracking.Pose_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vp.tracking.Pose_t;
  return proto.vp.tracking.Pose_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vp.tracking.Pose_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vp.tracking.Pose_t}
 */
proto.vp.tracking.Pose_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64x(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64y(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64z(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qy(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qz(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32qw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vp.tracking.Pose_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vp.tracking.Pose_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vp.tracking.Pose_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.Pose_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getF64x();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getF64y();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getF64z();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getF32qx();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getF32qy();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getF32qz();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getF32qw();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional double f64X = 1;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF64x = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF64x = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double f64Y = 2;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF64y = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF64y = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double f64Z = 3;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF64z = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF64z = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float f32qX = 4;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF32qx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF32qx = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float f32qY = 5;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF32qy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF32qy = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float f32qZ = 6;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF32qz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF32qz = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float f32qW = 7;
 * @return {number}
 */
proto.vp.tracking.Pose_t.prototype.getF32qw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Pose_t} returns this
 */
proto.vp.tracking.Pose_t.prototype.setF32qw = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vp.tracking.PoseInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vp.tracking.PoseInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vp.tracking.PoseInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.PoseInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    u64timestamp: jspb.Message.getFieldWithDefault(msg, 1, 0),
    bposeflag: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    f32poseconfidence: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    stpose: (f = msg.getStpose()) && proto.vp.tracking.Pose_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vp.tracking.PoseInfo_t}
 */
proto.vp.tracking.PoseInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vp.tracking.PoseInfo_t;
  return proto.vp.tracking.PoseInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vp.tracking.PoseInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vp.tracking.PoseInfo_t}
 */
proto.vp.tracking.PoseInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setU64timestamp(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBposeflag(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32poseconfidence(value);
      break;
    case 4:
      var value = new proto.vp.tracking.Pose_t;
      reader.readMessage(value,proto.vp.tracking.Pose_t.deserializeBinaryFromReader);
      msg.setStpose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vp.tracking.PoseInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vp.tracking.PoseInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vp.tracking.PoseInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.PoseInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getU64timestamp();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getBposeflag();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getF32poseconfidence();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getStpose();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vp.tracking.Pose_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 u64Timestamp = 1;
 * @return {number}
 */
proto.vp.tracking.PoseInfo_t.prototype.getU64timestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.PoseInfo_t} returns this
 */
proto.vp.tracking.PoseInfo_t.prototype.setU64timestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool bPoseFlag = 2;
 * @return {boolean}
 */
proto.vp.tracking.PoseInfo_t.prototype.getBposeflag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vp.tracking.PoseInfo_t} returns this
 */
proto.vp.tracking.PoseInfo_t.prototype.setBposeflag = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional float f32PoseConfidence = 3;
 * @return {number}
 */
proto.vp.tracking.PoseInfo_t.prototype.getF32poseconfidence = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.PoseInfo_t} returns this
 */
proto.vp.tracking.PoseInfo_t.prototype.setF32poseconfidence = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional Pose_t stPose = 4;
 * @return {?proto.vp.tracking.Pose_t}
 */
proto.vp.tracking.PoseInfo_t.prototype.getStpose = function() {
  return /** @type{?proto.vp.tracking.Pose_t} */ (
    jspb.Message.getWrapperField(this, proto.vp.tracking.Pose_t, 4));
};


/**
 * @param {?proto.vp.tracking.Pose_t|undefined} value
 * @return {!proto.vp.tracking.PoseInfo_t} returns this
*/
proto.vp.tracking.PoseInfo_t.prototype.setStpose = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vp.tracking.PoseInfo_t} returns this
 */
proto.vp.tracking.PoseInfo_t.prototype.clearStpose = function() {
  return this.setStpose(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vp.tracking.PoseInfo_t.prototype.hasStpose = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vp.tracking.FramePoseInfo_t.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vp.tracking.FramePoseInfo_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vp.tracking.FramePoseInfo_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.FramePoseInfo_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    stvpsposeinfo: (f = msg.getStvpsposeinfo()) && proto.vp.tracking.PoseInfo_t.toObject(includeInstance, f),
    stlastdrposeinfoarrayList: jspb.Message.toObjectList(msg.getStlastdrposeinfoarrayList(),
    proto.vp.tracking.PoseInfo_t.toObject, includeInstance),
    stlastegposeinfoarrayList: jspb.Message.toObjectList(msg.getStlastegposeinfoarrayList(),
    proto.vp.tracking.PoseInfo_t.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vp.tracking.FramePoseInfo_t}
 */
proto.vp.tracking.FramePoseInfo_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vp.tracking.FramePoseInfo_t;
  return proto.vp.tracking.FramePoseInfo_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vp.tracking.FramePoseInfo_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vp.tracking.FramePoseInfo_t}
 */
proto.vp.tracking.FramePoseInfo_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vp.tracking.PoseInfo_t;
      reader.readMessage(value,proto.vp.tracking.PoseInfo_t.deserializeBinaryFromReader);
      msg.setStvpsposeinfo(value);
      break;
    case 2:
      var value = new proto.vp.tracking.PoseInfo_t;
      reader.readMessage(value,proto.vp.tracking.PoseInfo_t.deserializeBinaryFromReader);
      msg.addStlastdrposeinfoarray(value);
      break;
    case 3:
      var value = new proto.vp.tracking.PoseInfo_t;
      reader.readMessage(value,proto.vp.tracking.PoseInfo_t.deserializeBinaryFromReader);
      msg.addStlastegposeinfoarray(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vp.tracking.FramePoseInfo_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vp.tracking.FramePoseInfo_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.FramePoseInfo_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStvpsposeinfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.vp.tracking.PoseInfo_t.serializeBinaryToWriter
    );
  }
  f = message.getStlastdrposeinfoarrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.vp.tracking.PoseInfo_t.serializeBinaryToWriter
    );
  }
  f = message.getStlastegposeinfoarrayList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.vp.tracking.PoseInfo_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional PoseInfo_t stVPSPoseInfo = 1;
 * @return {?proto.vp.tracking.PoseInfo_t}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.getStvpsposeinfo = function() {
  return /** @type{?proto.vp.tracking.PoseInfo_t} */ (
    jspb.Message.getWrapperField(this, proto.vp.tracking.PoseInfo_t, 1));
};


/**
 * @param {?proto.vp.tracking.PoseInfo_t|undefined} value
 * @return {!proto.vp.tracking.FramePoseInfo_t} returns this
*/
proto.vp.tracking.FramePoseInfo_t.prototype.setStvpsposeinfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vp.tracking.FramePoseInfo_t} returns this
 */
proto.vp.tracking.FramePoseInfo_t.prototype.clearStvpsposeinfo = function() {
  return this.setStvpsposeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.hasStvpsposeinfo = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PoseInfo_t stLastDRPoseInfoArray = 2;
 * @return {!Array<!proto.vp.tracking.PoseInfo_t>}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.getStlastdrposeinfoarrayList = function() {
  return /** @type{!Array<!proto.vp.tracking.PoseInfo_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vp.tracking.PoseInfo_t, 2));
};


/**
 * @param {!Array<!proto.vp.tracking.PoseInfo_t>} value
 * @return {!proto.vp.tracking.FramePoseInfo_t} returns this
*/
proto.vp.tracking.FramePoseInfo_t.prototype.setStlastdrposeinfoarrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.vp.tracking.PoseInfo_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vp.tracking.PoseInfo_t}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.addStlastdrposeinfoarray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.vp.tracking.PoseInfo_t, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vp.tracking.FramePoseInfo_t} returns this
 */
proto.vp.tracking.FramePoseInfo_t.prototype.clearStlastdrposeinfoarrayList = function() {
  return this.setStlastdrposeinfoarrayList([]);
};


/**
 * repeated PoseInfo_t stLastEGPoseInfoArray = 3;
 * @return {!Array<!proto.vp.tracking.PoseInfo_t>}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.getStlastegposeinfoarrayList = function() {
  return /** @type{!Array<!proto.vp.tracking.PoseInfo_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vp.tracking.PoseInfo_t, 3));
};


/**
 * @param {!Array<!proto.vp.tracking.PoseInfo_t>} value
 * @return {!proto.vp.tracking.FramePoseInfo_t} returns this
*/
proto.vp.tracking.FramePoseInfo_t.prototype.setStlastegposeinfoarrayList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.vp.tracking.PoseInfo_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vp.tracking.PoseInfo_t}
 */
proto.vp.tracking.FramePoseInfo_t.prototype.addStlastegposeinfoarray = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.vp.tracking.PoseInfo_t, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vp.tracking.FramePoseInfo_t} returns this
 */
proto.vp.tracking.FramePoseInfo_t.prototype.clearStlastegposeinfoarrayList = function() {
  return this.setStlastegposeinfoarrayList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vp.tracking.KalmanFilter_t.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vp.tracking.KalmanFilter_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vp.tracking.KalmanFilter_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vp.tracking.KalmanFilter_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.KalmanFilter_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    f64stateList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    f32covarianceList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vp.tracking.KalmanFilter_t}
 */
proto.vp.tracking.KalmanFilter_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vp.tracking.KalmanFilter_t;
  return proto.vp.tracking.KalmanFilter_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vp.tracking.KalmanFilter_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vp.tracking.KalmanFilter_t}
 */
proto.vp.tracking.KalmanFilter_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addF64state(values[i]);
      }
      break;
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addF32covariance(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vp.tracking.KalmanFilter_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vp.tracking.KalmanFilter_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vp.tracking.KalmanFilter_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.KalmanFilter_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getF64stateList();
  if (f.length > 0) {
    writer.writePackedDouble(
      1,
      f
    );
  }
  f = message.getF32covarianceList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
};


/**
 * repeated double f64State = 1;
 * @return {!Array<number>}
 */
proto.vp.tracking.KalmanFilter_t.prototype.getF64stateList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vp.tracking.KalmanFilter_t} returns this
 */
proto.vp.tracking.KalmanFilter_t.prototype.setF64stateList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vp.tracking.KalmanFilter_t} returns this
 */
proto.vp.tracking.KalmanFilter_t.prototype.addF64state = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vp.tracking.KalmanFilter_t} returns this
 */
proto.vp.tracking.KalmanFilter_t.prototype.clearF64stateList = function() {
  return this.setF64stateList([]);
};


/**
 * repeated float f32Covariance = 2;
 * @return {!Array<number>}
 */
proto.vp.tracking.KalmanFilter_t.prototype.getF32covarianceList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.vp.tracking.KalmanFilter_t} returns this
 */
proto.vp.tracking.KalmanFilter_t.prototype.setF32covarianceList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.vp.tracking.KalmanFilter_t} returns this
 */
proto.vp.tracking.KalmanFilter_t.prototype.addF32covariance = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vp.tracking.KalmanFilter_t} returns this
 */
proto.vp.tracking.KalmanFilter_t.prototype.clearF32covarianceList = function() {
  return this.setF32covarianceList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vp.tracking.Param_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vp.tracking.Param_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vp.tracking.Param_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.Param_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    strname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    s32val: jspb.Message.getFieldWithDefault(msg, 2, 0),
    f32val: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    f64val: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    strval: jspb.Message.getFieldWithDefault(msg, 5, ""),
    bval: jspb.Message.getBooleanFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vp.tracking.Param_t}
 */
proto.vp.tracking.Param_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vp.tracking.Param_t;
  return proto.vp.tracking.Param_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vp.tracking.Param_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vp.tracking.Param_t}
 */
proto.vp.tracking.Param_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrname(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setS32val(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setF32val(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64val(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrval(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vp.tracking.Param_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vp.tracking.Param_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vp.tracking.Param_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.Param_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStrname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getS32val();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getF32val();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getF64val();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getStrval();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBval();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string strName = 1;
 * @return {string}
 */
proto.vp.tracking.Param_t.prototype.getStrname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vp.tracking.Param_t} returns this
 */
proto.vp.tracking.Param_t.prototype.setStrname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 s32Val = 2;
 * @return {number}
 */
proto.vp.tracking.Param_t.prototype.getS32val = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Param_t} returns this
 */
proto.vp.tracking.Param_t.prototype.setS32val = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float f32Val = 3;
 * @return {number}
 */
proto.vp.tracking.Param_t.prototype.getF32val = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Param_t} returns this
 */
proto.vp.tracking.Param_t.prototype.setF32val = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double f64Val = 4;
 * @return {number}
 */
proto.vp.tracking.Param_t.prototype.getF64val = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vp.tracking.Param_t} returns this
 */
proto.vp.tracking.Param_t.prototype.setF64val = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string strVal = 5;
 * @return {string}
 */
proto.vp.tracking.Param_t.prototype.getStrval = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vp.tracking.Param_t} returns this
 */
proto.vp.tracking.Param_t.prototype.setStrval = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool bVal = 6;
 * @return {boolean}
 */
proto.vp.tracking.Param_t.prototype.getBval = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.vp.tracking.Param_t} returns this
 */
proto.vp.tracking.Param_t.prototype.setBval = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.toObject = function(opt_includeInstance) {
  return proto.vp.tracking.MetaTrackingMode_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vp.tracking.MetaTrackingMode_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.MetaTrackingMode_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    evpstatustrackingmode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stvpsposeinfo: (f = msg.getStvpsposeinfo()) && proto.vp.tracking.PoseInfo_t.toObject(includeInstance, f),
    stcorrectingtr: (f = msg.getStcorrectingtr()) && proto.vp.tracking.Pose_t.toObject(includeInstance, f),
    stlinearvelocitykf: (f = msg.getStlinearvelocitykf()) && proto.vp.tracking.KalmanFilter_t.toObject(includeInstance, f),
    stvpsposekf: (f = msg.getStvpsposekf()) && proto.vp.tracking.KalmanFilter_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vp.tracking.MetaTrackingMode_t}
 */
proto.vp.tracking.MetaTrackingMode_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vp.tracking.MetaTrackingMode_t;
  return proto.vp.tracking.MetaTrackingMode_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vp.tracking.MetaTrackingMode_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vp.tracking.MetaTrackingMode_t}
 */
proto.vp.tracking.MetaTrackingMode_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.vp.tracking.VPStatusTrackingMode} */ (reader.readEnum());
      msg.setEvpstatustrackingmode(value);
      break;
    case 2:
      var value = new proto.vp.tracking.PoseInfo_t;
      reader.readMessage(value,proto.vp.tracking.PoseInfo_t.deserializeBinaryFromReader);
      msg.setStvpsposeinfo(value);
      break;
    case 3:
      var value = new proto.vp.tracking.Pose_t;
      reader.readMessage(value,proto.vp.tracking.Pose_t.deserializeBinaryFromReader);
      msg.setStcorrectingtr(value);
      break;
    case 4:
      var value = new proto.vp.tracking.KalmanFilter_t;
      reader.readMessage(value,proto.vp.tracking.KalmanFilter_t.deserializeBinaryFromReader);
      msg.setStlinearvelocitykf(value);
      break;
    case 5:
      var value = new proto.vp.tracking.KalmanFilter_t;
      reader.readMessage(value,proto.vp.tracking.KalmanFilter_t.deserializeBinaryFromReader);
      msg.setStvpsposekf(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vp.tracking.MetaTrackingMode_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vp.tracking.MetaTrackingMode_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vp.tracking.MetaTrackingMode_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEvpstatustrackingmode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStvpsposeinfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.vp.tracking.PoseInfo_t.serializeBinaryToWriter
    );
  }
  f = message.getStcorrectingtr();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.vp.tracking.Pose_t.serializeBinaryToWriter
    );
  }
  f = message.getStlinearvelocitykf();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.vp.tracking.KalmanFilter_t.serializeBinaryToWriter
    );
  }
  f = message.getStvpsposekf();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.vp.tracking.KalmanFilter_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional VPStatusTrackingMode eVPStatusTrackingMode = 1;
 * @return {!proto.vp.tracking.VPStatusTrackingMode}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.getEvpstatustrackingmode = function() {
  return /** @type {!proto.vp.tracking.VPStatusTrackingMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.vp.tracking.VPStatusTrackingMode} value
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.setEvpstatustrackingmode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PoseInfo_t stVPSPoseInfo = 2;
 * @return {?proto.vp.tracking.PoseInfo_t}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.getStvpsposeinfo = function() {
  return /** @type{?proto.vp.tracking.PoseInfo_t} */ (
    jspb.Message.getWrapperField(this, proto.vp.tracking.PoseInfo_t, 2));
};


/**
 * @param {?proto.vp.tracking.PoseInfo_t|undefined} value
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
*/
proto.vp.tracking.MetaTrackingMode_t.prototype.setStvpsposeinfo = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.clearStvpsposeinfo = function() {
  return this.setStvpsposeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.hasStvpsposeinfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Pose_t stCorrectingTr = 3;
 * @return {?proto.vp.tracking.Pose_t}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.getStcorrectingtr = function() {
  return /** @type{?proto.vp.tracking.Pose_t} */ (
    jspb.Message.getWrapperField(this, proto.vp.tracking.Pose_t, 3));
};


/**
 * @param {?proto.vp.tracking.Pose_t|undefined} value
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
*/
proto.vp.tracking.MetaTrackingMode_t.prototype.setStcorrectingtr = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.clearStcorrectingtr = function() {
  return this.setStcorrectingtr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.hasStcorrectingtr = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional KalmanFilter_t stLinearVelocityKF = 4;
 * @return {?proto.vp.tracking.KalmanFilter_t}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.getStlinearvelocitykf = function() {
  return /** @type{?proto.vp.tracking.KalmanFilter_t} */ (
    jspb.Message.getWrapperField(this, proto.vp.tracking.KalmanFilter_t, 4));
};


/**
 * @param {?proto.vp.tracking.KalmanFilter_t|undefined} value
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
*/
proto.vp.tracking.MetaTrackingMode_t.prototype.setStlinearvelocitykf = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.clearStlinearvelocitykf = function() {
  return this.setStlinearvelocitykf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.hasStlinearvelocitykf = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional KalmanFilter_t stVPSPoseKF = 5;
 * @return {?proto.vp.tracking.KalmanFilter_t}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.getStvpsposekf = function() {
  return /** @type{?proto.vp.tracking.KalmanFilter_t} */ (
    jspb.Message.getWrapperField(this, proto.vp.tracking.KalmanFilter_t, 5));
};


/**
 * @param {?proto.vp.tracking.KalmanFilter_t|undefined} value
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
*/
proto.vp.tracking.MetaTrackingMode_t.prototype.setStvpsposekf = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vp.tracking.MetaTrackingMode_t} returns this
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.clearStvpsposekf = function() {
  return this.setStvpsposekf(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vp.tracking.MetaTrackingMode_t.prototype.hasStvpsposekf = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.vp.tracking.VPStatusTrackingMode = {
  ELOST: 0,
  EINITIALIZED: 1,
  ELOCALIZED: 2,
  ETRACKED: 3,
  ECOSTING: 4,
  ETRANSITION: 5
};

goog.object.extend(exports, proto.vp.tracking);
