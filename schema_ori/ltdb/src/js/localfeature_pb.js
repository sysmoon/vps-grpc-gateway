// source: localfeature.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vgeodb_common_pb = require('./vgeodb_common_pb.js');
goog.object.extend(proto, vgeodb_common_pb);
goog.exportSymbol('proto.VgeoDB.KP2DDesc_t', null, global);
goog.exportSymbol('proto.VgeoDB.KP2DDesc_t.eDescType', null, global);
goog.exportSymbol('proto.VgeoDB.KeyPoint_t', null, global);
goog.exportSymbol('proto.VgeoDB.LocalFeatMeta_t', null, global);
goog.exportSymbol('proto.VgeoDB.LocalFeature', null, global);
goog.exportSymbol('proto.VgeoDB.LocalFeatureDesc', null, global);
goog.exportSymbol('proto.VgeoDB.LocalFeatureDesc.UlocalfeatureTCase', null, global);
goog.exportSymbol('proto.VgeoDB.LocalFeatureSet', null, global);
goog.exportSymbol('proto.VgeoDB.SuperPointDesc_t', null, global);
goog.exportSymbol('proto.VgeoDB.SuperPointDesc_t.eDescType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.SuperPointDesc_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.SuperPointDesc_t.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.SuperPointDesc_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.SuperPointDesc_t.displayName = 'proto.VgeoDB.SuperPointDesc_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.KP2DDesc_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.KP2DDesc_t.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.KP2DDesc_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.KP2DDesc_t.displayName = 'proto.VgeoDB.KP2DDesc_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.LocalFeatureDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VgeoDB.LocalFeatureDesc.oneofGroups_);
};
goog.inherits(proto.VgeoDB.LocalFeatureDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.LocalFeatureDesc.displayName = 'proto.VgeoDB.LocalFeatureDesc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.LocalFeatMeta_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.LocalFeatMeta_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.LocalFeatMeta_t.displayName = 'proto.VgeoDB.LocalFeatMeta_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.KeyPoint_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.KeyPoint_t.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.KeyPoint_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.KeyPoint_t.displayName = 'proto.VgeoDB.KeyPoint_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.LocalFeature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.LocalFeature.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.LocalFeature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.LocalFeature.displayName = 'proto.VgeoDB.LocalFeature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.LocalFeatureSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.LocalFeatureSet.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.LocalFeatureSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.LocalFeatureSet.displayName = 'proto.VgeoDB.LocalFeatureSet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.SuperPointDesc_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.SuperPointDesc_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.SuperPointDesc_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.SuperPointDesc_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.SuperPointDesc_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    arfdescriptorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    etype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.SuperPointDesc_t}
 */
proto.VgeoDB.SuperPointDesc_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.SuperPointDesc_t;
  return proto.VgeoDB.SuperPointDesc_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.SuperPointDesc_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.SuperPointDesc_t}
 */
proto.VgeoDB.SuperPointDesc_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArfdescriptor(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!proto.VgeoDB.SuperPointDesc_t.eDescType} */ (reader.readEnum());
      msg.setEtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.SuperPointDesc_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.SuperPointDesc_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.SuperPointDesc_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.SuperPointDesc_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArfdescriptorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getEtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VgeoDB.SuperPointDesc_t.eDescType = {
  SPP_512_V1: 0
};

/**
 * repeated float arfDescriptor = 2;
 * @return {!Array<number>}
 */
proto.VgeoDB.SuperPointDesc_t.prototype.getArfdescriptorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.SuperPointDesc_t} returns this
 */
proto.VgeoDB.SuperPointDesc_t.prototype.setArfdescriptorList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.SuperPointDesc_t} returns this
 */
proto.VgeoDB.SuperPointDesc_t.prototype.addArfdescriptor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.SuperPointDesc_t} returns this
 */
proto.VgeoDB.SuperPointDesc_t.prototype.clearArfdescriptorList = function() {
  return this.setArfdescriptorList([]);
};


/**
 * optional eDescType eType = 3;
 * @return {!proto.VgeoDB.SuperPointDesc_t.eDescType}
 */
proto.VgeoDB.SuperPointDesc_t.prototype.getEtype = function() {
  return /** @type {!proto.VgeoDB.SuperPointDesc_t.eDescType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VgeoDB.SuperPointDesc_t.eDescType} value
 * @return {!proto.VgeoDB.SuperPointDesc_t} returns this
 */
proto.VgeoDB.SuperPointDesc_t.prototype.setEtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.KP2DDesc_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.KP2DDesc_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.KP2DDesc_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.KP2DDesc_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.KP2DDesc_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    arfdescriptorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    etype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.KP2DDesc_t}
 */
proto.VgeoDB.KP2DDesc_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.KP2DDesc_t;
  return proto.VgeoDB.KP2DDesc_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.KP2DDesc_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.KP2DDesc_t}
 */
proto.VgeoDB.KP2DDesc_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArfdescriptor(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!proto.VgeoDB.KP2DDesc_t.eDescType} */ (reader.readEnum());
      msg.setEtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.KP2DDesc_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.KP2DDesc_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.KP2DDesc_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.KP2DDesc_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArfdescriptorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getEtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VgeoDB.KP2DDesc_t.eDescType = {
  KP2D_256_V1: 0
};

/**
 * repeated float arfDescriptor = 2;
 * @return {!Array<number>}
 */
proto.VgeoDB.KP2DDesc_t.prototype.getArfdescriptorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.KP2DDesc_t} returns this
 */
proto.VgeoDB.KP2DDesc_t.prototype.setArfdescriptorList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.KP2DDesc_t} returns this
 */
proto.VgeoDB.KP2DDesc_t.prototype.addArfdescriptor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.KP2DDesc_t} returns this
 */
proto.VgeoDB.KP2DDesc_t.prototype.clearArfdescriptorList = function() {
  return this.setArfdescriptorList([]);
};


/**
 * optional eDescType eType = 3;
 * @return {!proto.VgeoDB.KP2DDesc_t.eDescType}
 */
proto.VgeoDB.KP2DDesc_t.prototype.getEtype = function() {
  return /** @type {!proto.VgeoDB.KP2DDesc_t.eDescType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VgeoDB.KP2DDesc_t.eDescType} value
 * @return {!proto.VgeoDB.KP2DDesc_t} returns this
 */
proto.VgeoDB.KP2DDesc_t.prototype.setEtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VgeoDB.LocalFeatureDesc.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.VgeoDB.LocalFeatureDesc.UlocalfeatureTCase = {
  ULOCALFEATURE_T_NOT_SET: 0,
  STSPPDESC: 3,
  STKP2DDESC: 4
};

/**
 * @return {proto.VgeoDB.LocalFeatureDesc.UlocalfeatureTCase}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.getUlocalfeatureTCase = function() {
  return /** @type {proto.VgeoDB.LocalFeatureDesc.UlocalfeatureTCase} */(jspb.Message.computeOneofCase(this, proto.VgeoDB.LocalFeatureDesc.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.LocalFeatureDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.LocalFeatureDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeatureDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    stsppdesc: (f = msg.getStsppdesc()) && proto.VgeoDB.SuperPointDesc_t.toObject(includeInstance, f),
    stkp2ddesc: (f = msg.getStkp2ddesc()) && proto.VgeoDB.KP2DDesc_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.LocalFeatureDesc}
 */
proto.VgeoDB.LocalFeatureDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.LocalFeatureDesc;
  return proto.VgeoDB.LocalFeatureDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.LocalFeatureDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.LocalFeatureDesc}
 */
proto.VgeoDB.LocalFeatureDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.VgeoDB.SuperPointDesc_t;
      reader.readMessage(value,proto.VgeoDB.SuperPointDesc_t.deserializeBinaryFromReader);
      msg.setStsppdesc(value);
      break;
    case 4:
      var value = new proto.VgeoDB.KP2DDesc_t;
      reader.readMessage(value,proto.VgeoDB.KP2DDesc_t.deserializeBinaryFromReader);
      msg.setStkp2ddesc(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.LocalFeatureDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.LocalFeatureDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeatureDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStsppdesc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.VgeoDB.SuperPointDesc_t.serializeBinaryToWriter
    );
  }
  f = message.getStkp2ddesc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VgeoDB.KP2DDesc_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional SuperPointDesc_t stSPPDesc = 3;
 * @return {?proto.VgeoDB.SuperPointDesc_t}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.getStsppdesc = function() {
  return /** @type{?proto.VgeoDB.SuperPointDesc_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.SuperPointDesc_t, 3));
};


/**
 * @param {?proto.VgeoDB.SuperPointDesc_t|undefined} value
 * @return {!proto.VgeoDB.LocalFeatureDesc} returns this
*/
proto.VgeoDB.LocalFeatureDesc.prototype.setStsppdesc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.VgeoDB.LocalFeatureDesc.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.LocalFeatureDesc} returns this
 */
proto.VgeoDB.LocalFeatureDesc.prototype.clearStsppdesc = function() {
  return this.setStsppdesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.hasStsppdesc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional KP2DDesc_t stKP2DDesc = 4;
 * @return {?proto.VgeoDB.KP2DDesc_t}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.getStkp2ddesc = function() {
  return /** @type{?proto.VgeoDB.KP2DDesc_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.KP2DDesc_t, 4));
};


/**
 * @param {?proto.VgeoDB.KP2DDesc_t|undefined} value
 * @return {!proto.VgeoDB.LocalFeatureDesc} returns this
*/
proto.VgeoDB.LocalFeatureDesc.prototype.setStkp2ddesc = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.VgeoDB.LocalFeatureDesc.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.LocalFeatureDesc} returns this
 */
proto.VgeoDB.LocalFeatureDesc.prototype.clearStkp2ddesc = function() {
  return this.setStkp2ddesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.LocalFeatureDesc.prototype.hasStkp2ddesc = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.LocalFeatMeta_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.LocalFeatMeta_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeatMeta_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    un64uniqueid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    un64keypointcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    un64groupid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    streflocation: (f = msg.getStreflocation()) && vgeodb_common_pb.XYZ64_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.LocalFeatMeta_t}
 */
proto.VgeoDB.LocalFeatMeta_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.LocalFeatMeta_t;
  return proto.VgeoDB.LocalFeatMeta_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.LocalFeatMeta_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.LocalFeatMeta_t}
 */
proto.VgeoDB.LocalFeatMeta_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64uniqueid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64keypointcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64groupid(value);
      break;
    case 4:
      var value = new vgeodb_common_pb.XYZ64_t;
      reader.readMessage(value,vgeodb_common_pb.XYZ64_t.deserializeBinaryFromReader);
      msg.setStreflocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.LocalFeatMeta_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.LocalFeatMeta_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeatMeta_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUn64uniqueid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUn64keypointcount();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUn64groupid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getStreflocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      vgeodb_common_pb.XYZ64_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 un64UniqueID = 1;
 * @return {number}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.getUn64uniqueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.LocalFeatMeta_t} returns this
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.setUn64uniqueid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 un64KeyPointCount = 2;
 * @return {number}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.getUn64keypointcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.LocalFeatMeta_t} returns this
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.setUn64keypointcount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 un64GroupID = 3;
 * @return {number}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.getUn64groupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.LocalFeatMeta_t} returns this
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.setUn64groupid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional common.XYZ64_t stRefLocation = 4;
 * @return {?proto.VgeoDB.common.XYZ64_t}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.getStreflocation = function() {
  return /** @type{?proto.VgeoDB.common.XYZ64_t} */ (
    jspb.Message.getWrapperField(this, vgeodb_common_pb.XYZ64_t, 4));
};


/**
 * @param {?proto.VgeoDB.common.XYZ64_t|undefined} value
 * @return {!proto.VgeoDB.LocalFeatMeta_t} returns this
*/
proto.VgeoDB.LocalFeatMeta_t.prototype.setStreflocation = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.LocalFeatMeta_t} returns this
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.clearStreflocation = function() {
  return this.setStreflocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.LocalFeatMeta_t.prototype.hasStreflocation = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.KeyPoint_t.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.KeyPoint_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.KeyPoint_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.KeyPoint_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.KeyPoint_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    un64index: jspb.Message.getFieldWithDefault(msg, 1, 0),
    un64timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    stlocation: (f = msg.getStlocation()) && vgeodb_common_pb.XYZ32_t.toObject(includeInstance, f),
    udescriptor: (f = msg.getUdescriptor()) && proto.VgeoDB.LocalFeatureDesc.toObject(includeInstance, f),
    arun64keyframeuniqueidList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    arun64keyframeindexList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    arstkeypointimageList: jspb.Message.toObjectList(msg.getArstkeypointimageList(),
    vgeodb_common_pb.UVPoint_t.toObject, includeInstance),
    fsimilarity: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.KeyPoint_t}
 */
proto.VgeoDB.KeyPoint_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.KeyPoint_t;
  return proto.VgeoDB.KeyPoint_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.KeyPoint_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.KeyPoint_t}
 */
proto.VgeoDB.KeyPoint_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64index(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64timestamp(value);
      break;
    case 3:
      var value = new vgeodb_common_pb.XYZ32_t;
      reader.readMessage(value,vgeodb_common_pb.XYZ32_t.deserializeBinaryFromReader);
      msg.setStlocation(value);
      break;
    case 4:
      var value = new proto.VgeoDB.LocalFeatureDesc;
      reader.readMessage(value,proto.VgeoDB.LocalFeatureDesc.deserializeBinaryFromReader);
      msg.setUdescriptor(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArun64keyframeuniqueid(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArun64keyframeindex(values[i]);
      }
      break;
    case 7:
      var value = new vgeodb_common_pb.UVPoint_t;
      reader.readMessage(value,vgeodb_common_pb.UVPoint_t.deserializeBinaryFromReader);
      msg.addArstkeypointimage(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFsimilarity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.KeyPoint_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.KeyPoint_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.KeyPoint_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.KeyPoint_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUn64index();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUn64timestamp();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getStlocation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      vgeodb_common_pb.XYZ32_t.serializeBinaryToWriter
    );
  }
  f = message.getUdescriptor();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.VgeoDB.LocalFeatureDesc.serializeBinaryToWriter
    );
  }
  f = message.getArun64keyframeuniqueidList();
  if (f.length > 0) {
    writer.writePackedUint64(
      5,
      f
    );
  }
  f = message.getArun64keyframeindexList();
  if (f.length > 0) {
    writer.writePackedUint64(
      6,
      f
    );
  }
  f = message.getArstkeypointimageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      vgeodb_common_pb.UVPoint_t.serializeBinaryToWriter
    );
  }
  f = message.getFsimilarity();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional uint64 un64Index = 1;
 * @return {number}
 */
proto.VgeoDB.KeyPoint_t.prototype.getUn64index = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.setUn64index = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 un64Timestamp = 2;
 * @return {number}
 */
proto.VgeoDB.KeyPoint_t.prototype.getUn64timestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.setUn64timestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional common.XYZ32_t stLocation = 3;
 * @return {?proto.VgeoDB.common.XYZ32_t}
 */
proto.VgeoDB.KeyPoint_t.prototype.getStlocation = function() {
  return /** @type{?proto.VgeoDB.common.XYZ32_t} */ (
    jspb.Message.getWrapperField(this, vgeodb_common_pb.XYZ32_t, 3));
};


/**
 * @param {?proto.VgeoDB.common.XYZ32_t|undefined} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
*/
proto.VgeoDB.KeyPoint_t.prototype.setStlocation = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.clearStlocation = function() {
  return this.setStlocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.KeyPoint_t.prototype.hasStlocation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LocalFeatureDesc uDescriptor = 4;
 * @return {?proto.VgeoDB.LocalFeatureDesc}
 */
proto.VgeoDB.KeyPoint_t.prototype.getUdescriptor = function() {
  return /** @type{?proto.VgeoDB.LocalFeatureDesc} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.LocalFeatureDesc, 4));
};


/**
 * @param {?proto.VgeoDB.LocalFeatureDesc|undefined} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
*/
proto.VgeoDB.KeyPoint_t.prototype.setUdescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.clearUdescriptor = function() {
  return this.setUdescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.KeyPoint_t.prototype.hasUdescriptor = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated uint64 arun64KeyframeUniqueID = 5;
 * @return {!Array<number>}
 */
proto.VgeoDB.KeyPoint_t.prototype.getArun64keyframeuniqueidList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.setArun64keyframeuniqueidList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.addArun64keyframeuniqueid = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.clearArun64keyframeuniqueidList = function() {
  return this.setArun64keyframeuniqueidList([]);
};


/**
 * repeated uint64 arun64KeyframeIndex = 6;
 * @return {!Array<number>}
 */
proto.VgeoDB.KeyPoint_t.prototype.getArun64keyframeindexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.setArun64keyframeindexList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.addArun64keyframeindex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.clearArun64keyframeindexList = function() {
  return this.setArun64keyframeindexList([]);
};


/**
 * repeated common.UVPoint_t arstKeyPointImage = 7;
 * @return {!Array<!proto.VgeoDB.common.UVPoint_t>}
 */
proto.VgeoDB.KeyPoint_t.prototype.getArstkeypointimageList = function() {
  return /** @type{!Array<!proto.VgeoDB.common.UVPoint_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, vgeodb_common_pb.UVPoint_t, 7));
};


/**
 * @param {!Array<!proto.VgeoDB.common.UVPoint_t>} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
*/
proto.VgeoDB.KeyPoint_t.prototype.setArstkeypointimageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.VgeoDB.common.UVPoint_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.common.UVPoint_t}
 */
proto.VgeoDB.KeyPoint_t.prototype.addArstkeypointimage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.VgeoDB.common.UVPoint_t, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.clearArstkeypointimageList = function() {
  return this.setArstkeypointimageList([]);
};


/**
 * optional float fSimilarity = 11;
 * @return {number}
 */
proto.VgeoDB.KeyPoint_t.prototype.getFsimilarity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.KeyPoint_t} returns this
 */
proto.VgeoDB.KeyPoint_t.prototype.setFsimilarity = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.LocalFeature.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.LocalFeature.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.LocalFeature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.LocalFeature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeature.toObject = function(includeInstance, msg) {
  var f, obj = {
    stmeta: (f = msg.getStmeta()) && proto.VgeoDB.LocalFeatMeta_t.toObject(includeInstance, f),
    stkeypointList: jspb.Message.toObjectList(msg.getStkeypointList(),
    proto.VgeoDB.KeyPoint_t.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.LocalFeature}
 */
proto.VgeoDB.LocalFeature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.LocalFeature;
  return proto.VgeoDB.LocalFeature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.LocalFeature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.LocalFeature}
 */
proto.VgeoDB.LocalFeature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.LocalFeatMeta_t;
      reader.readMessage(value,proto.VgeoDB.LocalFeatMeta_t.deserializeBinaryFromReader);
      msg.setStmeta(value);
      break;
    case 2:
      var value = new proto.VgeoDB.KeyPoint_t;
      reader.readMessage(value,proto.VgeoDB.KeyPoint_t.deserializeBinaryFromReader);
      msg.addStkeypoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.LocalFeature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.LocalFeature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.LocalFeature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStmeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VgeoDB.LocalFeatMeta_t.serializeBinaryToWriter
    );
  }
  f = message.getStkeypointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.VgeoDB.KeyPoint_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional LocalFeatMeta_t stMeta = 1;
 * @return {?proto.VgeoDB.LocalFeatMeta_t}
 */
proto.VgeoDB.LocalFeature.prototype.getStmeta = function() {
  return /** @type{?proto.VgeoDB.LocalFeatMeta_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.LocalFeatMeta_t, 1));
};


/**
 * @param {?proto.VgeoDB.LocalFeatMeta_t|undefined} value
 * @return {!proto.VgeoDB.LocalFeature} returns this
*/
proto.VgeoDB.LocalFeature.prototype.setStmeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.LocalFeature} returns this
 */
proto.VgeoDB.LocalFeature.prototype.clearStmeta = function() {
  return this.setStmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.LocalFeature.prototype.hasStmeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated KeyPoint_t stKeypoint = 2;
 * @return {!Array<!proto.VgeoDB.KeyPoint_t>}
 */
proto.VgeoDB.LocalFeature.prototype.getStkeypointList = function() {
  return /** @type{!Array<!proto.VgeoDB.KeyPoint_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VgeoDB.KeyPoint_t, 2));
};


/**
 * @param {!Array<!proto.VgeoDB.KeyPoint_t>} value
 * @return {!proto.VgeoDB.LocalFeature} returns this
*/
proto.VgeoDB.LocalFeature.prototype.setStkeypointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.VgeoDB.KeyPoint_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.KeyPoint_t}
 */
proto.VgeoDB.LocalFeature.prototype.addStkeypoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.VgeoDB.KeyPoint_t, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.LocalFeature} returns this
 */
proto.VgeoDB.LocalFeature.prototype.clearStkeypointList = function() {
  return this.setStkeypointList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.LocalFeatureSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.LocalFeatureSet.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.LocalFeatureSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.LocalFeatureSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeatureSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    arstlocalfeatureList: jspb.Message.toObjectList(msg.getArstlocalfeatureList(),
    proto.VgeoDB.LocalFeature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.LocalFeatureSet}
 */
proto.VgeoDB.LocalFeatureSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.LocalFeatureSet;
  return proto.VgeoDB.LocalFeatureSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.LocalFeatureSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.LocalFeatureSet}
 */
proto.VgeoDB.LocalFeatureSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.LocalFeature;
      reader.readMessage(value,proto.VgeoDB.LocalFeature.deserializeBinaryFromReader);
      msg.addArstlocalfeature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.LocalFeatureSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.LocalFeatureSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.LocalFeatureSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.LocalFeatureSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArstlocalfeatureList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VgeoDB.LocalFeature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LocalFeature arstLocalFeature = 1;
 * @return {!Array<!proto.VgeoDB.LocalFeature>}
 */
proto.VgeoDB.LocalFeatureSet.prototype.getArstlocalfeatureList = function() {
  return /** @type{!Array<!proto.VgeoDB.LocalFeature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VgeoDB.LocalFeature, 1));
};


/**
 * @param {!Array<!proto.VgeoDB.LocalFeature>} value
 * @return {!proto.VgeoDB.LocalFeatureSet} returns this
*/
proto.VgeoDB.LocalFeatureSet.prototype.setArstlocalfeatureList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VgeoDB.LocalFeature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.LocalFeature}
 */
proto.VgeoDB.LocalFeatureSet.prototype.addArstlocalfeature = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VgeoDB.LocalFeature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.LocalFeatureSet} returns this
 */
proto.VgeoDB.LocalFeatureSet.prototype.clearArstlocalfeatureList = function() {
  return this.setArstlocalfeatureList([]);
};


goog.object.extend(exports, proto.VgeoDB);
