// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vp_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vp_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vp_tracking.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vp_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vp_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fstate_2eproto;
namespace vpdata {
namespace state {
class VPState_t;
struct VPState_tDefaultTypeInternal;
extern VPState_tDefaultTypeInternal _VPState_t_default_instance_;
}  // namespace state
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> ::vpdata::state::VPState_t* Arena::CreateMaybeMessage<::vpdata::state::VPState_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vpdata {
namespace state {

enum VPState_t_VPStatus : int {
  VPState_t_VPStatus_eUNKNOWN_STATUS = 0,
  VPState_t_VPStatus_eINIT = 1,
  VPState_t_VPStatus_eTRACK = 2,
  VPState_t_VPStatus_eCOSTING = 3,
  VPState_t_VPStatus_eFAIL = 4,
  VPState_t_VPStatus_VPState_t_VPStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VPState_t_VPStatus_VPState_t_VPStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VPState_t_VPStatus_IsValid(int value);
constexpr VPState_t_VPStatus VPState_t_VPStatus_VPStatus_MIN = VPState_t_VPStatus_eUNKNOWN_STATUS;
constexpr VPState_t_VPStatus VPState_t_VPStatus_VPStatus_MAX = VPState_t_VPStatus_eFAIL;
constexpr int VPState_t_VPStatus_VPStatus_ARRAYSIZE = VPState_t_VPStatus_VPStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPState_t_VPStatus_descriptor();
template<typename T>
inline const std::string& VPState_t_VPStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VPState_t_VPStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VPState_t_VPStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VPState_t_VPStatus_descriptor(), enum_t_value);
}
inline bool VPState_t_VPStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VPState_t_VPStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VPState_t_VPStatus>(
    VPState_t_VPStatus_descriptor(), name, value);
}
// ===================================================================

class VPState_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.state.VPState_t) */ {
 public:
  inline VPState_t() : VPState_t(nullptr) {}
  ~VPState_t() override;
  explicit constexpr VPState_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPState_t(const VPState_t& from);
  VPState_t(VPState_t&& from) noexcept
    : VPState_t() {
    *this = ::std::move(from);
  }

  inline VPState_t& operator=(const VPState_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPState_t& operator=(VPState_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPState_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPState_t* internal_default_instance() {
    return reinterpret_cast<const VPState_t*>(
               &_VPState_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VPState_t& a, VPState_t& b) {
    a.Swap(&b);
  }
  inline void Swap(VPState_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPState_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPState_t* New() const final {
    return new VPState_t();
  }

  VPState_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPState_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VPState_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VPState_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPState_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.state.VPState_t";
  }
  protected:
  explicit VPState_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef VPState_t_VPStatus VPStatus;
  static constexpr VPStatus eUNKNOWN_STATUS =
    VPState_t_VPStatus_eUNKNOWN_STATUS;
  static constexpr VPStatus eINIT =
    VPState_t_VPStatus_eINIT;
  static constexpr VPStatus eTRACK =
    VPState_t_VPStatus_eTRACK;
  static constexpr VPStatus eCOSTING =
    VPState_t_VPStatus_eCOSTING;
  static constexpr VPStatus eFAIL =
    VPState_t_VPStatus_eFAIL;
  static inline bool VPStatus_IsValid(int value) {
    return VPState_t_VPStatus_IsValid(value);
  }
  static constexpr VPStatus VPStatus_MIN =
    VPState_t_VPStatus_VPStatus_MIN;
  static constexpr VPStatus VPStatus_MAX =
    VPState_t_VPStatus_VPStatus_MAX;
  static constexpr int VPStatus_ARRAYSIZE =
    VPState_t_VPStatus_VPStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VPStatus_descriptor() {
    return VPState_t_VPStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& VPStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VPStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VPStatus_Name.");
    return VPState_t_VPStatus_Name(enum_t_value);
  }
  static inline bool VPStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      VPStatus* value) {
    return VPState_t_VPStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArf64LastLocationFieldNumber = 3,
    kArf32LastOrientationFieldNumber = 4,
    kArf32LastDRPoseFieldNumber = 5,
    kArf32CurDRPoseFieldNumber = 6,
    kStFramePoseInfoSetFieldNumber = 8,
    kStParamSetFieldNumber = 11,
    kStLinearVelocityKFFieldNumber = 9,
    kStVPSPoseKFFieldNumber = 10,
    kU64TSLastLocFieldNumber = 2,
    kEVPStatusFieldNumber = 1,
    kEVPStatusTrackingModeFieldNumber = 7,
  };
  // repeated double arf64LastLocation = 3;
  int arf64lastlocation_size() const;
  private:
  int _internal_arf64lastlocation_size() const;
  public:
  void clear_arf64lastlocation();
  private:
  double _internal_arf64lastlocation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arf64lastlocation() const;
  void _internal_add_arf64lastlocation(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arf64lastlocation();
  public:
  double arf64lastlocation(int index) const;
  void set_arf64lastlocation(int index, double value);
  void add_arf64lastlocation(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arf64lastlocation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arf64lastlocation();

  // repeated float arf32LastOrientation = 4;
  int arf32lastorientation_size() const;
  private:
  int _internal_arf32lastorientation_size() const;
  public:
  void clear_arf32lastorientation();
  private:
  float _internal_arf32lastorientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32lastorientation() const;
  void _internal_add_arf32lastorientation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32lastorientation();
  public:
  float arf32lastorientation(int index) const;
  void set_arf32lastorientation(int index, float value);
  void add_arf32lastorientation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32lastorientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32lastorientation();

  // repeated float arf32LastDRPose = 5;
  int arf32lastdrpose_size() const;
  private:
  int _internal_arf32lastdrpose_size() const;
  public:
  void clear_arf32lastdrpose();
  private:
  float _internal_arf32lastdrpose(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32lastdrpose() const;
  void _internal_add_arf32lastdrpose(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32lastdrpose();
  public:
  float arf32lastdrpose(int index) const;
  void set_arf32lastdrpose(int index, float value);
  void add_arf32lastdrpose(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32lastdrpose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32lastdrpose();

  // repeated float arf32CurDRPose = 6;
  int arf32curdrpose_size() const;
  private:
  int _internal_arf32curdrpose_size() const;
  public:
  void clear_arf32curdrpose();
  private:
  float _internal_arf32curdrpose(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32curdrpose() const;
  void _internal_add_arf32curdrpose(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32curdrpose();
  public:
  float arf32curdrpose(int index) const;
  void set_arf32curdrpose(int index, float value);
  void add_arf32curdrpose(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32curdrpose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32curdrpose();

  // repeated .vp.tracking.FramePoseInfo_t stFramePoseInfoSet = 8;
  int stframeposeinfoset_size() const;
  private:
  int _internal_stframeposeinfoset_size() const;
  public:
  void clear_stframeposeinfoset();
  ::vp::tracking::FramePoseInfo_t* mutable_stframeposeinfoset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::FramePoseInfo_t >*
      mutable_stframeposeinfoset();
  private:
  const ::vp::tracking::FramePoseInfo_t& _internal_stframeposeinfoset(int index) const;
  ::vp::tracking::FramePoseInfo_t* _internal_add_stframeposeinfoset();
  public:
  const ::vp::tracking::FramePoseInfo_t& stframeposeinfoset(int index) const;
  ::vp::tracking::FramePoseInfo_t* add_stframeposeinfoset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::FramePoseInfo_t >&
      stframeposeinfoset() const;

  // repeated .vp.tracking.Param_t stParamSet = 11;
  int stparamset_size() const;
  private:
  int _internal_stparamset_size() const;
  public:
  void clear_stparamset();
  ::vp::tracking::Param_t* mutable_stparamset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::Param_t >*
      mutable_stparamset();
  private:
  const ::vp::tracking::Param_t& _internal_stparamset(int index) const;
  ::vp::tracking::Param_t* _internal_add_stparamset();
  public:
  const ::vp::tracking::Param_t& stparamset(int index) const;
  ::vp::tracking::Param_t* add_stparamset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::Param_t >&
      stparamset() const;

  // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 9;
  bool has_stlinearvelocitykf() const;
  private:
  bool _internal_has_stlinearvelocitykf() const;
  public:
  void clear_stlinearvelocitykf();
  const ::vp::tracking::KalmanFilter_t& stlinearvelocitykf() const;
  PROTOBUF_MUST_USE_RESULT ::vp::tracking::KalmanFilter_t* release_stlinearvelocitykf();
  ::vp::tracking::KalmanFilter_t* mutable_stlinearvelocitykf();
  void set_allocated_stlinearvelocitykf(::vp::tracking::KalmanFilter_t* stlinearvelocitykf);
  private:
  const ::vp::tracking::KalmanFilter_t& _internal_stlinearvelocitykf() const;
  ::vp::tracking::KalmanFilter_t* _internal_mutable_stlinearvelocitykf();
  public:
  void unsafe_arena_set_allocated_stlinearvelocitykf(
      ::vp::tracking::KalmanFilter_t* stlinearvelocitykf);
  ::vp::tracking::KalmanFilter_t* unsafe_arena_release_stlinearvelocitykf();

  // .vp.tracking.KalmanFilter_t stVPSPoseKF = 10;
  bool has_stvpsposekf() const;
  private:
  bool _internal_has_stvpsposekf() const;
  public:
  void clear_stvpsposekf();
  const ::vp::tracking::KalmanFilter_t& stvpsposekf() const;
  PROTOBUF_MUST_USE_RESULT ::vp::tracking::KalmanFilter_t* release_stvpsposekf();
  ::vp::tracking::KalmanFilter_t* mutable_stvpsposekf();
  void set_allocated_stvpsposekf(::vp::tracking::KalmanFilter_t* stvpsposekf);
  private:
  const ::vp::tracking::KalmanFilter_t& _internal_stvpsposekf() const;
  ::vp::tracking::KalmanFilter_t* _internal_mutable_stvpsposekf();
  public:
  void unsafe_arena_set_allocated_stvpsposekf(
      ::vp::tracking::KalmanFilter_t* stvpsposekf);
  ::vp::tracking::KalmanFilter_t* unsafe_arena_release_stvpsposekf();

  // uint64 u64TSLastLoc = 2;
  void clear_u64tslastloc();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tslastloc() const;
  void set_u64tslastloc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tslastloc() const;
  void _internal_set_u64tslastloc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .vpdata.state.VPState_t.VPStatus eVPStatus = 1;
  void clear_evpstatus();
  ::vpdata::state::VPState_t_VPStatus evpstatus() const;
  void set_evpstatus(::vpdata::state::VPState_t_VPStatus value);
  private:
  ::vpdata::state::VPState_t_VPStatus _internal_evpstatus() const;
  void _internal_set_evpstatus(::vpdata::state::VPState_t_VPStatus value);
  public:

  // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 7;
  void clear_evpstatustrackingmode();
  ::vp::tracking::VPStatusTrackingMode evpstatustrackingmode() const;
  void set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value);
  private:
  ::vp::tracking::VPStatusTrackingMode _internal_evpstatustrackingmode() const;
  void _internal_set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.state.VPState_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arf64lastlocation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32lastorientation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32lastdrpose_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32curdrpose_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::FramePoseInfo_t > stframeposeinfoset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::Param_t > stparamset_;
  ::vp::tracking::KalmanFilter_t* stlinearvelocitykf_;
  ::vp::tracking::KalmanFilter_t* stvpsposekf_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tslastloc_;
  int evpstatus_;
  int evpstatustrackingmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VPState_t

// .vpdata.state.VPState_t.VPStatus eVPStatus = 1;
inline void VPState_t::clear_evpstatus() {
  evpstatus_ = 0;
}
inline ::vpdata::state::VPState_t_VPStatus VPState_t::_internal_evpstatus() const {
  return static_cast< ::vpdata::state::VPState_t_VPStatus >(evpstatus_);
}
inline ::vpdata::state::VPState_t_VPStatus VPState_t::evpstatus() const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.eVPStatus)
  return _internal_evpstatus();
}
inline void VPState_t::_internal_set_evpstatus(::vpdata::state::VPState_t_VPStatus value) {
  
  evpstatus_ = value;
}
inline void VPState_t::set_evpstatus(::vpdata::state::VPState_t_VPStatus value) {
  _internal_set_evpstatus(value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.eVPStatus)
}

// uint64 u64TSLastLoc = 2;
inline void VPState_t::clear_u64tslastloc() {
  u64tslastloc_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VPState_t::_internal_u64tslastloc() const {
  return u64tslastloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VPState_t::u64tslastloc() const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.u64TSLastLoc)
  return _internal_u64tslastloc();
}
inline void VPState_t::_internal_set_u64tslastloc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tslastloc_ = value;
}
inline void VPState_t::set_u64tslastloc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tslastloc(value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.u64TSLastLoc)
}

// repeated double arf64LastLocation = 3;
inline int VPState_t::_internal_arf64lastlocation_size() const {
  return arf64lastlocation_.size();
}
inline int VPState_t::arf64lastlocation_size() const {
  return _internal_arf64lastlocation_size();
}
inline void VPState_t::clear_arf64lastlocation() {
  arf64lastlocation_.Clear();
}
inline double VPState_t::_internal_arf64lastlocation(int index) const {
  return arf64lastlocation_.Get(index);
}
inline double VPState_t::arf64lastlocation(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.arf64LastLocation)
  return _internal_arf64lastlocation(index);
}
inline void VPState_t::set_arf64lastlocation(int index, double value) {
  arf64lastlocation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.arf64LastLocation)
}
inline void VPState_t::_internal_add_arf64lastlocation(double value) {
  arf64lastlocation_.Add(value);
}
inline void VPState_t::add_arf64lastlocation(double value) {
  _internal_add_arf64lastlocation(value);
  // @@protoc_insertion_point(field_add:vpdata.state.VPState_t.arf64LastLocation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VPState_t::_internal_arf64lastlocation() const {
  return arf64lastlocation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VPState_t::arf64lastlocation() const {
  // @@protoc_insertion_point(field_list:vpdata.state.VPState_t.arf64LastLocation)
  return _internal_arf64lastlocation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VPState_t::_internal_mutable_arf64lastlocation() {
  return &arf64lastlocation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VPState_t::mutable_arf64lastlocation() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.state.VPState_t.arf64LastLocation)
  return _internal_mutable_arf64lastlocation();
}

// repeated float arf32LastOrientation = 4;
inline int VPState_t::_internal_arf32lastorientation_size() const {
  return arf32lastorientation_.size();
}
inline int VPState_t::arf32lastorientation_size() const {
  return _internal_arf32lastorientation_size();
}
inline void VPState_t::clear_arf32lastorientation() {
  arf32lastorientation_.Clear();
}
inline float VPState_t::_internal_arf32lastorientation(int index) const {
  return arf32lastorientation_.Get(index);
}
inline float VPState_t::arf32lastorientation(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.arf32LastOrientation)
  return _internal_arf32lastorientation(index);
}
inline void VPState_t::set_arf32lastorientation(int index, float value) {
  arf32lastorientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.arf32LastOrientation)
}
inline void VPState_t::_internal_add_arf32lastorientation(float value) {
  arf32lastorientation_.Add(value);
}
inline void VPState_t::add_arf32lastorientation(float value) {
  _internal_add_arf32lastorientation(value);
  // @@protoc_insertion_point(field_add:vpdata.state.VPState_t.arf32LastOrientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPState_t::_internal_arf32lastorientation() const {
  return arf32lastorientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPState_t::arf32lastorientation() const {
  // @@protoc_insertion_point(field_list:vpdata.state.VPState_t.arf32LastOrientation)
  return _internal_arf32lastorientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPState_t::_internal_mutable_arf32lastorientation() {
  return &arf32lastorientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPState_t::mutable_arf32lastorientation() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.state.VPState_t.arf32LastOrientation)
  return _internal_mutable_arf32lastorientation();
}

// repeated float arf32LastDRPose = 5;
inline int VPState_t::_internal_arf32lastdrpose_size() const {
  return arf32lastdrpose_.size();
}
inline int VPState_t::arf32lastdrpose_size() const {
  return _internal_arf32lastdrpose_size();
}
inline void VPState_t::clear_arf32lastdrpose() {
  arf32lastdrpose_.Clear();
}
inline float VPState_t::_internal_arf32lastdrpose(int index) const {
  return arf32lastdrpose_.Get(index);
}
inline float VPState_t::arf32lastdrpose(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.arf32LastDRPose)
  return _internal_arf32lastdrpose(index);
}
inline void VPState_t::set_arf32lastdrpose(int index, float value) {
  arf32lastdrpose_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.arf32LastDRPose)
}
inline void VPState_t::_internal_add_arf32lastdrpose(float value) {
  arf32lastdrpose_.Add(value);
}
inline void VPState_t::add_arf32lastdrpose(float value) {
  _internal_add_arf32lastdrpose(value);
  // @@protoc_insertion_point(field_add:vpdata.state.VPState_t.arf32LastDRPose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPState_t::_internal_arf32lastdrpose() const {
  return arf32lastdrpose_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPState_t::arf32lastdrpose() const {
  // @@protoc_insertion_point(field_list:vpdata.state.VPState_t.arf32LastDRPose)
  return _internal_arf32lastdrpose();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPState_t::_internal_mutable_arf32lastdrpose() {
  return &arf32lastdrpose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPState_t::mutable_arf32lastdrpose() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.state.VPState_t.arf32LastDRPose)
  return _internal_mutable_arf32lastdrpose();
}

// repeated float arf32CurDRPose = 6;
inline int VPState_t::_internal_arf32curdrpose_size() const {
  return arf32curdrpose_.size();
}
inline int VPState_t::arf32curdrpose_size() const {
  return _internal_arf32curdrpose_size();
}
inline void VPState_t::clear_arf32curdrpose() {
  arf32curdrpose_.Clear();
}
inline float VPState_t::_internal_arf32curdrpose(int index) const {
  return arf32curdrpose_.Get(index);
}
inline float VPState_t::arf32curdrpose(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.arf32CurDRPose)
  return _internal_arf32curdrpose(index);
}
inline void VPState_t::set_arf32curdrpose(int index, float value) {
  arf32curdrpose_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.arf32CurDRPose)
}
inline void VPState_t::_internal_add_arf32curdrpose(float value) {
  arf32curdrpose_.Add(value);
}
inline void VPState_t::add_arf32curdrpose(float value) {
  _internal_add_arf32curdrpose(value);
  // @@protoc_insertion_point(field_add:vpdata.state.VPState_t.arf32CurDRPose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPState_t::_internal_arf32curdrpose() const {
  return arf32curdrpose_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPState_t::arf32curdrpose() const {
  // @@protoc_insertion_point(field_list:vpdata.state.VPState_t.arf32CurDRPose)
  return _internal_arf32curdrpose();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPState_t::_internal_mutable_arf32curdrpose() {
  return &arf32curdrpose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPState_t::mutable_arf32curdrpose() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.state.VPState_t.arf32CurDRPose)
  return _internal_mutable_arf32curdrpose();
}

// .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 7;
inline void VPState_t::clear_evpstatustrackingmode() {
  evpstatustrackingmode_ = 0;
}
inline ::vp::tracking::VPStatusTrackingMode VPState_t::_internal_evpstatustrackingmode() const {
  return static_cast< ::vp::tracking::VPStatusTrackingMode >(evpstatustrackingmode_);
}
inline ::vp::tracking::VPStatusTrackingMode VPState_t::evpstatustrackingmode() const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.eVPStatusTrackingMode)
  return _internal_evpstatustrackingmode();
}
inline void VPState_t::_internal_set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value) {
  
  evpstatustrackingmode_ = value;
}
inline void VPState_t::set_evpstatustrackingmode(::vp::tracking::VPStatusTrackingMode value) {
  _internal_set_evpstatustrackingmode(value);
  // @@protoc_insertion_point(field_set:vpdata.state.VPState_t.eVPStatusTrackingMode)
}

// repeated .vp.tracking.FramePoseInfo_t stFramePoseInfoSet = 8;
inline int VPState_t::_internal_stframeposeinfoset_size() const {
  return stframeposeinfoset_.size();
}
inline int VPState_t::stframeposeinfoset_size() const {
  return _internal_stframeposeinfoset_size();
}
inline ::vp::tracking::FramePoseInfo_t* VPState_t::mutable_stframeposeinfoset(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.state.VPState_t.stFramePoseInfoSet)
  return stframeposeinfoset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::FramePoseInfo_t >*
VPState_t::mutable_stframeposeinfoset() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.state.VPState_t.stFramePoseInfoSet)
  return &stframeposeinfoset_;
}
inline const ::vp::tracking::FramePoseInfo_t& VPState_t::_internal_stframeposeinfoset(int index) const {
  return stframeposeinfoset_.Get(index);
}
inline const ::vp::tracking::FramePoseInfo_t& VPState_t::stframeposeinfoset(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.stFramePoseInfoSet)
  return _internal_stframeposeinfoset(index);
}
inline ::vp::tracking::FramePoseInfo_t* VPState_t::_internal_add_stframeposeinfoset() {
  return stframeposeinfoset_.Add();
}
inline ::vp::tracking::FramePoseInfo_t* VPState_t::add_stframeposeinfoset() {
  ::vp::tracking::FramePoseInfo_t* _add = _internal_add_stframeposeinfoset();
  // @@protoc_insertion_point(field_add:vpdata.state.VPState_t.stFramePoseInfoSet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::FramePoseInfo_t >&
VPState_t::stframeposeinfoset() const {
  // @@protoc_insertion_point(field_list:vpdata.state.VPState_t.stFramePoseInfoSet)
  return stframeposeinfoset_;
}

// .vp.tracking.KalmanFilter_t stLinearVelocityKF = 9;
inline bool VPState_t::_internal_has_stlinearvelocitykf() const {
  return this != internal_default_instance() && stlinearvelocitykf_ != nullptr;
}
inline bool VPState_t::has_stlinearvelocitykf() const {
  return _internal_has_stlinearvelocitykf();
}
inline const ::vp::tracking::KalmanFilter_t& VPState_t::_internal_stlinearvelocitykf() const {
  const ::vp::tracking::KalmanFilter_t* p = stlinearvelocitykf_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::KalmanFilter_t&>(
      ::vp::tracking::_KalmanFilter_t_default_instance_);
}
inline const ::vp::tracking::KalmanFilter_t& VPState_t::stlinearvelocitykf() const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.stLinearVelocityKF)
  return _internal_stlinearvelocitykf();
}
inline void VPState_t::unsafe_arena_set_allocated_stlinearvelocitykf(
    ::vp::tracking::KalmanFilter_t* stlinearvelocitykf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlinearvelocitykf_);
  }
  stlinearvelocitykf_ = stlinearvelocitykf;
  if (stlinearvelocitykf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpdata.state.VPState_t.stLinearVelocityKF)
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::release_stlinearvelocitykf() {
  
  ::vp::tracking::KalmanFilter_t* temp = stlinearvelocitykf_;
  stlinearvelocitykf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::unsafe_arena_release_stlinearvelocitykf() {
  // @@protoc_insertion_point(field_release:vpdata.state.VPState_t.stLinearVelocityKF)
  
  ::vp::tracking::KalmanFilter_t* temp = stlinearvelocitykf_;
  stlinearvelocitykf_ = nullptr;
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::_internal_mutable_stlinearvelocitykf() {
  
  if (stlinearvelocitykf_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::KalmanFilter_t>(GetArenaForAllocation());
    stlinearvelocitykf_ = p;
  }
  return stlinearvelocitykf_;
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::mutable_stlinearvelocitykf() {
  ::vp::tracking::KalmanFilter_t* _msg = _internal_mutable_stlinearvelocitykf();
  // @@protoc_insertion_point(field_mutable:vpdata.state.VPState_t.stLinearVelocityKF)
  return _msg;
}
inline void VPState_t::set_allocated_stlinearvelocitykf(::vp::tracking::KalmanFilter_t* stlinearvelocitykf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlinearvelocitykf_);
  }
  if (stlinearvelocitykf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlinearvelocitykf));
    if (message_arena != submessage_arena) {
      stlinearvelocitykf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stlinearvelocitykf, submessage_arena);
    }
    
  } else {
    
  }
  stlinearvelocitykf_ = stlinearvelocitykf;
  // @@protoc_insertion_point(field_set_allocated:vpdata.state.VPState_t.stLinearVelocityKF)
}

// .vp.tracking.KalmanFilter_t stVPSPoseKF = 10;
inline bool VPState_t::_internal_has_stvpsposekf() const {
  return this != internal_default_instance() && stvpsposekf_ != nullptr;
}
inline bool VPState_t::has_stvpsposekf() const {
  return _internal_has_stvpsposekf();
}
inline const ::vp::tracking::KalmanFilter_t& VPState_t::_internal_stvpsposekf() const {
  const ::vp::tracking::KalmanFilter_t* p = stvpsposekf_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::KalmanFilter_t&>(
      ::vp::tracking::_KalmanFilter_t_default_instance_);
}
inline const ::vp::tracking::KalmanFilter_t& VPState_t::stvpsposekf() const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.stVPSPoseKF)
  return _internal_stvpsposekf();
}
inline void VPState_t::unsafe_arena_set_allocated_stvpsposekf(
    ::vp::tracking::KalmanFilter_t* stvpsposekf) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpsposekf_);
  }
  stvpsposekf_ = stvpsposekf;
  if (stvpsposekf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpdata.state.VPState_t.stVPSPoseKF)
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::release_stvpsposekf() {
  
  ::vp::tracking::KalmanFilter_t* temp = stvpsposekf_;
  stvpsposekf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::unsafe_arena_release_stvpsposekf() {
  // @@protoc_insertion_point(field_release:vpdata.state.VPState_t.stVPSPoseKF)
  
  ::vp::tracking::KalmanFilter_t* temp = stvpsposekf_;
  stvpsposekf_ = nullptr;
  return temp;
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::_internal_mutable_stvpsposekf() {
  
  if (stvpsposekf_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::KalmanFilter_t>(GetArenaForAllocation());
    stvpsposekf_ = p;
  }
  return stvpsposekf_;
}
inline ::vp::tracking::KalmanFilter_t* VPState_t::mutable_stvpsposekf() {
  ::vp::tracking::KalmanFilter_t* _msg = _internal_mutable_stvpsposekf();
  // @@protoc_insertion_point(field_mutable:vpdata.state.VPState_t.stVPSPoseKF)
  return _msg;
}
inline void VPState_t::set_allocated_stvpsposekf(::vp::tracking::KalmanFilter_t* stvpsposekf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpsposekf_);
  }
  if (stvpsposekf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpsposekf));
    if (message_arena != submessage_arena) {
      stvpsposekf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpsposekf, submessage_arena);
    }
    
  } else {
    
  }
  stvpsposekf_ = stvpsposekf;
  // @@protoc_insertion_point(field_set_allocated:vpdata.state.VPState_t.stVPSPoseKF)
}

// repeated .vp.tracking.Param_t stParamSet = 11;
inline int VPState_t::_internal_stparamset_size() const {
  return stparamset_.size();
}
inline int VPState_t::stparamset_size() const {
  return _internal_stparamset_size();
}
inline ::vp::tracking::Param_t* VPState_t::mutable_stparamset(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.state.VPState_t.stParamSet)
  return stparamset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::Param_t >*
VPState_t::mutable_stparamset() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.state.VPState_t.stParamSet)
  return &stparamset_;
}
inline const ::vp::tracking::Param_t& VPState_t::_internal_stparamset(int index) const {
  return stparamset_.Get(index);
}
inline const ::vp::tracking::Param_t& VPState_t::stparamset(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.state.VPState_t.stParamSet)
  return _internal_stparamset(index);
}
inline ::vp::tracking::Param_t* VPState_t::_internal_add_stparamset() {
  return stparamset_.Add();
}
inline ::vp::tracking::Param_t* VPState_t::add_stparamset() {
  ::vp::tracking::Param_t* _add = _internal_add_stparamset();
  // @@protoc_insertion_point(field_add:vpdata.state.VPState_t.stParamSet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vp::tracking::Param_t >&
VPState_t::stparamset() const {
  // @@protoc_insertion_point(field_list:vpdata.state.VPState_t.stParamSet)
  return stparamset_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace state
}  // namespace vpdata

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::vpdata::state::VPState_t_VPStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vpdata::state::VPState_t_VPStatus>() {
  return ::vpdata::state::VPState_t_VPStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vp_5fstate_2eproto
