// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vgeodb_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vgeodb_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vgeodb_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vgeodb_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vgeodb_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vgeodb_5fcommon_2eproto;
namespace VgeoDB {
namespace common {
class Extrinsic_t;
struct Extrinsic_tDefaultTypeInternal;
extern Extrinsic_tDefaultTypeInternal _Extrinsic_t_default_instance_;
class Orientation32_t;
struct Orientation32_tDefaultTypeInternal;
extern Orientation32_tDefaultTypeInternal _Orientation32_t_default_instance_;
class Point2DFloat_t;
struct Point2DFloat_tDefaultTypeInternal;
extern Point2DFloat_tDefaultTypeInternal _Point2DFloat_t_default_instance_;
class Point2DInt_t;
struct Point2DInt_tDefaultTypeInternal;
extern Point2DInt_tDefaultTypeInternal _Point2DInt_t_default_instance_;
class UVPoint_t;
struct UVPoint_tDefaultTypeInternal;
extern UVPoint_tDefaultTypeInternal _UVPoint_t_default_instance_;
class XYZ32_t;
struct XYZ32_tDefaultTypeInternal;
extern XYZ32_tDefaultTypeInternal _XYZ32_t_default_instance_;
class XYZ64_t;
struct XYZ64_tDefaultTypeInternal;
extern XYZ64_tDefaultTypeInternal _XYZ64_t_default_instance_;
}  // namespace common
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> ::VgeoDB::common::Extrinsic_t* Arena::CreateMaybeMessage<::VgeoDB::common::Extrinsic_t>(Arena*);
template<> ::VgeoDB::common::Orientation32_t* Arena::CreateMaybeMessage<::VgeoDB::common::Orientation32_t>(Arena*);
template<> ::VgeoDB::common::Point2DFloat_t* Arena::CreateMaybeMessage<::VgeoDB::common::Point2DFloat_t>(Arena*);
template<> ::VgeoDB::common::Point2DInt_t* Arena::CreateMaybeMessage<::VgeoDB::common::Point2DInt_t>(Arena*);
template<> ::VgeoDB::common::UVPoint_t* Arena::CreateMaybeMessage<::VgeoDB::common::UVPoint_t>(Arena*);
template<> ::VgeoDB::common::XYZ32_t* Arena::CreateMaybeMessage<::VgeoDB::common::XYZ32_t>(Arena*);
template<> ::VgeoDB::common::XYZ64_t* Arena::CreateMaybeMessage<::VgeoDB::common::XYZ64_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VgeoDB {
namespace common {

// ===================================================================

class XYZ64_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.XYZ64_t) */ {
 public:
  inline XYZ64_t() : XYZ64_t(nullptr) {}
  ~XYZ64_t() override;
  explicit constexpr XYZ64_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XYZ64_t(const XYZ64_t& from);
  XYZ64_t(XYZ64_t&& from) noexcept
    : XYZ64_t() {
    *this = ::std::move(from);
  }

  inline XYZ64_t& operator=(const XYZ64_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline XYZ64_t& operator=(XYZ64_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XYZ64_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const XYZ64_t* internal_default_instance() {
    return reinterpret_cast<const XYZ64_t*>(
               &_XYZ64_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(XYZ64_t& a, XYZ64_t& b) {
    a.Swap(&b);
  }
  inline void Swap(XYZ64_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XYZ64_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XYZ64_t* New() const final {
    return new XYZ64_t();
  }

  XYZ64_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XYZ64_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XYZ64_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XYZ64_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XYZ64_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.XYZ64_t";
  }
  protected:
  explicit XYZ64_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kF64XFieldNumber = 1,
    kF64YFieldNumber = 2,
    kF64ZFieldNumber = 3,
  };
  // double f64X = 1;
  void clear_f64x();
  double f64x() const;
  void set_f64x(double value);
  private:
  double _internal_f64x() const;
  void _internal_set_f64x(double value);
  public:

  // double f64Y = 2;
  void clear_f64y();
  double f64y() const;
  void set_f64y(double value);
  private:
  double _internal_f64y() const;
  void _internal_set_f64y(double value);
  public:

  // double f64Z = 3;
  void clear_f64z();
  double f64z() const;
  void set_f64z(double value);
  private:
  double _internal_f64z() const;
  void _internal_set_f64z(double value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.common.XYZ64_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double f64x_;
  double f64y_;
  double f64z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class XYZ32_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.XYZ32_t) */ {
 public:
  inline XYZ32_t() : XYZ32_t(nullptr) {}
  ~XYZ32_t() override;
  explicit constexpr XYZ32_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XYZ32_t(const XYZ32_t& from);
  XYZ32_t(XYZ32_t&& from) noexcept
    : XYZ32_t() {
    *this = ::std::move(from);
  }

  inline XYZ32_t& operator=(const XYZ32_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline XYZ32_t& operator=(XYZ32_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XYZ32_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const XYZ32_t* internal_default_instance() {
    return reinterpret_cast<const XYZ32_t*>(
               &_XYZ32_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(XYZ32_t& a, XYZ32_t& b) {
    a.Swap(&b);
  }
  inline void Swap(XYZ32_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XYZ32_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline XYZ32_t* New() const final {
    return new XYZ32_t();
  }

  XYZ32_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<XYZ32_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XYZ32_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XYZ32_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XYZ32_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.XYZ32_t";
  }
  protected:
  explicit XYZ32_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFXFieldNumber = 1,
    kFYFieldNumber = 2,
    kFZFieldNumber = 3,
  };
  // float fX = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fY = 2;
  void clear_fy();
  float fy() const;
  void set_fy(float value);
  private:
  float _internal_fy() const;
  void _internal_set_fy(float value);
  public:

  // float fZ = 3;
  void clear_fz();
  float fz() const;
  void set_fz(float value);
  private:
  float _internal_fz() const;
  void _internal_set_fz(float value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.common.XYZ32_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fx_;
  float fy_;
  float fz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Orientation32_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.Orientation32_t) */ {
 public:
  inline Orientation32_t() : Orientation32_t(nullptr) {}
  ~Orientation32_t() override;
  explicit constexpr Orientation32_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation32_t(const Orientation32_t& from);
  Orientation32_t(Orientation32_t&& from) noexcept
    : Orientation32_t() {
    *this = ::std::move(from);
  }

  inline Orientation32_t& operator=(const Orientation32_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation32_t& operator=(Orientation32_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Orientation32_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orientation32_t* internal_default_instance() {
    return reinterpret_cast<const Orientation32_t*>(
               &_Orientation32_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Orientation32_t& a, Orientation32_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation32_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation32_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation32_t* New() const final {
    return new Orientation32_t();
  }

  Orientation32_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation32_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Orientation32_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Orientation32_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation32_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.Orientation32_t";
  }
  protected:
  explicit Orientation32_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFqXFieldNumber = 1,
    kFqYFieldNumber = 2,
    kFqZFieldNumber = 3,
    kFqWFieldNumber = 4,
  };
  // float fqX = 1;
  void clear_fqx();
  float fqx() const;
  void set_fqx(float value);
  private:
  float _internal_fqx() const;
  void _internal_set_fqx(float value);
  public:

  // float fqY = 2;
  void clear_fqy();
  float fqy() const;
  void set_fqy(float value);
  private:
  float _internal_fqy() const;
  void _internal_set_fqy(float value);
  public:

  // float fqZ = 3;
  void clear_fqz();
  float fqz() const;
  void set_fqz(float value);
  private:
  float _internal_fqz() const;
  void _internal_set_fqz(float value);
  public:

  // float fqW = 4;
  void clear_fqw();
  float fqw() const;
  void set_fqw(float value);
  private:
  float _internal_fqw() const;
  void _internal_set_fqw(float value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.common.Orientation32_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fqx_;
  float fqy_;
  float fqz_;
  float fqw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Extrinsic_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.Extrinsic_t) */ {
 public:
  inline Extrinsic_t() : Extrinsic_t(nullptr) {}
  ~Extrinsic_t() override;
  explicit constexpr Extrinsic_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Extrinsic_t(const Extrinsic_t& from);
  Extrinsic_t(Extrinsic_t&& from) noexcept
    : Extrinsic_t() {
    *this = ::std::move(from);
  }

  inline Extrinsic_t& operator=(const Extrinsic_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extrinsic_t& operator=(Extrinsic_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Extrinsic_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Extrinsic_t* internal_default_instance() {
    return reinterpret_cast<const Extrinsic_t*>(
               &_Extrinsic_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Extrinsic_t& a, Extrinsic_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Extrinsic_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Extrinsic_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extrinsic_t* New() const final {
    return new Extrinsic_t();
  }

  Extrinsic_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extrinsic_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Extrinsic_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Extrinsic_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extrinsic_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.Extrinsic_t";
  }
  protected:
  explicit Extrinsic_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStTranslateFieldNumber = 1,
    kStOrientationFieldNumber = 2,
  };
  // .VgeoDB.common.XYZ32_t stTranslate = 1;
  bool has_sttranslate() const;
  private:
  bool _internal_has_sttranslate() const;
  public:
  void clear_sttranslate();
  const ::VgeoDB::common::XYZ32_t& sttranslate() const;
  PROTOBUF_MUST_USE_RESULT ::VgeoDB::common::XYZ32_t* release_sttranslate();
  ::VgeoDB::common::XYZ32_t* mutable_sttranslate();
  void set_allocated_sttranslate(::VgeoDB::common::XYZ32_t* sttranslate);
  private:
  const ::VgeoDB::common::XYZ32_t& _internal_sttranslate() const;
  ::VgeoDB::common::XYZ32_t* _internal_mutable_sttranslate();
  public:
  void unsafe_arena_set_allocated_sttranslate(
      ::VgeoDB::common::XYZ32_t* sttranslate);
  ::VgeoDB::common::XYZ32_t* unsafe_arena_release_sttranslate();

  // .VgeoDB.common.Orientation32_t stOrientation = 2;
  bool has_storientation() const;
  private:
  bool _internal_has_storientation() const;
  public:
  void clear_storientation();
  const ::VgeoDB::common::Orientation32_t& storientation() const;
  PROTOBUF_MUST_USE_RESULT ::VgeoDB::common::Orientation32_t* release_storientation();
  ::VgeoDB::common::Orientation32_t* mutable_storientation();
  void set_allocated_storientation(::VgeoDB::common::Orientation32_t* storientation);
  private:
  const ::VgeoDB::common::Orientation32_t& _internal_storientation() const;
  ::VgeoDB::common::Orientation32_t* _internal_mutable_storientation();
  public:
  void unsafe_arena_set_allocated_storientation(
      ::VgeoDB::common::Orientation32_t* storientation);
  ::VgeoDB::common::Orientation32_t* unsafe_arena_release_storientation();

  // @@protoc_insertion_point(class_scope:VgeoDB.common.Extrinsic_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::VgeoDB::common::XYZ32_t* sttranslate_;
  ::VgeoDB::common::Orientation32_t* storientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Point2DInt_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.Point2DInt_t) */ {
 public:
  inline Point2DInt_t() : Point2DInt_t(nullptr) {}
  ~Point2DInt_t() override;
  explicit constexpr Point2DInt_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2DInt_t(const Point2DInt_t& from);
  Point2DInt_t(Point2DInt_t&& from) noexcept
    : Point2DInt_t() {
    *this = ::std::move(from);
  }

  inline Point2DInt_t& operator=(const Point2DInt_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2DInt_t& operator=(Point2DInt_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point2DInt_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2DInt_t* internal_default_instance() {
    return reinterpret_cast<const Point2DInt_t*>(
               &_Point2DInt_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point2DInt_t& a, Point2DInt_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2DInt_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2DInt_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2DInt_t* New() const final {
    return new Point2DInt_t();
  }

  Point2DInt_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2DInt_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point2DInt_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point2DInt_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2DInt_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.Point2DInt_t";
  }
  protected:
  explicit Point2DInt_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnUFieldNumber = 1,
    kUnVFieldNumber = 2,
  };
  // uint32 unU = 1;
  void clear_unu();
  ::PROTOBUF_NAMESPACE_ID::uint32 unu() const;
  void set_unu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unu() const;
  void _internal_set_unu(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 unV = 2;
  void clear_unv();
  ::PROTOBUF_NAMESPACE_ID::uint32 unv() const;
  void set_unv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unv() const;
  void _internal_set_unv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.common.Point2DInt_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unu_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Point2DFloat_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.Point2DFloat_t) */ {
 public:
  inline Point2DFloat_t() : Point2DFloat_t(nullptr) {}
  ~Point2DFloat_t() override;
  explicit constexpr Point2DFloat_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point2DFloat_t(const Point2DFloat_t& from);
  Point2DFloat_t(Point2DFloat_t&& from) noexcept
    : Point2DFloat_t() {
    *this = ::std::move(from);
  }

  inline Point2DFloat_t& operator=(const Point2DFloat_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2DFloat_t& operator=(Point2DFloat_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point2DFloat_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point2DFloat_t* internal_default_instance() {
    return reinterpret_cast<const Point2DFloat_t*>(
               &_Point2DFloat_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Point2DFloat_t& a, Point2DFloat_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2DFloat_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2DFloat_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2DFloat_t* New() const final {
    return new Point2DFloat_t();
  }

  Point2DFloat_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2DFloat_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point2DFloat_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point2DFloat_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2DFloat_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.Point2DFloat_t";
  }
  protected:
  explicit Point2DFloat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFUFieldNumber = 1,
    kFVFieldNumber = 2,
  };
  // float fU = 1;
  void clear_fu();
  float fu() const;
  void set_fu(float value);
  private:
  float _internal_fu() const;
  void _internal_set_fu(float value);
  public:

  // float fV = 2;
  void clear_fv();
  float fv() const;
  void set_fv(float value);
  private:
  float _internal_fv() const;
  void _internal_set_fv(float value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.common.Point2DFloat_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float fu_;
  float fv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class UVPoint_t final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.common.UVPoint_t) */ {
 public:
  inline UVPoint_t() : UVPoint_t(nullptr) {}
  ~UVPoint_t() override;
  explicit constexpr UVPoint_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UVPoint_t(const UVPoint_t& from);
  UVPoint_t(UVPoint_t&& from) noexcept
    : UVPoint_t() {
    *this = ::std::move(from);
  }

  inline UVPoint_t& operator=(const UVPoint_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline UVPoint_t& operator=(UVPoint_t&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UVPoint_t& default_instance() {
    return *internal_default_instance();
  }
  enum UUVPointCase {
    kStPointInt = 1,
    kStPointFloat = 2,
    UUVPOINT_NOT_SET = 0,
  };

  static inline const UVPoint_t* internal_default_instance() {
    return reinterpret_cast<const UVPoint_t*>(
               &_UVPoint_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UVPoint_t& a, UVPoint_t& b) {
    a.Swap(&b);
  }
  inline void Swap(UVPoint_t* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UVPoint_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UVPoint_t* New() const final {
    return new UVPoint_t();
  }

  UVPoint_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UVPoint_t>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UVPoint_t& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UVPoint_t& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UVPoint_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.common.UVPoint_t";
  }
  protected:
  explicit UVPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStPointIntFieldNumber = 1,
    kStPointFloatFieldNumber = 2,
  };
  // .VgeoDB.common.Point2DInt_t stPointInt = 1;
  bool has_stpointint() const;
  private:
  bool _internal_has_stpointint() const;
  public:
  void clear_stpointint();
  const ::VgeoDB::common::Point2DInt_t& stpointint() const;
  PROTOBUF_MUST_USE_RESULT ::VgeoDB::common::Point2DInt_t* release_stpointint();
  ::VgeoDB::common::Point2DInt_t* mutable_stpointint();
  void set_allocated_stpointint(::VgeoDB::common::Point2DInt_t* stpointint);
  private:
  const ::VgeoDB::common::Point2DInt_t& _internal_stpointint() const;
  ::VgeoDB::common::Point2DInt_t* _internal_mutable_stpointint();
  public:
  void unsafe_arena_set_allocated_stpointint(
      ::VgeoDB::common::Point2DInt_t* stpointint);
  ::VgeoDB::common::Point2DInt_t* unsafe_arena_release_stpointint();

  // .VgeoDB.common.Point2DFloat_t stPointFloat = 2;
  bool has_stpointfloat() const;
  private:
  bool _internal_has_stpointfloat() const;
  public:
  void clear_stpointfloat();
  const ::VgeoDB::common::Point2DFloat_t& stpointfloat() const;
  PROTOBUF_MUST_USE_RESULT ::VgeoDB::common::Point2DFloat_t* release_stpointfloat();
  ::VgeoDB::common::Point2DFloat_t* mutable_stpointfloat();
  void set_allocated_stpointfloat(::VgeoDB::common::Point2DFloat_t* stpointfloat);
  private:
  const ::VgeoDB::common::Point2DFloat_t& _internal_stpointfloat() const;
  ::VgeoDB::common::Point2DFloat_t* _internal_mutable_stpointfloat();
  public:
  void unsafe_arena_set_allocated_stpointfloat(
      ::VgeoDB::common::Point2DFloat_t* stpointfloat);
  ::VgeoDB::common::Point2DFloat_t* unsafe_arena_release_stpointfloat();

  void clear_uUVPoint();
  UUVPointCase uUVPoint_case() const;
  // @@protoc_insertion_point(class_scope:VgeoDB.common.UVPoint_t)
 private:
  class _Internal;
  void set_has_stpointint();
  void set_has_stpointfloat();

  inline bool has_uUVPoint() const;
  inline void clear_has_uUVPoint();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UUVPointUnion {
    constexpr UUVPointUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::VgeoDB::common::Point2DInt_t* stpointint_;
    ::VgeoDB::common::Point2DFloat_t* stpointfloat_;
  } uUVPoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_vgeodb_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// XYZ64_t

// double f64X = 1;
inline void XYZ64_t::clear_f64x() {
  f64x_ = 0;
}
inline double XYZ64_t::_internal_f64x() const {
  return f64x_;
}
inline double XYZ64_t::f64x() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.XYZ64_t.f64X)
  return _internal_f64x();
}
inline void XYZ64_t::_internal_set_f64x(double value) {
  
  f64x_ = value;
}
inline void XYZ64_t::set_f64x(double value) {
  _internal_set_f64x(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.XYZ64_t.f64X)
}

// double f64Y = 2;
inline void XYZ64_t::clear_f64y() {
  f64y_ = 0;
}
inline double XYZ64_t::_internal_f64y() const {
  return f64y_;
}
inline double XYZ64_t::f64y() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.XYZ64_t.f64Y)
  return _internal_f64y();
}
inline void XYZ64_t::_internal_set_f64y(double value) {
  
  f64y_ = value;
}
inline void XYZ64_t::set_f64y(double value) {
  _internal_set_f64y(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.XYZ64_t.f64Y)
}

// double f64Z = 3;
inline void XYZ64_t::clear_f64z() {
  f64z_ = 0;
}
inline double XYZ64_t::_internal_f64z() const {
  return f64z_;
}
inline double XYZ64_t::f64z() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.XYZ64_t.f64Z)
  return _internal_f64z();
}
inline void XYZ64_t::_internal_set_f64z(double value) {
  
  f64z_ = value;
}
inline void XYZ64_t::set_f64z(double value) {
  _internal_set_f64z(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.XYZ64_t.f64Z)
}

// -------------------------------------------------------------------

// XYZ32_t

// float fX = 1;
inline void XYZ32_t::clear_fx() {
  fx_ = 0;
}
inline float XYZ32_t::_internal_fx() const {
  return fx_;
}
inline float XYZ32_t::fx() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.XYZ32_t.fX)
  return _internal_fx();
}
inline void XYZ32_t::_internal_set_fx(float value) {
  
  fx_ = value;
}
inline void XYZ32_t::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.XYZ32_t.fX)
}

// float fY = 2;
inline void XYZ32_t::clear_fy() {
  fy_ = 0;
}
inline float XYZ32_t::_internal_fy() const {
  return fy_;
}
inline float XYZ32_t::fy() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.XYZ32_t.fY)
  return _internal_fy();
}
inline void XYZ32_t::_internal_set_fy(float value) {
  
  fy_ = value;
}
inline void XYZ32_t::set_fy(float value) {
  _internal_set_fy(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.XYZ32_t.fY)
}

// float fZ = 3;
inline void XYZ32_t::clear_fz() {
  fz_ = 0;
}
inline float XYZ32_t::_internal_fz() const {
  return fz_;
}
inline float XYZ32_t::fz() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.XYZ32_t.fZ)
  return _internal_fz();
}
inline void XYZ32_t::_internal_set_fz(float value) {
  
  fz_ = value;
}
inline void XYZ32_t::set_fz(float value) {
  _internal_set_fz(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.XYZ32_t.fZ)
}

// -------------------------------------------------------------------

// Orientation32_t

// float fqX = 1;
inline void Orientation32_t::clear_fqx() {
  fqx_ = 0;
}
inline float Orientation32_t::_internal_fqx() const {
  return fqx_;
}
inline float Orientation32_t::fqx() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Orientation32_t.fqX)
  return _internal_fqx();
}
inline void Orientation32_t::_internal_set_fqx(float value) {
  
  fqx_ = value;
}
inline void Orientation32_t::set_fqx(float value) {
  _internal_set_fqx(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Orientation32_t.fqX)
}

// float fqY = 2;
inline void Orientation32_t::clear_fqy() {
  fqy_ = 0;
}
inline float Orientation32_t::_internal_fqy() const {
  return fqy_;
}
inline float Orientation32_t::fqy() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Orientation32_t.fqY)
  return _internal_fqy();
}
inline void Orientation32_t::_internal_set_fqy(float value) {
  
  fqy_ = value;
}
inline void Orientation32_t::set_fqy(float value) {
  _internal_set_fqy(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Orientation32_t.fqY)
}

// float fqZ = 3;
inline void Orientation32_t::clear_fqz() {
  fqz_ = 0;
}
inline float Orientation32_t::_internal_fqz() const {
  return fqz_;
}
inline float Orientation32_t::fqz() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Orientation32_t.fqZ)
  return _internal_fqz();
}
inline void Orientation32_t::_internal_set_fqz(float value) {
  
  fqz_ = value;
}
inline void Orientation32_t::set_fqz(float value) {
  _internal_set_fqz(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Orientation32_t.fqZ)
}

// float fqW = 4;
inline void Orientation32_t::clear_fqw() {
  fqw_ = 0;
}
inline float Orientation32_t::_internal_fqw() const {
  return fqw_;
}
inline float Orientation32_t::fqw() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Orientation32_t.fqW)
  return _internal_fqw();
}
inline void Orientation32_t::_internal_set_fqw(float value) {
  
  fqw_ = value;
}
inline void Orientation32_t::set_fqw(float value) {
  _internal_set_fqw(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Orientation32_t.fqW)
}

// -------------------------------------------------------------------

// Extrinsic_t

// .VgeoDB.common.XYZ32_t stTranslate = 1;
inline bool Extrinsic_t::_internal_has_sttranslate() const {
  return this != internal_default_instance() && sttranslate_ != nullptr;
}
inline bool Extrinsic_t::has_sttranslate() const {
  return _internal_has_sttranslate();
}
inline void Extrinsic_t::clear_sttranslate() {
  if (GetArenaForAllocation() == nullptr && sttranslate_ != nullptr) {
    delete sttranslate_;
  }
  sttranslate_ = nullptr;
}
inline const ::VgeoDB::common::XYZ32_t& Extrinsic_t::_internal_sttranslate() const {
  const ::VgeoDB::common::XYZ32_t* p = sttranslate_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::XYZ32_t&>(
      ::VgeoDB::common::_XYZ32_t_default_instance_);
}
inline const ::VgeoDB::common::XYZ32_t& Extrinsic_t::sttranslate() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Extrinsic_t.stTranslate)
  return _internal_sttranslate();
}
inline void Extrinsic_t::unsafe_arena_set_allocated_sttranslate(
    ::VgeoDB::common::XYZ32_t* sttranslate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sttranslate_);
  }
  sttranslate_ = sttranslate;
  if (sttranslate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.common.Extrinsic_t.stTranslate)
}
inline ::VgeoDB::common::XYZ32_t* Extrinsic_t::release_sttranslate() {
  
  ::VgeoDB::common::XYZ32_t* temp = sttranslate_;
  sttranslate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VgeoDB::common::XYZ32_t* Extrinsic_t::unsafe_arena_release_sttranslate() {
  // @@protoc_insertion_point(field_release:VgeoDB.common.Extrinsic_t.stTranslate)
  
  ::VgeoDB::common::XYZ32_t* temp = sttranslate_;
  sttranslate_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::XYZ32_t* Extrinsic_t::_internal_mutable_sttranslate() {
  
  if (sttranslate_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::XYZ32_t>(GetArenaForAllocation());
    sttranslate_ = p;
  }
  return sttranslate_;
}
inline ::VgeoDB::common::XYZ32_t* Extrinsic_t::mutable_sttranslate() {
  ::VgeoDB::common::XYZ32_t* _msg = _internal_mutable_sttranslate();
  // @@protoc_insertion_point(field_mutable:VgeoDB.common.Extrinsic_t.stTranslate)
  return _msg;
}
inline void Extrinsic_t::set_allocated_sttranslate(::VgeoDB::common::XYZ32_t* sttranslate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sttranslate_;
  }
  if (sttranslate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::VgeoDB::common::XYZ32_t>::GetOwningArena(sttranslate);
    if (message_arena != submessage_arena) {
      sttranslate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sttranslate, submessage_arena);
    }
    
  } else {
    
  }
  sttranslate_ = sttranslate;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.common.Extrinsic_t.stTranslate)
}

// .VgeoDB.common.Orientation32_t stOrientation = 2;
inline bool Extrinsic_t::_internal_has_storientation() const {
  return this != internal_default_instance() && storientation_ != nullptr;
}
inline bool Extrinsic_t::has_storientation() const {
  return _internal_has_storientation();
}
inline void Extrinsic_t::clear_storientation() {
  if (GetArenaForAllocation() == nullptr && storientation_ != nullptr) {
    delete storientation_;
  }
  storientation_ = nullptr;
}
inline const ::VgeoDB::common::Orientation32_t& Extrinsic_t::_internal_storientation() const {
  const ::VgeoDB::common::Orientation32_t* p = storientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::Orientation32_t&>(
      ::VgeoDB::common::_Orientation32_t_default_instance_);
}
inline const ::VgeoDB::common::Orientation32_t& Extrinsic_t::storientation() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Extrinsic_t.stOrientation)
  return _internal_storientation();
}
inline void Extrinsic_t::unsafe_arena_set_allocated_storientation(
    ::VgeoDB::common::Orientation32_t* storientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storientation_);
  }
  storientation_ = storientation;
  if (storientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.common.Extrinsic_t.stOrientation)
}
inline ::VgeoDB::common::Orientation32_t* Extrinsic_t::release_storientation() {
  
  ::VgeoDB::common::Orientation32_t* temp = storientation_;
  storientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::VgeoDB::common::Orientation32_t* Extrinsic_t::unsafe_arena_release_storientation() {
  // @@protoc_insertion_point(field_release:VgeoDB.common.Extrinsic_t.stOrientation)
  
  ::VgeoDB::common::Orientation32_t* temp = storientation_;
  storientation_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::Orientation32_t* Extrinsic_t::_internal_mutable_storientation() {
  
  if (storientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::Orientation32_t>(GetArenaForAllocation());
    storientation_ = p;
  }
  return storientation_;
}
inline ::VgeoDB::common::Orientation32_t* Extrinsic_t::mutable_storientation() {
  ::VgeoDB::common::Orientation32_t* _msg = _internal_mutable_storientation();
  // @@protoc_insertion_point(field_mutable:VgeoDB.common.Extrinsic_t.stOrientation)
  return _msg;
}
inline void Extrinsic_t::set_allocated_storientation(::VgeoDB::common::Orientation32_t* storientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storientation_;
  }
  if (storientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::VgeoDB::common::Orientation32_t>::GetOwningArena(storientation);
    if (message_arena != submessage_arena) {
      storientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storientation, submessage_arena);
    }
    
  } else {
    
  }
  storientation_ = storientation;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.common.Extrinsic_t.stOrientation)
}

// -------------------------------------------------------------------

// Point2DInt_t

// uint32 unU = 1;
inline void Point2DInt_t::clear_unu() {
  unu_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point2DInt_t::_internal_unu() const {
  return unu_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point2DInt_t::unu() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Point2DInt_t.unU)
  return _internal_unu();
}
inline void Point2DInt_t::_internal_set_unu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unu_ = value;
}
inline void Point2DInt_t::set_unu(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unu(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Point2DInt_t.unU)
}

// uint32 unV = 2;
inline void Point2DInt_t::clear_unv() {
  unv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point2DInt_t::_internal_unv() const {
  return unv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Point2DInt_t::unv() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Point2DInt_t.unV)
  return _internal_unv();
}
inline void Point2DInt_t::_internal_set_unv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unv_ = value;
}
inline void Point2DInt_t::set_unv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unv(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Point2DInt_t.unV)
}

// -------------------------------------------------------------------

// Point2DFloat_t

// float fU = 1;
inline void Point2DFloat_t::clear_fu() {
  fu_ = 0;
}
inline float Point2DFloat_t::_internal_fu() const {
  return fu_;
}
inline float Point2DFloat_t::fu() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Point2DFloat_t.fU)
  return _internal_fu();
}
inline void Point2DFloat_t::_internal_set_fu(float value) {
  
  fu_ = value;
}
inline void Point2DFloat_t::set_fu(float value) {
  _internal_set_fu(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Point2DFloat_t.fU)
}

// float fV = 2;
inline void Point2DFloat_t::clear_fv() {
  fv_ = 0;
}
inline float Point2DFloat_t::_internal_fv() const {
  return fv_;
}
inline float Point2DFloat_t::fv() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.Point2DFloat_t.fV)
  return _internal_fv();
}
inline void Point2DFloat_t::_internal_set_fv(float value) {
  
  fv_ = value;
}
inline void Point2DFloat_t::set_fv(float value) {
  _internal_set_fv(value);
  // @@protoc_insertion_point(field_set:VgeoDB.common.Point2DFloat_t.fV)
}

// -------------------------------------------------------------------

// UVPoint_t

// .VgeoDB.common.Point2DInt_t stPointInt = 1;
inline bool UVPoint_t::_internal_has_stpointint() const {
  return uUVPoint_case() == kStPointInt;
}
inline bool UVPoint_t::has_stpointint() const {
  return _internal_has_stpointint();
}
inline void UVPoint_t::set_has_stpointint() {
  _oneof_case_[0] = kStPointInt;
}
inline void UVPoint_t::clear_stpointint() {
  if (_internal_has_stpointint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete uUVPoint_.stpointint_;
    }
    clear_has_uUVPoint();
  }
}
inline ::VgeoDB::common::Point2DInt_t* UVPoint_t::release_stpointint() {
  // @@protoc_insertion_point(field_release:VgeoDB.common.UVPoint_t.stPointInt)
  if (_internal_has_stpointint()) {
    clear_has_uUVPoint();
      ::VgeoDB::common::Point2DInt_t* temp = uUVPoint_.stpointint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uUVPoint_.stpointint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::common::Point2DInt_t& UVPoint_t::_internal_stpointint() const {
  return _internal_has_stpointint()
      ? *uUVPoint_.stpointint_
      : reinterpret_cast< ::VgeoDB::common::Point2DInt_t&>(::VgeoDB::common::_Point2DInt_t_default_instance_);
}
inline const ::VgeoDB::common::Point2DInt_t& UVPoint_t::stpointint() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.UVPoint_t.stPointInt)
  return _internal_stpointint();
}
inline ::VgeoDB::common::Point2DInt_t* UVPoint_t::unsafe_arena_release_stpointint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.common.UVPoint_t.stPointInt)
  if (_internal_has_stpointint()) {
    clear_has_uUVPoint();
    ::VgeoDB::common::Point2DInt_t* temp = uUVPoint_.stpointint_;
    uUVPoint_.stpointint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UVPoint_t::unsafe_arena_set_allocated_stpointint(::VgeoDB::common::Point2DInt_t* stpointint) {
  clear_uUVPoint();
  if (stpointint) {
    set_has_stpointint();
    uUVPoint_.stpointint_ = stpointint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.common.UVPoint_t.stPointInt)
}
inline ::VgeoDB::common::Point2DInt_t* UVPoint_t::_internal_mutable_stpointint() {
  if (!_internal_has_stpointint()) {
    clear_uUVPoint();
    set_has_stpointint();
    uUVPoint_.stpointint_ = CreateMaybeMessage< ::VgeoDB::common::Point2DInt_t >(GetArenaForAllocation());
  }
  return uUVPoint_.stpointint_;
}
inline ::VgeoDB::common::Point2DInt_t* UVPoint_t::mutable_stpointint() {
  ::VgeoDB::common::Point2DInt_t* _msg = _internal_mutable_stpointint();
  // @@protoc_insertion_point(field_mutable:VgeoDB.common.UVPoint_t.stPointInt)
  return _msg;
}

// .VgeoDB.common.Point2DFloat_t stPointFloat = 2;
inline bool UVPoint_t::_internal_has_stpointfloat() const {
  return uUVPoint_case() == kStPointFloat;
}
inline bool UVPoint_t::has_stpointfloat() const {
  return _internal_has_stpointfloat();
}
inline void UVPoint_t::set_has_stpointfloat() {
  _oneof_case_[0] = kStPointFloat;
}
inline void UVPoint_t::clear_stpointfloat() {
  if (_internal_has_stpointfloat()) {
    if (GetArenaForAllocation() == nullptr) {
      delete uUVPoint_.stpointfloat_;
    }
    clear_has_uUVPoint();
  }
}
inline ::VgeoDB::common::Point2DFloat_t* UVPoint_t::release_stpointfloat() {
  // @@protoc_insertion_point(field_release:VgeoDB.common.UVPoint_t.stPointFloat)
  if (_internal_has_stpointfloat()) {
    clear_has_uUVPoint();
      ::VgeoDB::common::Point2DFloat_t* temp = uUVPoint_.stpointfloat_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uUVPoint_.stpointfloat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::common::Point2DFloat_t& UVPoint_t::_internal_stpointfloat() const {
  return _internal_has_stpointfloat()
      ? *uUVPoint_.stpointfloat_
      : reinterpret_cast< ::VgeoDB::common::Point2DFloat_t&>(::VgeoDB::common::_Point2DFloat_t_default_instance_);
}
inline const ::VgeoDB::common::Point2DFloat_t& UVPoint_t::stpointfloat() const {
  // @@protoc_insertion_point(field_get:VgeoDB.common.UVPoint_t.stPointFloat)
  return _internal_stpointfloat();
}
inline ::VgeoDB::common::Point2DFloat_t* UVPoint_t::unsafe_arena_release_stpointfloat() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.common.UVPoint_t.stPointFloat)
  if (_internal_has_stpointfloat()) {
    clear_has_uUVPoint();
    ::VgeoDB::common::Point2DFloat_t* temp = uUVPoint_.stpointfloat_;
    uUVPoint_.stpointfloat_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UVPoint_t::unsafe_arena_set_allocated_stpointfloat(::VgeoDB::common::Point2DFloat_t* stpointfloat) {
  clear_uUVPoint();
  if (stpointfloat) {
    set_has_stpointfloat();
    uUVPoint_.stpointfloat_ = stpointfloat;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.common.UVPoint_t.stPointFloat)
}
inline ::VgeoDB::common::Point2DFloat_t* UVPoint_t::_internal_mutable_stpointfloat() {
  if (!_internal_has_stpointfloat()) {
    clear_uUVPoint();
    set_has_stpointfloat();
    uUVPoint_.stpointfloat_ = CreateMaybeMessage< ::VgeoDB::common::Point2DFloat_t >(GetArenaForAllocation());
  }
  return uUVPoint_.stpointfloat_;
}
inline ::VgeoDB::common::Point2DFloat_t* UVPoint_t::mutable_stpointfloat() {
  ::VgeoDB::common::Point2DFloat_t* _msg = _internal_mutable_stpointfloat();
  // @@protoc_insertion_point(field_mutable:VgeoDB.common.UVPoint_t.stPointFloat)
  return _msg;
}

inline bool UVPoint_t::has_uUVPoint() const {
  return uUVPoint_case() != UUVPOINT_NOT_SET;
}
inline void UVPoint_t::clear_has_uUVPoint() {
  _oneof_case_[0] = UUVPOINT_NOT_SET;
}
inline UVPoint_t::UUVPointCase UVPoint_t::uUVPoint_case() const {
  return UVPoint_t::UUVPointCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace VgeoDB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vgeodb_5fcommon_2eproto
