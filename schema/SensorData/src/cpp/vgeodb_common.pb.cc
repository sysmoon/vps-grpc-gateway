// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vgeodb_common.proto

#include "vgeodb_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace VgeoDB {
namespace common {
constexpr XYZ64_t::XYZ64_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f64x_(0)
  , f64y_(0)
  , f64z_(0){}
struct XYZ64_tDefaultTypeInternal {
  constexpr XYZ64_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XYZ64_tDefaultTypeInternal() {}
  union {
    XYZ64_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XYZ64_tDefaultTypeInternal _XYZ64_t_default_instance_;
constexpr XYZ32_t::XYZ32_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fx_(0)
  , fy_(0)
  , fz_(0){}
struct XYZ32_tDefaultTypeInternal {
  constexpr XYZ32_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XYZ32_tDefaultTypeInternal() {}
  union {
    XYZ32_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XYZ32_tDefaultTypeInternal _XYZ32_t_default_instance_;
constexpr Orientation32_t::Orientation32_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fqx_(0)
  , fqy_(0)
  , fqz_(0)
  , fqw_(0){}
struct Orientation32_tDefaultTypeInternal {
  constexpr Orientation32_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Orientation32_tDefaultTypeInternal() {}
  union {
    Orientation32_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Orientation32_tDefaultTypeInternal _Orientation32_t_default_instance_;
constexpr Extrinsic_t::Extrinsic_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sttranslate_(nullptr)
  , storientation_(nullptr){}
struct Extrinsic_tDefaultTypeInternal {
  constexpr Extrinsic_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Extrinsic_tDefaultTypeInternal() {}
  union {
    Extrinsic_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Extrinsic_tDefaultTypeInternal _Extrinsic_t_default_instance_;
constexpr Point2DInt_t::Point2DInt_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unu_(0u)
  , unv_(0u){}
struct Point2DInt_tDefaultTypeInternal {
  constexpr Point2DInt_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point2DInt_tDefaultTypeInternal() {}
  union {
    Point2DInt_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point2DInt_tDefaultTypeInternal _Point2DInt_t_default_instance_;
constexpr Point2DFloat_t::Point2DFloat_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fu_(0)
  , fv_(0){}
struct Point2DFloat_tDefaultTypeInternal {
  constexpr Point2DFloat_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point2DFloat_tDefaultTypeInternal() {}
  union {
    Point2DFloat_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point2DFloat_tDefaultTypeInternal _Point2DFloat_t_default_instance_;
constexpr UVPoint_t::UVPoint_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct UVPoint_tDefaultTypeInternal {
  constexpr UVPoint_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UVPoint_tDefaultTypeInternal() {}
  union {
    UVPoint_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UVPoint_tDefaultTypeInternal _UVPoint_t_default_instance_;
}  // namespace common
}  // namespace VgeoDB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vgeodb_5fcommon_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vgeodb_5fcommon_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vgeodb_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vgeodb_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ64_t, f64x_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ64_t, f64y_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ64_t, f64z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ32_t, fx_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ32_t, fy_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::XYZ32_t, fz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Orientation32_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Orientation32_t, fqx_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Orientation32_t, fqy_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Orientation32_t, fqz_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Orientation32_t, fqw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Extrinsic_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Extrinsic_t, sttranslate_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Extrinsic_t, storientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Point2DInt_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Point2DInt_t, unu_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Point2DInt_t, unv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Point2DFloat_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Point2DFloat_t, fu_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::Point2DFloat_t, fv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::UVPoint_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::UVPoint_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::VgeoDB::common::UVPoint_t, uUVPoint_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VgeoDB::common::XYZ64_t)},
  { 8, -1, sizeof(::VgeoDB::common::XYZ32_t)},
  { 16, -1, sizeof(::VgeoDB::common::Orientation32_t)},
  { 25, -1, sizeof(::VgeoDB::common::Extrinsic_t)},
  { 32, -1, sizeof(::VgeoDB::common::Point2DInt_t)},
  { 39, -1, sizeof(::VgeoDB::common::Point2DFloat_t)},
  { 46, -1, sizeof(::VgeoDB::common::UVPoint_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_XYZ64_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_XYZ32_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_Orientation32_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_Extrinsic_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_Point2DInt_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_Point2DFloat_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::common::_UVPoint_t_default_instance_),
};

const char descriptor_table_protodef_vgeodb_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023vgeodb_common.proto\022\rVgeoDB.common\"3\n\007"
  "XYZ64_t\022\014\n\004f64X\030\001 \001(\001\022\014\n\004f64Y\030\002 \001(\001\022\014\n\004f"
  "64Z\030\003 \001(\001\"-\n\007XYZ32_t\022\n\n\002fX\030\001 \001(\002\022\n\n\002fY\030\002"
  " \001(\002\022\n\n\002fZ\030\003 \001(\002\"E\n\017Orientation32_t\022\013\n\003f"
  "qX\030\001 \001(\002\022\013\n\003fqY\030\002 \001(\002\022\013\n\003fqZ\030\003 \001(\002\022\013\n\003fq"
  "W\030\004 \001(\002\"q\n\013Extrinsic_t\022+\n\013stTranslate\030\001 "
  "\001(\0132\026.VgeoDB.common.XYZ32_t\0225\n\rstOrienta"
  "tion\030\002 \001(\0132\036.VgeoDB.common.Orientation32"
  "_t\"(\n\014Point2DInt_t\022\013\n\003unU\030\001 \001(\r\022\013\n\003unV\030\002"
  " \001(\r\"(\n\016Point2DFloat_t\022\n\n\002fU\030\001 \001(\002\022\n\n\002fV"
  "\030\002 \001(\002\"\201\001\n\tUVPoint_t\0221\n\nstPointInt\030\001 \001(\013"
  "2\033.VgeoDB.common.Point2DInt_tH\000\0225\n\014stPoi"
  "ntFloat\030\002 \001(\0132\035.VgeoDB.common.Point2DFlo"
  "at_tH\000B\n\n\010uUVPointBQ\n\rvgeodb.commonZ@git"
  "hub.com/sysmoon/vps-grpc-gateway/schema/"
  "SensorData/src/golangb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vgeodb_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vgeodb_5fcommon_2eproto = {
  false, false, 629, descriptor_table_protodef_vgeodb_5fcommon_2eproto, "vgeodb_common.proto", 
  &descriptor_table_vgeodb_5fcommon_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_vgeodb_5fcommon_2eproto::offsets,
  file_level_metadata_vgeodb_5fcommon_2eproto, file_level_enum_descriptors_vgeodb_5fcommon_2eproto, file_level_service_descriptors_vgeodb_5fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_vgeodb_5fcommon_2eproto_getter() {
  return &descriptor_table_vgeodb_5fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vgeodb_5fcommon_2eproto(&descriptor_table_vgeodb_5fcommon_2eproto);
namespace VgeoDB {
namespace common {

// ===================================================================

class XYZ64_t::_Internal {
 public:
};

XYZ64_t::XYZ64_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.XYZ64_t)
}
XYZ64_t::XYZ64_t(const XYZ64_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f64x_, &from.f64x_,
    static_cast<size_t>(reinterpret_cast<char*>(&f64z_) -
    reinterpret_cast<char*>(&f64x_)) + sizeof(f64z_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.XYZ64_t)
}

inline void XYZ64_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f64x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f64z_) -
    reinterpret_cast<char*>(&f64x_)) + sizeof(f64z_));
}

XYZ64_t::~XYZ64_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.XYZ64_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XYZ64_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XYZ64_t::ArenaDtor(void* object) {
  XYZ64_t* _this = reinterpret_cast< XYZ64_t* >(object);
  (void)_this;
}
void XYZ64_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYZ64_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XYZ64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.XYZ64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f64x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f64z_) -
      reinterpret_cast<char*>(&f64x_)) + sizeof(f64z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYZ64_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double f64X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          f64x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          f64y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          f64z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XYZ64_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.XYZ64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double f64X = 1;
  if (!(this->_internal_f64x() <= 0 && this->_internal_f64x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_f64x(), target);
  }

  // double f64Y = 2;
  if (!(this->_internal_f64y() <= 0 && this->_internal_f64y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f64y(), target);
  }

  // double f64Z = 3;
  if (!(this->_internal_f64z() <= 0 && this->_internal_f64z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_f64z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.XYZ64_t)
  return target;
}

size_t XYZ64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.XYZ64_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double f64X = 1;
  if (!(this->_internal_f64x() <= 0 && this->_internal_f64x() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Y = 2;
  if (!(this->_internal_f64y() <= 0 && this->_internal_f64y() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Z = 3;
  if (!(this->_internal_f64z() <= 0 && this->_internal_f64z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XYZ64_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XYZ64_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XYZ64_t::GetClassData() const { return &_class_data_; }

void XYZ64_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<XYZ64_t *>(to)->MergeFrom(
      static_cast<const XYZ64_t &>(from));
}


void XYZ64_t::MergeFrom(const XYZ64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.XYZ64_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_f64x() <= 0 && from._internal_f64x() >= 0)) {
    _internal_set_f64x(from._internal_f64x());
  }
  if (!(from._internal_f64y() <= 0 && from._internal_f64y() >= 0)) {
    _internal_set_f64y(from._internal_f64y());
  }
  if (!(from._internal_f64z() <= 0 && from._internal_f64z() >= 0)) {
    _internal_set_f64z(from._internal_f64z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XYZ64_t::CopyFrom(const XYZ64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.XYZ64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYZ64_t::IsInitialized() const {
  return true;
}

void XYZ64_t::InternalSwap(XYZ64_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYZ64_t, f64z_)
      + sizeof(XYZ64_t::f64z_)
      - PROTOBUF_FIELD_OFFSET(XYZ64_t, f64x_)>(
          reinterpret_cast<char*>(&f64x_),
          reinterpret_cast<char*>(&other->f64x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYZ64_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[0]);
}

// ===================================================================

class XYZ32_t::_Internal {
 public:
};

XYZ32_t::XYZ32_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.XYZ32_t)
}
XYZ32_t::XYZ32_t(const XYZ32_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fx_, &from.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&fz_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(fz_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.XYZ32_t)
}

inline void XYZ32_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fz_) -
    reinterpret_cast<char*>(&fx_)) + sizeof(fz_));
}

XYZ32_t::~XYZ32_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.XYZ32_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XYZ32_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XYZ32_t::ArenaDtor(void* object) {
  XYZ32_t* _this = reinterpret_cast< XYZ32_t* >(object);
  (void)_this;
}
void XYZ32_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XYZ32_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XYZ32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.XYZ32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fz_) -
      reinterpret_cast<char*>(&fx_)) + sizeof(fz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XYZ32_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* XYZ32_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.XYZ32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fX = 1;
  if (!(this->_internal_fx() <= 0 && this->_internal_fx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // float fY = 2;
  if (!(this->_internal_fy() <= 0 && this->_internal_fy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fy(), target);
  }

  // float fZ = 3;
  if (!(this->_internal_fz() <= 0 && this->_internal_fz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.XYZ32_t)
  return target;
}

size_t XYZ32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.XYZ32_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fX = 1;
  if (!(this->_internal_fx() <= 0 && this->_internal_fx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fY = 2;
  if (!(this->_internal_fy() <= 0 && this->_internal_fy() >= 0)) {
    total_size += 1 + 4;
  }

  // float fZ = 3;
  if (!(this->_internal_fz() <= 0 && this->_internal_fz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XYZ32_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XYZ32_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XYZ32_t::GetClassData() const { return &_class_data_; }

void XYZ32_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<XYZ32_t *>(to)->MergeFrom(
      static_cast<const XYZ32_t &>(from));
}


void XYZ32_t::MergeFrom(const XYZ32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.XYZ32_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_fx() <= 0 && from._internal_fx() >= 0)) {
    _internal_set_fx(from._internal_fx());
  }
  if (!(from._internal_fy() <= 0 && from._internal_fy() >= 0)) {
    _internal_set_fy(from._internal_fy());
  }
  if (!(from._internal_fz() <= 0 && from._internal_fz() >= 0)) {
    _internal_set_fz(from._internal_fz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XYZ32_t::CopyFrom(const XYZ32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.XYZ32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XYZ32_t::IsInitialized() const {
  return true;
}

void XYZ32_t::InternalSwap(XYZ32_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XYZ32_t, fz_)
      + sizeof(XYZ32_t::fz_)
      - PROTOBUF_FIELD_OFFSET(XYZ32_t, fx_)>(
          reinterpret_cast<char*>(&fx_),
          reinterpret_cast<char*>(&other->fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XYZ32_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[1]);
}

// ===================================================================

class Orientation32_t::_Internal {
 public:
};

Orientation32_t::Orientation32_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.Orientation32_t)
}
Orientation32_t::Orientation32_t(const Orientation32_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fqx_, &from.fqx_,
    static_cast<size_t>(reinterpret_cast<char*>(&fqw_) -
    reinterpret_cast<char*>(&fqx_)) + sizeof(fqw_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.Orientation32_t)
}

inline void Orientation32_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fqx_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fqw_) -
    reinterpret_cast<char*>(&fqx_)) + sizeof(fqw_));
}

Orientation32_t::~Orientation32_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.Orientation32_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Orientation32_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation32_t::ArenaDtor(void* object) {
  Orientation32_t* _this = reinterpret_cast< Orientation32_t* >(object);
  (void)_this;
}
void Orientation32_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation32_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation32_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.Orientation32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fqx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fqw_) -
      reinterpret_cast<char*>(&fqx_)) + sizeof(fqw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation32_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fqX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fqx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fqY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fqy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fqZ = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fqz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fqW = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          fqw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation32_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.Orientation32_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fqX = 1;
  if (!(this->_internal_fqx() <= 0 && this->_internal_fqx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fqx(), target);
  }

  // float fqY = 2;
  if (!(this->_internal_fqy() <= 0 && this->_internal_fqy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fqy(), target);
  }

  // float fqZ = 3;
  if (!(this->_internal_fqz() <= 0 && this->_internal_fqz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fqz(), target);
  }

  // float fqW = 4;
  if (!(this->_internal_fqw() <= 0 && this->_internal_fqw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_fqw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.Orientation32_t)
  return target;
}

size_t Orientation32_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.Orientation32_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fqX = 1;
  if (!(this->_internal_fqx() <= 0 && this->_internal_fqx() >= 0)) {
    total_size += 1 + 4;
  }

  // float fqY = 2;
  if (!(this->_internal_fqy() <= 0 && this->_internal_fqy() >= 0)) {
    total_size += 1 + 4;
  }

  // float fqZ = 3;
  if (!(this->_internal_fqz() <= 0 && this->_internal_fqz() >= 0)) {
    total_size += 1 + 4;
  }

  // float fqW = 4;
  if (!(this->_internal_fqw() <= 0 && this->_internal_fqw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation32_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation32_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation32_t::GetClassData() const { return &_class_data_; }

void Orientation32_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Orientation32_t *>(to)->MergeFrom(
      static_cast<const Orientation32_t &>(from));
}


void Orientation32_t::MergeFrom(const Orientation32_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.Orientation32_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_fqx() <= 0 && from._internal_fqx() >= 0)) {
    _internal_set_fqx(from._internal_fqx());
  }
  if (!(from._internal_fqy() <= 0 && from._internal_fqy() >= 0)) {
    _internal_set_fqy(from._internal_fqy());
  }
  if (!(from._internal_fqz() <= 0 && from._internal_fqz() >= 0)) {
    _internal_set_fqz(from._internal_fqz());
  }
  if (!(from._internal_fqw() <= 0 && from._internal_fqw() >= 0)) {
    _internal_set_fqw(from._internal_fqw());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation32_t::CopyFrom(const Orientation32_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.Orientation32_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation32_t::IsInitialized() const {
  return true;
}

void Orientation32_t::InternalSwap(Orientation32_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation32_t, fqw_)
      + sizeof(Orientation32_t::fqw_)
      - PROTOBUF_FIELD_OFFSET(Orientation32_t, fqx_)>(
          reinterpret_cast<char*>(&fqx_),
          reinterpret_cast<char*>(&other->fqx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation32_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[2]);
}

// ===================================================================

class Extrinsic_t::_Internal {
 public:
  static const ::VgeoDB::common::XYZ32_t& sttranslate(const Extrinsic_t* msg);
  static const ::VgeoDB::common::Orientation32_t& storientation(const Extrinsic_t* msg);
};

const ::VgeoDB::common::XYZ32_t&
Extrinsic_t::_Internal::sttranslate(const Extrinsic_t* msg) {
  return *msg->sttranslate_;
}
const ::VgeoDB::common::Orientation32_t&
Extrinsic_t::_Internal::storientation(const Extrinsic_t* msg) {
  return *msg->storientation_;
}
Extrinsic_t::Extrinsic_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.Extrinsic_t)
}
Extrinsic_t::Extrinsic_t(const Extrinsic_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sttranslate()) {
    sttranslate_ = new ::VgeoDB::common::XYZ32_t(*from.sttranslate_);
  } else {
    sttranslate_ = nullptr;
  }
  if (from._internal_has_storientation()) {
    storientation_ = new ::VgeoDB::common::Orientation32_t(*from.storientation_);
  } else {
    storientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.Extrinsic_t)
}

inline void Extrinsic_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sttranslate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&storientation_) -
    reinterpret_cast<char*>(&sttranslate_)) + sizeof(storientation_));
}

Extrinsic_t::~Extrinsic_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.Extrinsic_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Extrinsic_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sttranslate_;
  if (this != internal_default_instance()) delete storientation_;
}

void Extrinsic_t::ArenaDtor(void* object) {
  Extrinsic_t* _this = reinterpret_cast< Extrinsic_t* >(object);
  (void)_this;
}
void Extrinsic_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Extrinsic_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Extrinsic_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.Extrinsic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sttranslate_ != nullptr) {
    delete sttranslate_;
  }
  sttranslate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && storientation_ != nullptr) {
    delete storientation_;
  }
  storientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Extrinsic_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .VgeoDB.common.XYZ32_t stTranslate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sttranslate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.Orientation32_t stOrientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Extrinsic_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.Extrinsic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.common.XYZ32_t stTranslate = 1;
  if (this->_internal_has_sttranslate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sttranslate(this), target, stream);
  }

  // .VgeoDB.common.Orientation32_t stOrientation = 2;
  if (this->_internal_has_storientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::storientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.Extrinsic_t)
  return target;
}

size_t Extrinsic_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.Extrinsic_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VgeoDB.common.XYZ32_t stTranslate = 1;
  if (this->_internal_has_sttranslate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sttranslate_);
  }

  // .VgeoDB.common.Orientation32_t stOrientation = 2;
  if (this->_internal_has_storientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Extrinsic_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Extrinsic_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Extrinsic_t::GetClassData() const { return &_class_data_; }

void Extrinsic_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Extrinsic_t *>(to)->MergeFrom(
      static_cast<const Extrinsic_t &>(from));
}


void Extrinsic_t::MergeFrom(const Extrinsic_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.Extrinsic_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sttranslate()) {
    _internal_mutable_sttranslate()->::VgeoDB::common::XYZ32_t::MergeFrom(from._internal_sttranslate());
  }
  if (from._internal_has_storientation()) {
    _internal_mutable_storientation()->::VgeoDB::common::Orientation32_t::MergeFrom(from._internal_storientation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Extrinsic_t::CopyFrom(const Extrinsic_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.Extrinsic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extrinsic_t::IsInitialized() const {
  return true;
}

void Extrinsic_t::InternalSwap(Extrinsic_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Extrinsic_t, storientation_)
      + sizeof(Extrinsic_t::storientation_)
      - PROTOBUF_FIELD_OFFSET(Extrinsic_t, sttranslate_)>(
          reinterpret_cast<char*>(&sttranslate_),
          reinterpret_cast<char*>(&other->sttranslate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Extrinsic_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[3]);
}

// ===================================================================

class Point2DInt_t::_Internal {
 public:
};

Point2DInt_t::Point2DInt_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.Point2DInt_t)
}
Point2DInt_t::Point2DInt_t(const Point2DInt_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unu_, &from.unu_,
    static_cast<size_t>(reinterpret_cast<char*>(&unv_) -
    reinterpret_cast<char*>(&unu_)) + sizeof(unv_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.Point2DInt_t)
}

inline void Point2DInt_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unv_) -
    reinterpret_cast<char*>(&unu_)) + sizeof(unv_));
}

Point2DInt_t::~Point2DInt_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.Point2DInt_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point2DInt_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2DInt_t::ArenaDtor(void* object) {
  Point2DInt_t* _this = reinterpret_cast< Point2DInt_t* >(object);
  (void)_this;
}
void Point2DInt_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2DInt_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point2DInt_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.Point2DInt_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unv_) -
      reinterpret_cast<char*>(&unu_)) + sizeof(unv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2DInt_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 unU = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 unV = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2DInt_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.Point2DInt_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 unU = 1;
  if (this->_internal_unu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unu(), target);
  }

  // uint32 unV = 2;
  if (this->_internal_unv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.Point2DInt_t)
  return target;
}

size_t Point2DInt_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.Point2DInt_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 unU = 1;
  if (this->_internal_unu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unu());
  }

  // uint32 unV = 2;
  if (this->_internal_unv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point2DInt_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point2DInt_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point2DInt_t::GetClassData() const { return &_class_data_; }

void Point2DInt_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Point2DInt_t *>(to)->MergeFrom(
      static_cast<const Point2DInt_t &>(from));
}


void Point2DInt_t::MergeFrom(const Point2DInt_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.Point2DInt_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_unu() != 0) {
    _internal_set_unu(from._internal_unu());
  }
  if (from._internal_unv() != 0) {
    _internal_set_unv(from._internal_unv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point2DInt_t::CopyFrom(const Point2DInt_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.Point2DInt_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2DInt_t::IsInitialized() const {
  return true;
}

void Point2DInt_t::InternalSwap(Point2DInt_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2DInt_t, unv_)
      + sizeof(Point2DInt_t::unv_)
      - PROTOBUF_FIELD_OFFSET(Point2DInt_t, unu_)>(
          reinterpret_cast<char*>(&unu_),
          reinterpret_cast<char*>(&other->unu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2DInt_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[4]);
}

// ===================================================================

class Point2DFloat_t::_Internal {
 public:
};

Point2DFloat_t::Point2DFloat_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.Point2DFloat_t)
}
Point2DFloat_t::Point2DFloat_t(const Point2DFloat_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&fu_, &from.fu_,
    static_cast<size_t>(reinterpret_cast<char*>(&fv_) -
    reinterpret_cast<char*>(&fu_)) + sizeof(fv_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.Point2DFloat_t)
}

inline void Point2DFloat_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&fu_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fv_) -
    reinterpret_cast<char*>(&fu_)) + sizeof(fv_));
}

Point2DFloat_t::~Point2DFloat_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.Point2DFloat_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point2DFloat_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2DFloat_t::ArenaDtor(void* object) {
  Point2DFloat_t* _this = reinterpret_cast< Point2DFloat_t* >(object);
  (void)_this;
}
void Point2DFloat_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2DFloat_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point2DFloat_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.Point2DFloat_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fv_) -
      reinterpret_cast<char*>(&fu_)) + sizeof(fv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2DFloat_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fU = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          fu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float fV = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          fv_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2DFloat_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.Point2DFloat_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float fU = 1;
  if (!(this->_internal_fu() <= 0 && this->_internal_fu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_fu(), target);
  }

  // float fV = 2;
  if (!(this->_internal_fv() <= 0 && this->_internal_fv() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_fv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.Point2DFloat_t)
  return target;
}

size_t Point2DFloat_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.Point2DFloat_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fU = 1;
  if (!(this->_internal_fu() <= 0 && this->_internal_fu() >= 0)) {
    total_size += 1 + 4;
  }

  // float fV = 2;
  if (!(this->_internal_fv() <= 0 && this->_internal_fv() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point2DFloat_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point2DFloat_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point2DFloat_t::GetClassData() const { return &_class_data_; }

void Point2DFloat_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Point2DFloat_t *>(to)->MergeFrom(
      static_cast<const Point2DFloat_t &>(from));
}


void Point2DFloat_t::MergeFrom(const Point2DFloat_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.Point2DFloat_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_fu() <= 0 && from._internal_fu() >= 0)) {
    _internal_set_fu(from._internal_fu());
  }
  if (!(from._internal_fv() <= 0 && from._internal_fv() >= 0)) {
    _internal_set_fv(from._internal_fv());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point2DFloat_t::CopyFrom(const Point2DFloat_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.Point2DFloat_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2DFloat_t::IsInitialized() const {
  return true;
}

void Point2DFloat_t::InternalSwap(Point2DFloat_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2DFloat_t, fv_)
      + sizeof(Point2DFloat_t::fv_)
      - PROTOBUF_FIELD_OFFSET(Point2DFloat_t, fu_)>(
          reinterpret_cast<char*>(&fu_),
          reinterpret_cast<char*>(&other->fu_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2DFloat_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[5]);
}

// ===================================================================

class UVPoint_t::_Internal {
 public:
  static const ::VgeoDB::common::Point2DInt_t& stpointint(const UVPoint_t* msg);
  static const ::VgeoDB::common::Point2DFloat_t& stpointfloat(const UVPoint_t* msg);
};

const ::VgeoDB::common::Point2DInt_t&
UVPoint_t::_Internal::stpointint(const UVPoint_t* msg) {
  return *msg->uUVPoint_.stpointint_;
}
const ::VgeoDB::common::Point2DFloat_t&
UVPoint_t::_Internal::stpointfloat(const UVPoint_t* msg) {
  return *msg->uUVPoint_.stpointfloat_;
}
void UVPoint_t::set_allocated_stpointint(::VgeoDB::common::Point2DInt_t* stpointint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_uUVPoint();
  if (stpointint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::VgeoDB::common::Point2DInt_t>::GetOwningArena(stpointint);
    if (message_arena != submessage_arena) {
      stpointint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stpointint, submessage_arena);
    }
    set_has_stpointint();
    uUVPoint_.stpointint_ = stpointint;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.common.UVPoint_t.stPointInt)
}
void UVPoint_t::set_allocated_stpointfloat(::VgeoDB::common::Point2DFloat_t* stpointfloat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_uUVPoint();
  if (stpointfloat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::VgeoDB::common::Point2DFloat_t>::GetOwningArena(stpointfloat);
    if (message_arena != submessage_arena) {
      stpointfloat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stpointfloat, submessage_arena);
    }
    set_has_stpointfloat();
    uUVPoint_.stpointfloat_ = stpointfloat;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.common.UVPoint_t.stPointFloat)
}
UVPoint_t::UVPoint_t(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:VgeoDB.common.UVPoint_t)
}
UVPoint_t::UVPoint_t(const UVPoint_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_uUVPoint();
  switch (from.uUVPoint_case()) {
    case kStPointInt: {
      _internal_mutable_stpointint()->::VgeoDB::common::Point2DInt_t::MergeFrom(from._internal_stpointint());
      break;
    }
    case kStPointFloat: {
      _internal_mutable_stpointfloat()->::VgeoDB::common::Point2DFloat_t::MergeFrom(from._internal_stpointfloat());
      break;
    }
    case UUVPOINT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.common.UVPoint_t)
}

inline void UVPoint_t::SharedCtor() {
clear_has_uUVPoint();
}

UVPoint_t::~UVPoint_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.common.UVPoint_t)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UVPoint_t::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_uUVPoint()) {
    clear_uUVPoint();
  }
}

void UVPoint_t::ArenaDtor(void* object) {
  UVPoint_t* _this = reinterpret_cast< UVPoint_t* >(object);
  (void)_this;
}
void UVPoint_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UVPoint_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UVPoint_t::clear_uUVPoint() {
// @@protoc_insertion_point(one_of_clear_start:VgeoDB.common.UVPoint_t)
  switch (uUVPoint_case()) {
    case kStPointInt: {
      if (GetArenaForAllocation() == nullptr) {
        delete uUVPoint_.stpointint_;
      }
      break;
    }
    case kStPointFloat: {
      if (GetArenaForAllocation() == nullptr) {
        delete uUVPoint_.stpointfloat_;
      }
      break;
    }
    case UUVPOINT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UUVPOINT_NOT_SET;
}


void UVPoint_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.common.UVPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_uUVPoint();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UVPoint_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .VgeoDB.common.Point2DInt_t stPointInt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stpointint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.Point2DFloat_t stPointFloat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stpointfloat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UVPoint_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.common.UVPoint_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.common.Point2DInt_t stPointInt = 1;
  if (_internal_has_stpointint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stpointint(this), target, stream);
  }

  // .VgeoDB.common.Point2DFloat_t stPointFloat = 2;
  if (_internal_has_stpointfloat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stpointfloat(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.common.UVPoint_t)
  return target;
}

size_t UVPoint_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.common.UVPoint_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (uUVPoint_case()) {
    // .VgeoDB.common.Point2DInt_t stPointInt = 1;
    case kStPointInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uUVPoint_.stpointint_);
      break;
    }
    // .VgeoDB.common.Point2DFloat_t stPointFloat = 2;
    case kStPointFloat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uUVPoint_.stpointfloat_);
      break;
    }
    case UUVPOINT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UVPoint_t::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UVPoint_t::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UVPoint_t::GetClassData() const { return &_class_data_; }

void UVPoint_t::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UVPoint_t *>(to)->MergeFrom(
      static_cast<const UVPoint_t &>(from));
}


void UVPoint_t::MergeFrom(const UVPoint_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.common.UVPoint_t)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.uUVPoint_case()) {
    case kStPointInt: {
      _internal_mutable_stpointint()->::VgeoDB::common::Point2DInt_t::MergeFrom(from._internal_stpointint());
      break;
    }
    case kStPointFloat: {
      _internal_mutable_stpointfloat()->::VgeoDB::common::Point2DFloat_t::MergeFrom(from._internal_stpointfloat());
      break;
    }
    case UUVPOINT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UVPoint_t::CopyFrom(const UVPoint_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.common.UVPoint_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UVPoint_t::IsInitialized() const {
  return true;
}

void UVPoint_t::InternalSwap(UVPoint_t* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uUVPoint_, other->uUVPoint_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UVPoint_t::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_vgeodb_5fcommon_2eproto_getter, &descriptor_table_vgeodb_5fcommon_2eproto_once,
      file_level_metadata_vgeodb_5fcommon_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VgeoDB::common::XYZ64_t* Arena::CreateMaybeMessage< ::VgeoDB::common::XYZ64_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::XYZ64_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::common::XYZ32_t* Arena::CreateMaybeMessage< ::VgeoDB::common::XYZ32_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::XYZ32_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::common::Orientation32_t* Arena::CreateMaybeMessage< ::VgeoDB::common::Orientation32_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::Orientation32_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::common::Extrinsic_t* Arena::CreateMaybeMessage< ::VgeoDB::common::Extrinsic_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::Extrinsic_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::common::Point2DInt_t* Arena::CreateMaybeMessage< ::VgeoDB::common::Point2DInt_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::Point2DInt_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::common::Point2DFloat_t* Arena::CreateMaybeMessage< ::VgeoDB::common::Point2DFloat_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::Point2DFloat_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::common::UVPoint_t* Arena::CreateMaybeMessage< ::VgeoDB::common::UVPoint_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::common::UVPoint_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
