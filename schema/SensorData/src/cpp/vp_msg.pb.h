// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vp_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vp_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vp_state.pb.h"
#include "vp_camera.pb.h"
#include "vp_sensors.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vp_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vp_5fmsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fmsg_2eproto;
namespace vpdata {
class VPBody;
struct VPBodyDefaultTypeInternal;
extern VPBodyDefaultTypeInternal _VPBody_default_instance_;
class VPData;
struct VPDataDefaultTypeInternal;
extern VPDataDefaultTypeInternal _VPData_default_instance_;
class VPHeader;
struct VPHeaderDefaultTypeInternal;
extern VPHeaderDefaultTypeInternal _VPHeader_default_instance_;
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> ::vpdata::VPBody* Arena::CreateMaybeMessage<::vpdata::VPBody>(Arena*);
template<> ::vpdata::VPData* Arena::CreateMaybeMessage<::vpdata::VPData>(Arena*);
template<> ::vpdata::VPHeader* Arena::CreateMaybeMessage<::vpdata::VPHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vpdata {

// ===================================================================

class VPHeader final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.VPHeader) */ {
 public:
  inline VPHeader() : VPHeader(nullptr) {}
  ~VPHeader() override;
  explicit constexpr VPHeader(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPHeader(const VPHeader& from);
  VPHeader(VPHeader&& from) noexcept
    : VPHeader() {
    *this = ::std::move(from);
  }

  inline VPHeader& operator=(const VPHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPHeader& operator=(VPHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPHeader* internal_default_instance() {
    return reinterpret_cast<const VPHeader*>(
               &_VPHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VPHeader& a, VPHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(VPHeader* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPHeader* New() const final {
    return new VPHeader();
  }

  VPHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPHeader>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VPHeader& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VPHeader& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.VPHeader";
  }
  protected:
  explicit VPHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArs32TelcoPCIFieldNumber = 4,
    kArf64LastLocFieldNumber = 7,
    kArf32ExtrinsicFieldNumber = 8,
    kStrSchemaVerFieldNumber = 1,
    kStrDeviceNameFieldNumber = 2,
    kStrOSInfoFieldNumber = 3,
    kStrTargetEnvFieldNumber = 9,
    kU64TSSendFieldNumber = 6,
    kS32TelcoRSSIFieldNumber = 5,
  };
  // repeated int32 ars32TelcoPCI = 4;
  int ars32telcopci_size() const;
  private:
  int _internal_ars32telcopci_size() const;
  public:
  void clear_ars32telcopci();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ars32telcopci(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ars32telcopci() const;
  void _internal_add_ars32telcopci(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ars32telcopci();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ars32telcopci(int index) const;
  void set_ars32telcopci(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ars32telcopci(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ars32telcopci() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ars32telcopci();

  // repeated double arf64LastLoc = 7;
  int arf64lastloc_size() const;
  private:
  int _internal_arf64lastloc_size() const;
  public:
  void clear_arf64lastloc();
  private:
  double _internal_arf64lastloc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_arf64lastloc() const;
  void _internal_add_arf64lastloc(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_arf64lastloc();
  public:
  double arf64lastloc(int index) const;
  void set_arf64lastloc(int index, double value);
  void add_arf64lastloc(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      arf64lastloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_arf64lastloc();

  // repeated float arf32Extrinsic = 8;
  int arf32extrinsic_size() const;
  private:
  int _internal_arf32extrinsic_size() const;
  public:
  void clear_arf32extrinsic();
  private:
  float _internal_arf32extrinsic(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32extrinsic() const;
  void _internal_add_arf32extrinsic(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32extrinsic();
  public:
  float arf32extrinsic(int index) const;
  void set_arf32extrinsic(int index, float value);
  void add_arf32extrinsic(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32extrinsic() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32extrinsic();

  // string strSchemaVer = 1;
  void clear_strschemaver();
  const std::string& strschemaver() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strschemaver(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strschemaver();
  PROTOBUF_MUST_USE_RESULT std::string* release_strschemaver();
  void set_allocated_strschemaver(std::string* strschemaver);
  private:
  const std::string& _internal_strschemaver() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strschemaver(const std::string& value);
  std::string* _internal_mutable_strschemaver();
  public:

  // string strDeviceName = 2;
  void clear_strdevicename();
  const std::string& strdevicename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strdevicename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strdevicename();
  PROTOBUF_MUST_USE_RESULT std::string* release_strdevicename();
  void set_allocated_strdevicename(std::string* strdevicename);
  private:
  const std::string& _internal_strdevicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strdevicename(const std::string& value);
  std::string* _internal_mutable_strdevicename();
  public:

  // string strOSInfo = 3;
  void clear_strosinfo();
  const std::string& strosinfo() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strosinfo(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strosinfo();
  PROTOBUF_MUST_USE_RESULT std::string* release_strosinfo();
  void set_allocated_strosinfo(std::string* strosinfo);
  private:
  const std::string& _internal_strosinfo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strosinfo(const std::string& value);
  std::string* _internal_mutable_strosinfo();
  public:

  // string strTargetEnv = 9;
  void clear_strtargetenv();
  const std::string& strtargetenv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_strtargetenv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_strtargetenv();
  PROTOBUF_MUST_USE_RESULT std::string* release_strtargetenv();
  void set_allocated_strtargetenv(std::string* strtargetenv);
  private:
  const std::string& _internal_strtargetenv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strtargetenv(const std::string& value);
  std::string* _internal_mutable_strtargetenv();
  public:

  // uint64 u64TSSend = 6;
  void clear_u64tssend();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tssend() const;
  void set_u64tssend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tssend() const;
  void _internal_set_u64tssend(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 s32TelcoRSSI = 5;
  void clear_s32telcorssi();
  ::PROTOBUF_NAMESPACE_ID::int32 s32telcorssi() const;
  void set_s32telcorssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_s32telcorssi() const;
  void _internal_set_s32telcorssi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.VPHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ars32telcopci_;
  mutable std::atomic<int> _ars32telcopci_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > arf64lastloc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32extrinsic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strschemaver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strdevicename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strosinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strtargetenv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tssend_;
  ::PROTOBUF_NAMESPACE_ID::int32 s32telcorssi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class VPBody final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.VPBody) */ {
 public:
  inline VPBody() : VPBody(nullptr) {}
  ~VPBody() override;
  explicit constexpr VPBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPBody(const VPBody& from);
  VPBody(VPBody&& from) noexcept
    : VPBody() {
    *this = ::std::move(from);
  }

  inline VPBody& operator=(const VPBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPBody& operator=(VPBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPBody* internal_default_instance() {
    return reinterpret_cast<const VPBody*>(
               &_VPBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VPBody& a, VPBody& b) {
    a.Swap(&b);
  }
  inline void Swap(VPBody* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPBody* New() const final {
    return new VPBody();
  }

  VPBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPBody>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VPBody& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VPBody& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.VPBody";
  }
  protected:
  explicit VPBody(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStGPSFieldNumber = 3,
    kStIMUFieldNumber = 4,
    kStBaroMeterFieldNumber = 5,
    kStMagneticCompassFieldNumber = 6,
    kStGPSLocationInfoFieldNumber = 7,
    kStAccelerometerInfoFieldNumber = 8,
    kStGyroscopeInfoFieldNumber = 9,
    kStRotationVectorInfoFieldNumber = 10,
    kStStepCounterInfoFieldNumber = 11,
    kStStepDetectorInfoFieldNumber = 12,
    kStMagneticFieldInfoFieldNumber = 13,
    kStPressureInfoFieldNumber = 14,
    kStSubCamerasFieldNumber = 21,
    kStStateFieldNumber = 1,
    kStCameraFieldNumber = 2,
  };
  // repeated .vpdata.sensors.GPS_t stGPS = 3;
  int stgps_size() const;
  private:
  int _internal_stgps_size() const;
  public:
  void clear_stgps();
  ::vpdata::sensors::GPS_t* mutable_stgps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPS_t >*
      mutable_stgps();
  private:
  const ::vpdata::sensors::GPS_t& _internal_stgps(int index) const;
  ::vpdata::sensors::GPS_t* _internal_add_stgps();
  public:
  const ::vpdata::sensors::GPS_t& stgps(int index) const;
  ::vpdata::sensors::GPS_t* add_stgps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPS_t >&
      stgps() const;

  // repeated .vpdata.sensors.IMU_t stIMU = 4;
  int stimu_size() const;
  private:
  int _internal_stimu_size() const;
  public:
  void clear_stimu();
  ::vpdata::sensors::IMU_t* mutable_stimu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::IMU_t >*
      mutable_stimu();
  private:
  const ::vpdata::sensors::IMU_t& _internal_stimu(int index) const;
  ::vpdata::sensors::IMU_t* _internal_add_stimu();
  public:
  const ::vpdata::sensors::IMU_t& stimu(int index) const;
  ::vpdata::sensors::IMU_t* add_stimu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::IMU_t >&
      stimu() const;

  // repeated .vpdata.sensors.Barometer_t stBaroMeter = 5;
  int stbarometer_size() const;
  private:
  int _internal_stbarometer_size() const;
  public:
  void clear_stbarometer();
  ::vpdata::sensors::Barometer_t* mutable_stbarometer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::Barometer_t >*
      mutable_stbarometer();
  private:
  const ::vpdata::sensors::Barometer_t& _internal_stbarometer(int index) const;
  ::vpdata::sensors::Barometer_t* _internal_add_stbarometer();
  public:
  const ::vpdata::sensors::Barometer_t& stbarometer(int index) const;
  ::vpdata::sensors::Barometer_t* add_stbarometer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::Barometer_t >&
      stbarometer() const;

  // repeated .vpdata.sensors.MCompass_t stMagneticCompass = 6;
  int stmagneticcompass_size() const;
  private:
  int _internal_stmagneticcompass_size() const;
  public:
  void clear_stmagneticcompass();
  ::vpdata::sensors::MCompass_t* mutable_stmagneticcompass(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MCompass_t >*
      mutable_stmagneticcompass();
  private:
  const ::vpdata::sensors::MCompass_t& _internal_stmagneticcompass(int index) const;
  ::vpdata::sensors::MCompass_t* _internal_add_stmagneticcompass();
  public:
  const ::vpdata::sensors::MCompass_t& stmagneticcompass(int index) const;
  ::vpdata::sensors::MCompass_t* add_stmagneticcompass();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MCompass_t >&
      stmagneticcompass() const;

  // repeated .vpdata.sensors.GPSLocationInfo_t stGPSLocationInfo = 7;
  int stgpslocationinfo_size() const;
  private:
  int _internal_stgpslocationinfo_size() const;
  public:
  void clear_stgpslocationinfo();
  ::vpdata::sensors::GPSLocationInfo_t* mutable_stgpslocationinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPSLocationInfo_t >*
      mutable_stgpslocationinfo();
  private:
  const ::vpdata::sensors::GPSLocationInfo_t& _internal_stgpslocationinfo(int index) const;
  ::vpdata::sensors::GPSLocationInfo_t* _internal_add_stgpslocationinfo();
  public:
  const ::vpdata::sensors::GPSLocationInfo_t& stgpslocationinfo(int index) const;
  ::vpdata::sensors::GPSLocationInfo_t* add_stgpslocationinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPSLocationInfo_t >&
      stgpslocationinfo() const;

  // repeated .vpdata.sensors.AccelerometerInfo_t stAccelerometerInfo = 8;
  int staccelerometerinfo_size() const;
  private:
  int _internal_staccelerometerinfo_size() const;
  public:
  void clear_staccelerometerinfo();
  ::vpdata::sensors::AccelerometerInfo_t* mutable_staccelerometerinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::AccelerometerInfo_t >*
      mutable_staccelerometerinfo();
  private:
  const ::vpdata::sensors::AccelerometerInfo_t& _internal_staccelerometerinfo(int index) const;
  ::vpdata::sensors::AccelerometerInfo_t* _internal_add_staccelerometerinfo();
  public:
  const ::vpdata::sensors::AccelerometerInfo_t& staccelerometerinfo(int index) const;
  ::vpdata::sensors::AccelerometerInfo_t* add_staccelerometerinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::AccelerometerInfo_t >&
      staccelerometerinfo() const;

  // repeated .vpdata.sensors.GyroscopeInfo_t stGyroscopeInfo = 9;
  int stgyroscopeinfo_size() const;
  private:
  int _internal_stgyroscopeinfo_size() const;
  public:
  void clear_stgyroscopeinfo();
  ::vpdata::sensors::GyroscopeInfo_t* mutable_stgyroscopeinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GyroscopeInfo_t >*
      mutable_stgyroscopeinfo();
  private:
  const ::vpdata::sensors::GyroscopeInfo_t& _internal_stgyroscopeinfo(int index) const;
  ::vpdata::sensors::GyroscopeInfo_t* _internal_add_stgyroscopeinfo();
  public:
  const ::vpdata::sensors::GyroscopeInfo_t& stgyroscopeinfo(int index) const;
  ::vpdata::sensors::GyroscopeInfo_t* add_stgyroscopeinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GyroscopeInfo_t >&
      stgyroscopeinfo() const;

  // repeated .vpdata.sensors.RotationVectorInfo_t stRotationVectorInfo = 10;
  int strotationvectorinfo_size() const;
  private:
  int _internal_strotationvectorinfo_size() const;
  public:
  void clear_strotationvectorinfo();
  ::vpdata::sensors::RotationVectorInfo_t* mutable_strotationvectorinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::RotationVectorInfo_t >*
      mutable_strotationvectorinfo();
  private:
  const ::vpdata::sensors::RotationVectorInfo_t& _internal_strotationvectorinfo(int index) const;
  ::vpdata::sensors::RotationVectorInfo_t* _internal_add_strotationvectorinfo();
  public:
  const ::vpdata::sensors::RotationVectorInfo_t& strotationvectorinfo(int index) const;
  ::vpdata::sensors::RotationVectorInfo_t* add_strotationvectorinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::RotationVectorInfo_t >&
      strotationvectorinfo() const;

  // repeated .vpdata.sensors.StepCounterInfo_t stStepCounterInfo = 11;
  int ststepcounterinfo_size() const;
  private:
  int _internal_ststepcounterinfo_size() const;
  public:
  void clear_ststepcounterinfo();
  ::vpdata::sensors::StepCounterInfo_t* mutable_ststepcounterinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepCounterInfo_t >*
      mutable_ststepcounterinfo();
  private:
  const ::vpdata::sensors::StepCounterInfo_t& _internal_ststepcounterinfo(int index) const;
  ::vpdata::sensors::StepCounterInfo_t* _internal_add_ststepcounterinfo();
  public:
  const ::vpdata::sensors::StepCounterInfo_t& ststepcounterinfo(int index) const;
  ::vpdata::sensors::StepCounterInfo_t* add_ststepcounterinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepCounterInfo_t >&
      ststepcounterinfo() const;

  // repeated .vpdata.sensors.StepDetectorInfo_t stStepDetectorInfo = 12;
  int ststepdetectorinfo_size() const;
  private:
  int _internal_ststepdetectorinfo_size() const;
  public:
  void clear_ststepdetectorinfo();
  ::vpdata::sensors::StepDetectorInfo_t* mutable_ststepdetectorinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepDetectorInfo_t >*
      mutable_ststepdetectorinfo();
  private:
  const ::vpdata::sensors::StepDetectorInfo_t& _internal_ststepdetectorinfo(int index) const;
  ::vpdata::sensors::StepDetectorInfo_t* _internal_add_ststepdetectorinfo();
  public:
  const ::vpdata::sensors::StepDetectorInfo_t& ststepdetectorinfo(int index) const;
  ::vpdata::sensors::StepDetectorInfo_t* add_ststepdetectorinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepDetectorInfo_t >&
      ststepdetectorinfo() const;

  // repeated .vpdata.sensors.MagneticFieldInfo_t stMagneticFieldInfo = 13;
  int stmagneticfieldinfo_size() const;
  private:
  int _internal_stmagneticfieldinfo_size() const;
  public:
  void clear_stmagneticfieldinfo();
  ::vpdata::sensors::MagneticFieldInfo_t* mutable_stmagneticfieldinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MagneticFieldInfo_t >*
      mutable_stmagneticfieldinfo();
  private:
  const ::vpdata::sensors::MagneticFieldInfo_t& _internal_stmagneticfieldinfo(int index) const;
  ::vpdata::sensors::MagneticFieldInfo_t* _internal_add_stmagneticfieldinfo();
  public:
  const ::vpdata::sensors::MagneticFieldInfo_t& stmagneticfieldinfo(int index) const;
  ::vpdata::sensors::MagneticFieldInfo_t* add_stmagneticfieldinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MagneticFieldInfo_t >&
      stmagneticfieldinfo() const;

  // repeated .vpdata.sensors.PressureInfo_t stPressureInfo = 14;
  int stpressureinfo_size() const;
  private:
  int _internal_stpressureinfo_size() const;
  public:
  void clear_stpressureinfo();
  ::vpdata::sensors::PressureInfo_t* mutable_stpressureinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::PressureInfo_t >*
      mutable_stpressureinfo();
  private:
  const ::vpdata::sensors::PressureInfo_t& _internal_stpressureinfo(int index) const;
  ::vpdata::sensors::PressureInfo_t* _internal_add_stpressureinfo();
  public:
  const ::vpdata::sensors::PressureInfo_t& stpressureinfo(int index) const;
  ::vpdata::sensors::PressureInfo_t* add_stpressureinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::PressureInfo_t >&
      stpressureinfo() const;

  // repeated .vpdata.camera.Camera_t stSubCameras = 21;
  int stsubcameras_size() const;
  private:
  int _internal_stsubcameras_size() const;
  public:
  void clear_stsubcameras();
  ::vpdata::camera::Camera_t* mutable_stsubcameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::camera::Camera_t >*
      mutable_stsubcameras();
  private:
  const ::vpdata::camera::Camera_t& _internal_stsubcameras(int index) const;
  ::vpdata::camera::Camera_t* _internal_add_stsubcameras();
  public:
  const ::vpdata::camera::Camera_t& stsubcameras(int index) const;
  ::vpdata::camera::Camera_t* add_stsubcameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::camera::Camera_t >&
      stsubcameras() const;

  // .vpdata.state.VPState_t stState = 1;
  bool has_ststate() const;
  private:
  bool _internal_has_ststate() const;
  public:
  void clear_ststate();
  const ::vpdata::state::VPState_t& ststate() const;
  PROTOBUF_MUST_USE_RESULT ::vpdata::state::VPState_t* release_ststate();
  ::vpdata::state::VPState_t* mutable_ststate();
  void set_allocated_ststate(::vpdata::state::VPState_t* ststate);
  private:
  const ::vpdata::state::VPState_t& _internal_ststate() const;
  ::vpdata::state::VPState_t* _internal_mutable_ststate();
  public:
  void unsafe_arena_set_allocated_ststate(
      ::vpdata::state::VPState_t* ststate);
  ::vpdata::state::VPState_t* unsafe_arena_release_ststate();

  // .vpdata.camera.Camera_t stCamera = 2;
  bool has_stcamera() const;
  private:
  bool _internal_has_stcamera() const;
  public:
  void clear_stcamera();
  const ::vpdata::camera::Camera_t& stcamera() const;
  PROTOBUF_MUST_USE_RESULT ::vpdata::camera::Camera_t* release_stcamera();
  ::vpdata::camera::Camera_t* mutable_stcamera();
  void set_allocated_stcamera(::vpdata::camera::Camera_t* stcamera);
  private:
  const ::vpdata::camera::Camera_t& _internal_stcamera() const;
  ::vpdata::camera::Camera_t* _internal_mutable_stcamera();
  public:
  void unsafe_arena_set_allocated_stcamera(
      ::vpdata::camera::Camera_t* stcamera);
  ::vpdata::camera::Camera_t* unsafe_arena_release_stcamera();

  // @@protoc_insertion_point(class_scope:vpdata.VPBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPS_t > stgps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::IMU_t > stimu_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::Barometer_t > stbarometer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MCompass_t > stmagneticcompass_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPSLocationInfo_t > stgpslocationinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::AccelerometerInfo_t > staccelerometerinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GyroscopeInfo_t > stgyroscopeinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::RotationVectorInfo_t > strotationvectorinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepCounterInfo_t > ststepcounterinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepDetectorInfo_t > ststepdetectorinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MagneticFieldInfo_t > stmagneticfieldinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::PressureInfo_t > stpressureinfo_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::camera::Camera_t > stsubcameras_;
  ::vpdata::state::VPState_t* ststate_;
  ::vpdata::camera::Camera_t* stcamera_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class VPData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.VPData) */ {
 public:
  inline VPData() : VPData(nullptr) {}
  ~VPData() override;
  explicit constexpr VPData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPData(const VPData& from);
  VPData(VPData&& from) noexcept
    : VPData() {
    *this = ::std::move(from);
  }

  inline VPData& operator=(const VPData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPData& operator=(VPData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VPData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPData* internal_default_instance() {
    return reinterpret_cast<const VPData*>(
               &_VPData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VPData& a, VPData& b) {
    a.Swap(&b);
  }
  inline void Swap(VPData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPData* New() const final {
    return new VPData();
  }

  VPData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VPData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VPData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.VPData";
  }
  protected:
  explicit VPData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStVPHeaderFieldNumber = 1,
    kStVPBodyFieldNumber = 2,
  };
  // .vpdata.VPHeader stVPHeader = 1;
  bool has_stvpheader() const;
  private:
  bool _internal_has_stvpheader() const;
  public:
  void clear_stvpheader();
  const ::vpdata::VPHeader& stvpheader() const;
  PROTOBUF_MUST_USE_RESULT ::vpdata::VPHeader* release_stvpheader();
  ::vpdata::VPHeader* mutable_stvpheader();
  void set_allocated_stvpheader(::vpdata::VPHeader* stvpheader);
  private:
  const ::vpdata::VPHeader& _internal_stvpheader() const;
  ::vpdata::VPHeader* _internal_mutable_stvpheader();
  public:
  void unsafe_arena_set_allocated_stvpheader(
      ::vpdata::VPHeader* stvpheader);
  ::vpdata::VPHeader* unsafe_arena_release_stvpheader();

  // .vpdata.VPBody stVPBody = 2;
  bool has_stvpbody() const;
  private:
  bool _internal_has_stvpbody() const;
  public:
  void clear_stvpbody();
  const ::vpdata::VPBody& stvpbody() const;
  PROTOBUF_MUST_USE_RESULT ::vpdata::VPBody* release_stvpbody();
  ::vpdata::VPBody* mutable_stvpbody();
  void set_allocated_stvpbody(::vpdata::VPBody* stvpbody);
  private:
  const ::vpdata::VPBody& _internal_stvpbody() const;
  ::vpdata::VPBody* _internal_mutable_stvpbody();
  public:
  void unsafe_arena_set_allocated_stvpbody(
      ::vpdata::VPBody* stvpbody);
  ::vpdata::VPBody* unsafe_arena_release_stvpbody();

  // @@protoc_insertion_point(class_scope:vpdata.VPData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::vpdata::VPHeader* stvpheader_;
  ::vpdata::VPBody* stvpbody_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VPHeader

// string strSchemaVer = 1;
inline void VPHeader::clear_strschemaver() {
  strschemaver_.ClearToEmpty();
}
inline const std::string& VPHeader::strschemaver() const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.strSchemaVer)
  return _internal_strschemaver();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VPHeader::set_strschemaver(ArgT0&& arg0, ArgT... args) {
 
 strschemaver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.strSchemaVer)
}
inline std::string* VPHeader::mutable_strschemaver() {
  std::string* _s = _internal_mutable_strschemaver();
  // @@protoc_insertion_point(field_mutable:vpdata.VPHeader.strSchemaVer)
  return _s;
}
inline const std::string& VPHeader::_internal_strschemaver() const {
  return strschemaver_.Get();
}
inline void VPHeader::_internal_set_strschemaver(const std::string& value) {
  
  strschemaver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VPHeader::_internal_mutable_strschemaver() {
  
  return strschemaver_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VPHeader::release_strschemaver() {
  // @@protoc_insertion_point(field_release:vpdata.VPHeader.strSchemaVer)
  return strschemaver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VPHeader::set_allocated_strschemaver(std::string* strschemaver) {
  if (strschemaver != nullptr) {
    
  } else {
    
  }
  strschemaver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strschemaver,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPHeader.strSchemaVer)
}

// string strDeviceName = 2;
inline void VPHeader::clear_strdevicename() {
  strdevicename_.ClearToEmpty();
}
inline const std::string& VPHeader::strdevicename() const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.strDeviceName)
  return _internal_strdevicename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VPHeader::set_strdevicename(ArgT0&& arg0, ArgT... args) {
 
 strdevicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.strDeviceName)
}
inline std::string* VPHeader::mutable_strdevicename() {
  std::string* _s = _internal_mutable_strdevicename();
  // @@protoc_insertion_point(field_mutable:vpdata.VPHeader.strDeviceName)
  return _s;
}
inline const std::string& VPHeader::_internal_strdevicename() const {
  return strdevicename_.Get();
}
inline void VPHeader::_internal_set_strdevicename(const std::string& value) {
  
  strdevicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VPHeader::_internal_mutable_strdevicename() {
  
  return strdevicename_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VPHeader::release_strdevicename() {
  // @@protoc_insertion_point(field_release:vpdata.VPHeader.strDeviceName)
  return strdevicename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VPHeader::set_allocated_strdevicename(std::string* strdevicename) {
  if (strdevicename != nullptr) {
    
  } else {
    
  }
  strdevicename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strdevicename,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPHeader.strDeviceName)
}

// string strOSInfo = 3;
inline void VPHeader::clear_strosinfo() {
  strosinfo_.ClearToEmpty();
}
inline const std::string& VPHeader::strosinfo() const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.strOSInfo)
  return _internal_strosinfo();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VPHeader::set_strosinfo(ArgT0&& arg0, ArgT... args) {
 
 strosinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.strOSInfo)
}
inline std::string* VPHeader::mutable_strosinfo() {
  std::string* _s = _internal_mutable_strosinfo();
  // @@protoc_insertion_point(field_mutable:vpdata.VPHeader.strOSInfo)
  return _s;
}
inline const std::string& VPHeader::_internal_strosinfo() const {
  return strosinfo_.Get();
}
inline void VPHeader::_internal_set_strosinfo(const std::string& value) {
  
  strosinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VPHeader::_internal_mutable_strosinfo() {
  
  return strosinfo_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VPHeader::release_strosinfo() {
  // @@protoc_insertion_point(field_release:vpdata.VPHeader.strOSInfo)
  return strosinfo_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VPHeader::set_allocated_strosinfo(std::string* strosinfo) {
  if (strosinfo != nullptr) {
    
  } else {
    
  }
  strosinfo_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strosinfo,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPHeader.strOSInfo)
}

// repeated int32 ars32TelcoPCI = 4;
inline int VPHeader::_internal_ars32telcopci_size() const {
  return ars32telcopci_.size();
}
inline int VPHeader::ars32telcopci_size() const {
  return _internal_ars32telcopci_size();
}
inline void VPHeader::clear_ars32telcopci() {
  ars32telcopci_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VPHeader::_internal_ars32telcopci(int index) const {
  return ars32telcopci_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VPHeader::ars32telcopci(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.ars32TelcoPCI)
  return _internal_ars32telcopci(index);
}
inline void VPHeader::set_ars32telcopci(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ars32telcopci_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.ars32TelcoPCI)
}
inline void VPHeader::_internal_add_ars32telcopci(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ars32telcopci_.Add(value);
}
inline void VPHeader::add_ars32telcopci(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ars32telcopci(value);
  // @@protoc_insertion_point(field_add:vpdata.VPHeader.ars32TelcoPCI)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VPHeader::_internal_ars32telcopci() const {
  return ars32telcopci_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VPHeader::ars32telcopci() const {
  // @@protoc_insertion_point(field_list:vpdata.VPHeader.ars32TelcoPCI)
  return _internal_ars32telcopci();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VPHeader::_internal_mutable_ars32telcopci() {
  return &ars32telcopci_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VPHeader::mutable_ars32telcopci() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPHeader.ars32TelcoPCI)
  return _internal_mutable_ars32telcopci();
}

// int32 s32TelcoRSSI = 5;
inline void VPHeader::clear_s32telcorssi() {
  s32telcorssi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VPHeader::_internal_s32telcorssi() const {
  return s32telcorssi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VPHeader::s32telcorssi() const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.s32TelcoRSSI)
  return _internal_s32telcorssi();
}
inline void VPHeader::_internal_set_s32telcorssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  s32telcorssi_ = value;
}
inline void VPHeader::set_s32telcorssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_s32telcorssi(value);
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.s32TelcoRSSI)
}

// uint64 u64TSSend = 6;
inline void VPHeader::clear_u64tssend() {
  u64tssend_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VPHeader::_internal_u64tssend() const {
  return u64tssend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VPHeader::u64tssend() const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.u64TSSend)
  return _internal_u64tssend();
}
inline void VPHeader::_internal_set_u64tssend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tssend_ = value;
}
inline void VPHeader::set_u64tssend(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tssend(value);
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.u64TSSend)
}

// repeated double arf64LastLoc = 7;
inline int VPHeader::_internal_arf64lastloc_size() const {
  return arf64lastloc_.size();
}
inline int VPHeader::arf64lastloc_size() const {
  return _internal_arf64lastloc_size();
}
inline void VPHeader::clear_arf64lastloc() {
  arf64lastloc_.Clear();
}
inline double VPHeader::_internal_arf64lastloc(int index) const {
  return arf64lastloc_.Get(index);
}
inline double VPHeader::arf64lastloc(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.arf64LastLoc)
  return _internal_arf64lastloc(index);
}
inline void VPHeader::set_arf64lastloc(int index, double value) {
  arf64lastloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.arf64LastLoc)
}
inline void VPHeader::_internal_add_arf64lastloc(double value) {
  arf64lastloc_.Add(value);
}
inline void VPHeader::add_arf64lastloc(double value) {
  _internal_add_arf64lastloc(value);
  // @@protoc_insertion_point(field_add:vpdata.VPHeader.arf64LastLoc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VPHeader::_internal_arf64lastloc() const {
  return arf64lastloc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VPHeader::arf64lastloc() const {
  // @@protoc_insertion_point(field_list:vpdata.VPHeader.arf64LastLoc)
  return _internal_arf64lastloc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VPHeader::_internal_mutable_arf64lastloc() {
  return &arf64lastloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VPHeader::mutable_arf64lastloc() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPHeader.arf64LastLoc)
  return _internal_mutable_arf64lastloc();
}

// repeated float arf32Extrinsic = 8;
inline int VPHeader::_internal_arf32extrinsic_size() const {
  return arf32extrinsic_.size();
}
inline int VPHeader::arf32extrinsic_size() const {
  return _internal_arf32extrinsic_size();
}
inline void VPHeader::clear_arf32extrinsic() {
  arf32extrinsic_.Clear();
}
inline float VPHeader::_internal_arf32extrinsic(int index) const {
  return arf32extrinsic_.Get(index);
}
inline float VPHeader::arf32extrinsic(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.arf32Extrinsic)
  return _internal_arf32extrinsic(index);
}
inline void VPHeader::set_arf32extrinsic(int index, float value) {
  arf32extrinsic_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.arf32Extrinsic)
}
inline void VPHeader::_internal_add_arf32extrinsic(float value) {
  arf32extrinsic_.Add(value);
}
inline void VPHeader::add_arf32extrinsic(float value) {
  _internal_add_arf32extrinsic(value);
  // @@protoc_insertion_point(field_add:vpdata.VPHeader.arf32Extrinsic)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPHeader::_internal_arf32extrinsic() const {
  return arf32extrinsic_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VPHeader::arf32extrinsic() const {
  // @@protoc_insertion_point(field_list:vpdata.VPHeader.arf32Extrinsic)
  return _internal_arf32extrinsic();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPHeader::_internal_mutable_arf32extrinsic() {
  return &arf32extrinsic_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VPHeader::mutable_arf32extrinsic() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPHeader.arf32Extrinsic)
  return _internal_mutable_arf32extrinsic();
}

// string strTargetEnv = 9;
inline void VPHeader::clear_strtargetenv() {
  strtargetenv_.ClearToEmpty();
}
inline const std::string& VPHeader::strtargetenv() const {
  // @@protoc_insertion_point(field_get:vpdata.VPHeader.strTargetEnv)
  return _internal_strtargetenv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VPHeader::set_strtargetenv(ArgT0&& arg0, ArgT... args) {
 
 strtargetenv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vpdata.VPHeader.strTargetEnv)
}
inline std::string* VPHeader::mutable_strtargetenv() {
  std::string* _s = _internal_mutable_strtargetenv();
  // @@protoc_insertion_point(field_mutable:vpdata.VPHeader.strTargetEnv)
  return _s;
}
inline const std::string& VPHeader::_internal_strtargetenv() const {
  return strtargetenv_.Get();
}
inline void VPHeader::_internal_set_strtargetenv(const std::string& value) {
  
  strtargetenv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VPHeader::_internal_mutable_strtargetenv() {
  
  return strtargetenv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VPHeader::release_strtargetenv() {
  // @@protoc_insertion_point(field_release:vpdata.VPHeader.strTargetEnv)
  return strtargetenv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VPHeader::set_allocated_strtargetenv(std::string* strtargetenv) {
  if (strtargetenv != nullptr) {
    
  } else {
    
  }
  strtargetenv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strtargetenv,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPHeader.strTargetEnv)
}

// -------------------------------------------------------------------

// VPBody

// .vpdata.state.VPState_t stState = 1;
inline bool VPBody::_internal_has_ststate() const {
  return this != internal_default_instance() && ststate_ != nullptr;
}
inline bool VPBody::has_ststate() const {
  return _internal_has_ststate();
}
inline const ::vpdata::state::VPState_t& VPBody::_internal_ststate() const {
  const ::vpdata::state::VPState_t* p = ststate_;
  return p != nullptr ? *p : reinterpret_cast<const ::vpdata::state::VPState_t&>(
      ::vpdata::state::_VPState_t_default_instance_);
}
inline const ::vpdata::state::VPState_t& VPBody::ststate() const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stState)
  return _internal_ststate();
}
inline void VPBody::unsafe_arena_set_allocated_ststate(
    ::vpdata::state::VPState_t* ststate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ststate_);
  }
  ststate_ = ststate;
  if (ststate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpdata.VPBody.stState)
}
inline ::vpdata::state::VPState_t* VPBody::release_ststate() {
  
  ::vpdata::state::VPState_t* temp = ststate_;
  ststate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vpdata::state::VPState_t* VPBody::unsafe_arena_release_ststate() {
  // @@protoc_insertion_point(field_release:vpdata.VPBody.stState)
  
  ::vpdata::state::VPState_t* temp = ststate_;
  ststate_ = nullptr;
  return temp;
}
inline ::vpdata::state::VPState_t* VPBody::_internal_mutable_ststate() {
  
  if (ststate_ == nullptr) {
    auto* p = CreateMaybeMessage<::vpdata::state::VPState_t>(GetArenaForAllocation());
    ststate_ = p;
  }
  return ststate_;
}
inline ::vpdata::state::VPState_t* VPBody::mutable_ststate() {
  ::vpdata::state::VPState_t* _msg = _internal_mutable_ststate();
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stState)
  return _msg;
}
inline void VPBody::set_allocated_ststate(::vpdata::state::VPState_t* ststate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ststate_);
  }
  if (ststate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ststate));
    if (message_arena != submessage_arena) {
      ststate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ststate, submessage_arena);
    }
    
  } else {
    
  }
  ststate_ = ststate;
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPBody.stState)
}

// .vpdata.camera.Camera_t stCamera = 2;
inline bool VPBody::_internal_has_stcamera() const {
  return this != internal_default_instance() && stcamera_ != nullptr;
}
inline bool VPBody::has_stcamera() const {
  return _internal_has_stcamera();
}
inline const ::vpdata::camera::Camera_t& VPBody::_internal_stcamera() const {
  const ::vpdata::camera::Camera_t* p = stcamera_;
  return p != nullptr ? *p : reinterpret_cast<const ::vpdata::camera::Camera_t&>(
      ::vpdata::camera::_Camera_t_default_instance_);
}
inline const ::vpdata::camera::Camera_t& VPBody::stcamera() const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stCamera)
  return _internal_stcamera();
}
inline void VPBody::unsafe_arena_set_allocated_stcamera(
    ::vpdata::camera::Camera_t* stcamera) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stcamera_);
  }
  stcamera_ = stcamera;
  if (stcamera) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpdata.VPBody.stCamera)
}
inline ::vpdata::camera::Camera_t* VPBody::release_stcamera() {
  
  ::vpdata::camera::Camera_t* temp = stcamera_;
  stcamera_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vpdata::camera::Camera_t* VPBody::unsafe_arena_release_stcamera() {
  // @@protoc_insertion_point(field_release:vpdata.VPBody.stCamera)
  
  ::vpdata::camera::Camera_t* temp = stcamera_;
  stcamera_ = nullptr;
  return temp;
}
inline ::vpdata::camera::Camera_t* VPBody::_internal_mutable_stcamera() {
  
  if (stcamera_ == nullptr) {
    auto* p = CreateMaybeMessage<::vpdata::camera::Camera_t>(GetArenaForAllocation());
    stcamera_ = p;
  }
  return stcamera_;
}
inline ::vpdata::camera::Camera_t* VPBody::mutable_stcamera() {
  ::vpdata::camera::Camera_t* _msg = _internal_mutable_stcamera();
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stCamera)
  return _msg;
}
inline void VPBody::set_allocated_stcamera(::vpdata::camera::Camera_t* stcamera) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stcamera_);
  }
  if (stcamera) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stcamera));
    if (message_arena != submessage_arena) {
      stcamera = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stcamera, submessage_arena);
    }
    
  } else {
    
  }
  stcamera_ = stcamera;
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPBody.stCamera)
}

// repeated .vpdata.sensors.GPS_t stGPS = 3;
inline int VPBody::_internal_stgps_size() const {
  return stgps_.size();
}
inline int VPBody::stgps_size() const {
  return _internal_stgps_size();
}
inline ::vpdata::sensors::GPS_t* VPBody::mutable_stgps(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stGPS)
  return stgps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPS_t >*
VPBody::mutable_stgps() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stGPS)
  return &stgps_;
}
inline const ::vpdata::sensors::GPS_t& VPBody::_internal_stgps(int index) const {
  return stgps_.Get(index);
}
inline const ::vpdata::sensors::GPS_t& VPBody::stgps(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stGPS)
  return _internal_stgps(index);
}
inline ::vpdata::sensors::GPS_t* VPBody::_internal_add_stgps() {
  return stgps_.Add();
}
inline ::vpdata::sensors::GPS_t* VPBody::add_stgps() {
  ::vpdata::sensors::GPS_t* _add = _internal_add_stgps();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stGPS)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPS_t >&
VPBody::stgps() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stGPS)
  return stgps_;
}

// repeated .vpdata.sensors.IMU_t stIMU = 4;
inline int VPBody::_internal_stimu_size() const {
  return stimu_.size();
}
inline int VPBody::stimu_size() const {
  return _internal_stimu_size();
}
inline ::vpdata::sensors::IMU_t* VPBody::mutable_stimu(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stIMU)
  return stimu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::IMU_t >*
VPBody::mutable_stimu() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stIMU)
  return &stimu_;
}
inline const ::vpdata::sensors::IMU_t& VPBody::_internal_stimu(int index) const {
  return stimu_.Get(index);
}
inline const ::vpdata::sensors::IMU_t& VPBody::stimu(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stIMU)
  return _internal_stimu(index);
}
inline ::vpdata::sensors::IMU_t* VPBody::_internal_add_stimu() {
  return stimu_.Add();
}
inline ::vpdata::sensors::IMU_t* VPBody::add_stimu() {
  ::vpdata::sensors::IMU_t* _add = _internal_add_stimu();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stIMU)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::IMU_t >&
VPBody::stimu() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stIMU)
  return stimu_;
}

// repeated .vpdata.sensors.Barometer_t stBaroMeter = 5;
inline int VPBody::_internal_stbarometer_size() const {
  return stbarometer_.size();
}
inline int VPBody::stbarometer_size() const {
  return _internal_stbarometer_size();
}
inline ::vpdata::sensors::Barometer_t* VPBody::mutable_stbarometer(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stBaroMeter)
  return stbarometer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::Barometer_t >*
VPBody::mutable_stbarometer() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stBaroMeter)
  return &stbarometer_;
}
inline const ::vpdata::sensors::Barometer_t& VPBody::_internal_stbarometer(int index) const {
  return stbarometer_.Get(index);
}
inline const ::vpdata::sensors::Barometer_t& VPBody::stbarometer(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stBaroMeter)
  return _internal_stbarometer(index);
}
inline ::vpdata::sensors::Barometer_t* VPBody::_internal_add_stbarometer() {
  return stbarometer_.Add();
}
inline ::vpdata::sensors::Barometer_t* VPBody::add_stbarometer() {
  ::vpdata::sensors::Barometer_t* _add = _internal_add_stbarometer();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stBaroMeter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::Barometer_t >&
VPBody::stbarometer() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stBaroMeter)
  return stbarometer_;
}

// repeated .vpdata.sensors.MCompass_t stMagneticCompass = 6;
inline int VPBody::_internal_stmagneticcompass_size() const {
  return stmagneticcompass_.size();
}
inline int VPBody::stmagneticcompass_size() const {
  return _internal_stmagneticcompass_size();
}
inline ::vpdata::sensors::MCompass_t* VPBody::mutable_stmagneticcompass(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stMagneticCompass)
  return stmagneticcompass_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MCompass_t >*
VPBody::mutable_stmagneticcompass() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stMagneticCompass)
  return &stmagneticcompass_;
}
inline const ::vpdata::sensors::MCompass_t& VPBody::_internal_stmagneticcompass(int index) const {
  return stmagneticcompass_.Get(index);
}
inline const ::vpdata::sensors::MCompass_t& VPBody::stmagneticcompass(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stMagneticCompass)
  return _internal_stmagneticcompass(index);
}
inline ::vpdata::sensors::MCompass_t* VPBody::_internal_add_stmagneticcompass() {
  return stmagneticcompass_.Add();
}
inline ::vpdata::sensors::MCompass_t* VPBody::add_stmagneticcompass() {
  ::vpdata::sensors::MCompass_t* _add = _internal_add_stmagneticcompass();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stMagneticCompass)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MCompass_t >&
VPBody::stmagneticcompass() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stMagneticCompass)
  return stmagneticcompass_;
}

// repeated .vpdata.sensors.GPSLocationInfo_t stGPSLocationInfo = 7;
inline int VPBody::_internal_stgpslocationinfo_size() const {
  return stgpslocationinfo_.size();
}
inline int VPBody::stgpslocationinfo_size() const {
  return _internal_stgpslocationinfo_size();
}
inline ::vpdata::sensors::GPSLocationInfo_t* VPBody::mutable_stgpslocationinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stGPSLocationInfo)
  return stgpslocationinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPSLocationInfo_t >*
VPBody::mutable_stgpslocationinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stGPSLocationInfo)
  return &stgpslocationinfo_;
}
inline const ::vpdata::sensors::GPSLocationInfo_t& VPBody::_internal_stgpslocationinfo(int index) const {
  return stgpslocationinfo_.Get(index);
}
inline const ::vpdata::sensors::GPSLocationInfo_t& VPBody::stgpslocationinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stGPSLocationInfo)
  return _internal_stgpslocationinfo(index);
}
inline ::vpdata::sensors::GPSLocationInfo_t* VPBody::_internal_add_stgpslocationinfo() {
  return stgpslocationinfo_.Add();
}
inline ::vpdata::sensors::GPSLocationInfo_t* VPBody::add_stgpslocationinfo() {
  ::vpdata::sensors::GPSLocationInfo_t* _add = _internal_add_stgpslocationinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stGPSLocationInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GPSLocationInfo_t >&
VPBody::stgpslocationinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stGPSLocationInfo)
  return stgpslocationinfo_;
}

// repeated .vpdata.sensors.AccelerometerInfo_t stAccelerometerInfo = 8;
inline int VPBody::_internal_staccelerometerinfo_size() const {
  return staccelerometerinfo_.size();
}
inline int VPBody::staccelerometerinfo_size() const {
  return _internal_staccelerometerinfo_size();
}
inline ::vpdata::sensors::AccelerometerInfo_t* VPBody::mutable_staccelerometerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stAccelerometerInfo)
  return staccelerometerinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::AccelerometerInfo_t >*
VPBody::mutable_staccelerometerinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stAccelerometerInfo)
  return &staccelerometerinfo_;
}
inline const ::vpdata::sensors::AccelerometerInfo_t& VPBody::_internal_staccelerometerinfo(int index) const {
  return staccelerometerinfo_.Get(index);
}
inline const ::vpdata::sensors::AccelerometerInfo_t& VPBody::staccelerometerinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stAccelerometerInfo)
  return _internal_staccelerometerinfo(index);
}
inline ::vpdata::sensors::AccelerometerInfo_t* VPBody::_internal_add_staccelerometerinfo() {
  return staccelerometerinfo_.Add();
}
inline ::vpdata::sensors::AccelerometerInfo_t* VPBody::add_staccelerometerinfo() {
  ::vpdata::sensors::AccelerometerInfo_t* _add = _internal_add_staccelerometerinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stAccelerometerInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::AccelerometerInfo_t >&
VPBody::staccelerometerinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stAccelerometerInfo)
  return staccelerometerinfo_;
}

// repeated .vpdata.sensors.GyroscopeInfo_t stGyroscopeInfo = 9;
inline int VPBody::_internal_stgyroscopeinfo_size() const {
  return stgyroscopeinfo_.size();
}
inline int VPBody::stgyroscopeinfo_size() const {
  return _internal_stgyroscopeinfo_size();
}
inline ::vpdata::sensors::GyroscopeInfo_t* VPBody::mutable_stgyroscopeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stGyroscopeInfo)
  return stgyroscopeinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GyroscopeInfo_t >*
VPBody::mutable_stgyroscopeinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stGyroscopeInfo)
  return &stgyroscopeinfo_;
}
inline const ::vpdata::sensors::GyroscopeInfo_t& VPBody::_internal_stgyroscopeinfo(int index) const {
  return stgyroscopeinfo_.Get(index);
}
inline const ::vpdata::sensors::GyroscopeInfo_t& VPBody::stgyroscopeinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stGyroscopeInfo)
  return _internal_stgyroscopeinfo(index);
}
inline ::vpdata::sensors::GyroscopeInfo_t* VPBody::_internal_add_stgyroscopeinfo() {
  return stgyroscopeinfo_.Add();
}
inline ::vpdata::sensors::GyroscopeInfo_t* VPBody::add_stgyroscopeinfo() {
  ::vpdata::sensors::GyroscopeInfo_t* _add = _internal_add_stgyroscopeinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stGyroscopeInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::GyroscopeInfo_t >&
VPBody::stgyroscopeinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stGyroscopeInfo)
  return stgyroscopeinfo_;
}

// repeated .vpdata.sensors.RotationVectorInfo_t stRotationVectorInfo = 10;
inline int VPBody::_internal_strotationvectorinfo_size() const {
  return strotationvectorinfo_.size();
}
inline int VPBody::strotationvectorinfo_size() const {
  return _internal_strotationvectorinfo_size();
}
inline ::vpdata::sensors::RotationVectorInfo_t* VPBody::mutable_strotationvectorinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stRotationVectorInfo)
  return strotationvectorinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::RotationVectorInfo_t >*
VPBody::mutable_strotationvectorinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stRotationVectorInfo)
  return &strotationvectorinfo_;
}
inline const ::vpdata::sensors::RotationVectorInfo_t& VPBody::_internal_strotationvectorinfo(int index) const {
  return strotationvectorinfo_.Get(index);
}
inline const ::vpdata::sensors::RotationVectorInfo_t& VPBody::strotationvectorinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stRotationVectorInfo)
  return _internal_strotationvectorinfo(index);
}
inline ::vpdata::sensors::RotationVectorInfo_t* VPBody::_internal_add_strotationvectorinfo() {
  return strotationvectorinfo_.Add();
}
inline ::vpdata::sensors::RotationVectorInfo_t* VPBody::add_strotationvectorinfo() {
  ::vpdata::sensors::RotationVectorInfo_t* _add = _internal_add_strotationvectorinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stRotationVectorInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::RotationVectorInfo_t >&
VPBody::strotationvectorinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stRotationVectorInfo)
  return strotationvectorinfo_;
}

// repeated .vpdata.sensors.StepCounterInfo_t stStepCounterInfo = 11;
inline int VPBody::_internal_ststepcounterinfo_size() const {
  return ststepcounterinfo_.size();
}
inline int VPBody::ststepcounterinfo_size() const {
  return _internal_ststepcounterinfo_size();
}
inline ::vpdata::sensors::StepCounterInfo_t* VPBody::mutable_ststepcounterinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stStepCounterInfo)
  return ststepcounterinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepCounterInfo_t >*
VPBody::mutable_ststepcounterinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stStepCounterInfo)
  return &ststepcounterinfo_;
}
inline const ::vpdata::sensors::StepCounterInfo_t& VPBody::_internal_ststepcounterinfo(int index) const {
  return ststepcounterinfo_.Get(index);
}
inline const ::vpdata::sensors::StepCounterInfo_t& VPBody::ststepcounterinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stStepCounterInfo)
  return _internal_ststepcounterinfo(index);
}
inline ::vpdata::sensors::StepCounterInfo_t* VPBody::_internal_add_ststepcounterinfo() {
  return ststepcounterinfo_.Add();
}
inline ::vpdata::sensors::StepCounterInfo_t* VPBody::add_ststepcounterinfo() {
  ::vpdata::sensors::StepCounterInfo_t* _add = _internal_add_ststepcounterinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stStepCounterInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepCounterInfo_t >&
VPBody::ststepcounterinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stStepCounterInfo)
  return ststepcounterinfo_;
}

// repeated .vpdata.sensors.StepDetectorInfo_t stStepDetectorInfo = 12;
inline int VPBody::_internal_ststepdetectorinfo_size() const {
  return ststepdetectorinfo_.size();
}
inline int VPBody::ststepdetectorinfo_size() const {
  return _internal_ststepdetectorinfo_size();
}
inline ::vpdata::sensors::StepDetectorInfo_t* VPBody::mutable_ststepdetectorinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stStepDetectorInfo)
  return ststepdetectorinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepDetectorInfo_t >*
VPBody::mutable_ststepdetectorinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stStepDetectorInfo)
  return &ststepdetectorinfo_;
}
inline const ::vpdata::sensors::StepDetectorInfo_t& VPBody::_internal_ststepdetectorinfo(int index) const {
  return ststepdetectorinfo_.Get(index);
}
inline const ::vpdata::sensors::StepDetectorInfo_t& VPBody::ststepdetectorinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stStepDetectorInfo)
  return _internal_ststepdetectorinfo(index);
}
inline ::vpdata::sensors::StepDetectorInfo_t* VPBody::_internal_add_ststepdetectorinfo() {
  return ststepdetectorinfo_.Add();
}
inline ::vpdata::sensors::StepDetectorInfo_t* VPBody::add_ststepdetectorinfo() {
  ::vpdata::sensors::StepDetectorInfo_t* _add = _internal_add_ststepdetectorinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stStepDetectorInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::StepDetectorInfo_t >&
VPBody::ststepdetectorinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stStepDetectorInfo)
  return ststepdetectorinfo_;
}

// repeated .vpdata.sensors.MagneticFieldInfo_t stMagneticFieldInfo = 13;
inline int VPBody::_internal_stmagneticfieldinfo_size() const {
  return stmagneticfieldinfo_.size();
}
inline int VPBody::stmagneticfieldinfo_size() const {
  return _internal_stmagneticfieldinfo_size();
}
inline ::vpdata::sensors::MagneticFieldInfo_t* VPBody::mutable_stmagneticfieldinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stMagneticFieldInfo)
  return stmagneticfieldinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MagneticFieldInfo_t >*
VPBody::mutable_stmagneticfieldinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stMagneticFieldInfo)
  return &stmagneticfieldinfo_;
}
inline const ::vpdata::sensors::MagneticFieldInfo_t& VPBody::_internal_stmagneticfieldinfo(int index) const {
  return stmagneticfieldinfo_.Get(index);
}
inline const ::vpdata::sensors::MagneticFieldInfo_t& VPBody::stmagneticfieldinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stMagneticFieldInfo)
  return _internal_stmagneticfieldinfo(index);
}
inline ::vpdata::sensors::MagneticFieldInfo_t* VPBody::_internal_add_stmagneticfieldinfo() {
  return stmagneticfieldinfo_.Add();
}
inline ::vpdata::sensors::MagneticFieldInfo_t* VPBody::add_stmagneticfieldinfo() {
  ::vpdata::sensors::MagneticFieldInfo_t* _add = _internal_add_stmagneticfieldinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stMagneticFieldInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::MagneticFieldInfo_t >&
VPBody::stmagneticfieldinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stMagneticFieldInfo)
  return stmagneticfieldinfo_;
}

// repeated .vpdata.sensors.PressureInfo_t stPressureInfo = 14;
inline int VPBody::_internal_stpressureinfo_size() const {
  return stpressureinfo_.size();
}
inline int VPBody::stpressureinfo_size() const {
  return _internal_stpressureinfo_size();
}
inline ::vpdata::sensors::PressureInfo_t* VPBody::mutable_stpressureinfo(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stPressureInfo)
  return stpressureinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::PressureInfo_t >*
VPBody::mutable_stpressureinfo() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stPressureInfo)
  return &stpressureinfo_;
}
inline const ::vpdata::sensors::PressureInfo_t& VPBody::_internal_stpressureinfo(int index) const {
  return stpressureinfo_.Get(index);
}
inline const ::vpdata::sensors::PressureInfo_t& VPBody::stpressureinfo(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stPressureInfo)
  return _internal_stpressureinfo(index);
}
inline ::vpdata::sensors::PressureInfo_t* VPBody::_internal_add_stpressureinfo() {
  return stpressureinfo_.Add();
}
inline ::vpdata::sensors::PressureInfo_t* VPBody::add_stpressureinfo() {
  ::vpdata::sensors::PressureInfo_t* _add = _internal_add_stpressureinfo();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stPressureInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::sensors::PressureInfo_t >&
VPBody::stpressureinfo() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stPressureInfo)
  return stpressureinfo_;
}

// repeated .vpdata.camera.Camera_t stSubCameras = 21;
inline int VPBody::_internal_stsubcameras_size() const {
  return stsubcameras_.size();
}
inline int VPBody::stsubcameras_size() const {
  return _internal_stsubcameras_size();
}
inline ::vpdata::camera::Camera_t* VPBody::mutable_stsubcameras(int index) {
  // @@protoc_insertion_point(field_mutable:vpdata.VPBody.stSubCameras)
  return stsubcameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::camera::Camera_t >*
VPBody::mutable_stsubcameras() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.VPBody.stSubCameras)
  return &stsubcameras_;
}
inline const ::vpdata::camera::Camera_t& VPBody::_internal_stsubcameras(int index) const {
  return stsubcameras_.Get(index);
}
inline const ::vpdata::camera::Camera_t& VPBody::stsubcameras(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.VPBody.stSubCameras)
  return _internal_stsubcameras(index);
}
inline ::vpdata::camera::Camera_t* VPBody::_internal_add_stsubcameras() {
  return stsubcameras_.Add();
}
inline ::vpdata::camera::Camera_t* VPBody::add_stsubcameras() {
  ::vpdata::camera::Camera_t* _add = _internal_add_stsubcameras();
  // @@protoc_insertion_point(field_add:vpdata.VPBody.stSubCameras)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::vpdata::camera::Camera_t >&
VPBody::stsubcameras() const {
  // @@protoc_insertion_point(field_list:vpdata.VPBody.stSubCameras)
  return stsubcameras_;
}

// -------------------------------------------------------------------

// VPData

// .vpdata.VPHeader stVPHeader = 1;
inline bool VPData::_internal_has_stvpheader() const {
  return this != internal_default_instance() && stvpheader_ != nullptr;
}
inline bool VPData::has_stvpheader() const {
  return _internal_has_stvpheader();
}
inline void VPData::clear_stvpheader() {
  if (GetArenaForAllocation() == nullptr && stvpheader_ != nullptr) {
    delete stvpheader_;
  }
  stvpheader_ = nullptr;
}
inline const ::vpdata::VPHeader& VPData::_internal_stvpheader() const {
  const ::vpdata::VPHeader* p = stvpheader_;
  return p != nullptr ? *p : reinterpret_cast<const ::vpdata::VPHeader&>(
      ::vpdata::_VPHeader_default_instance_);
}
inline const ::vpdata::VPHeader& VPData::stvpheader() const {
  // @@protoc_insertion_point(field_get:vpdata.VPData.stVPHeader)
  return _internal_stvpheader();
}
inline void VPData::unsafe_arena_set_allocated_stvpheader(
    ::vpdata::VPHeader* stvpheader) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpheader_);
  }
  stvpheader_ = stvpheader;
  if (stvpheader) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpdata.VPData.stVPHeader)
}
inline ::vpdata::VPHeader* VPData::release_stvpheader() {
  
  ::vpdata::VPHeader* temp = stvpheader_;
  stvpheader_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vpdata::VPHeader* VPData::unsafe_arena_release_stvpheader() {
  // @@protoc_insertion_point(field_release:vpdata.VPData.stVPHeader)
  
  ::vpdata::VPHeader* temp = stvpheader_;
  stvpheader_ = nullptr;
  return temp;
}
inline ::vpdata::VPHeader* VPData::_internal_mutable_stvpheader() {
  
  if (stvpheader_ == nullptr) {
    auto* p = CreateMaybeMessage<::vpdata::VPHeader>(GetArenaForAllocation());
    stvpheader_ = p;
  }
  return stvpheader_;
}
inline ::vpdata::VPHeader* VPData::mutable_stvpheader() {
  ::vpdata::VPHeader* _msg = _internal_mutable_stvpheader();
  // @@protoc_insertion_point(field_mutable:vpdata.VPData.stVPHeader)
  return _msg;
}
inline void VPData::set_allocated_stvpheader(::vpdata::VPHeader* stvpheader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stvpheader_;
  }
  if (stvpheader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vpdata::VPHeader>::GetOwningArena(stvpheader);
    if (message_arena != submessage_arena) {
      stvpheader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpheader, submessage_arena);
    }
    
  } else {
    
  }
  stvpheader_ = stvpheader;
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPData.stVPHeader)
}

// .vpdata.VPBody stVPBody = 2;
inline bool VPData::_internal_has_stvpbody() const {
  return this != internal_default_instance() && stvpbody_ != nullptr;
}
inline bool VPData::has_stvpbody() const {
  return _internal_has_stvpbody();
}
inline void VPData::clear_stvpbody() {
  if (GetArenaForAllocation() == nullptr && stvpbody_ != nullptr) {
    delete stvpbody_;
  }
  stvpbody_ = nullptr;
}
inline const ::vpdata::VPBody& VPData::_internal_stvpbody() const {
  const ::vpdata::VPBody* p = stvpbody_;
  return p != nullptr ? *p : reinterpret_cast<const ::vpdata::VPBody&>(
      ::vpdata::_VPBody_default_instance_);
}
inline const ::vpdata::VPBody& VPData::stvpbody() const {
  // @@protoc_insertion_point(field_get:vpdata.VPData.stVPBody)
  return _internal_stvpbody();
}
inline void VPData::unsafe_arena_set_allocated_stvpbody(
    ::vpdata::VPBody* stvpbody) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpbody_);
  }
  stvpbody_ = stvpbody;
  if (stvpbody) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpdata.VPData.stVPBody)
}
inline ::vpdata::VPBody* VPData::release_stvpbody() {
  
  ::vpdata::VPBody* temp = stvpbody_;
  stvpbody_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::vpdata::VPBody* VPData::unsafe_arena_release_stvpbody() {
  // @@protoc_insertion_point(field_release:vpdata.VPData.stVPBody)
  
  ::vpdata::VPBody* temp = stvpbody_;
  stvpbody_ = nullptr;
  return temp;
}
inline ::vpdata::VPBody* VPData::_internal_mutable_stvpbody() {
  
  if (stvpbody_ == nullptr) {
    auto* p = CreateMaybeMessage<::vpdata::VPBody>(GetArenaForAllocation());
    stvpbody_ = p;
  }
  return stvpbody_;
}
inline ::vpdata::VPBody* VPData::mutable_stvpbody() {
  ::vpdata::VPBody* _msg = _internal_mutable_stvpbody();
  // @@protoc_insertion_point(field_mutable:vpdata.VPData.stVPBody)
  return _msg;
}
inline void VPData::set_allocated_stvpbody(::vpdata::VPBody* stvpbody) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete stvpbody_;
  }
  if (stvpbody) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::vpdata::VPBody>::GetOwningArena(stvpbody);
    if (message_arena != submessage_arena) {
      stvpbody = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpbody, submessage_arena);
    }
    
  } else {
    
  }
  stvpbody_ = stvpbody;
  // @@protoc_insertion_point(field_set_allocated:vpdata.VPData.stVPBody)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vpdata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vp_5fmsg_2eproto
