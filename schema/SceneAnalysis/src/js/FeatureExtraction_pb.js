// source: FeatureExtraction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var placevector_pb = require('./placevector_pb.js');
goog.object.extend(proto, placevector_pb);
var localfeature_pb = require('./localfeature_pb.js');
goog.object.extend(proto, localfeature_pb);
var vp_msg_pb = require('./vp_msg_pb.js');
goog.object.extend(proto, vp_msg_pb);
var vp_camera_pb = require('./vp_camera_pb.js');
goog.object.extend(proto, vp_camera_pb);
goog.exportSymbol('proto.vlam.sa.FeatureExtractionIn', null, global);
goog.exportSymbol('proto.vlam.sa.FeatureExtractionOut', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlam.sa.FeatureExtractionIn = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vlam.sa.FeatureExtractionIn, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlam.sa.FeatureExtractionIn.displayName = 'proto.vlam.sa.FeatureExtractionIn';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vlam.sa.FeatureExtractionOut = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vlam.sa.FeatureExtractionOut, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vlam.sa.FeatureExtractionOut.displayName = 'proto.vlam.sa.FeatureExtractionOut';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlam.sa.FeatureExtractionIn.prototype.toObject = function(opt_includeInstance) {
  return proto.vlam.sa.FeatureExtractionIn.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlam.sa.FeatureExtractionIn} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlam.sa.FeatureExtractionIn.toObject = function(includeInstance, msg) {
  var f, obj = {
    stvpsensordata: (f = msg.getStvpsensordata()) && vp_msg_pb.VPData.toObject(includeInstance, f),
    stenhancedimage: (f = msg.getStenhancedimage()) && vp_camera_pb.Camera_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlam.sa.FeatureExtractionIn}
 */
proto.vlam.sa.FeatureExtractionIn.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlam.sa.FeatureExtractionIn;
  return proto.vlam.sa.FeatureExtractionIn.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlam.sa.FeatureExtractionIn} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlam.sa.FeatureExtractionIn}
 */
proto.vlam.sa.FeatureExtractionIn.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new vp_msg_pb.VPData;
      reader.readMessage(value,vp_msg_pb.VPData.deserializeBinaryFromReader);
      msg.setStvpsensordata(value);
      break;
    case 2:
      var value = new vp_camera_pb.Camera_t;
      reader.readMessage(value,vp_camera_pb.Camera_t.deserializeBinaryFromReader);
      msg.setStenhancedimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlam.sa.FeatureExtractionIn.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlam.sa.FeatureExtractionIn.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlam.sa.FeatureExtractionIn} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlam.sa.FeatureExtractionIn.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStvpsensordata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      vp_msg_pb.VPData.serializeBinaryToWriter
    );
  }
  f = message.getStenhancedimage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vp_camera_pb.Camera_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional vpdata.VPData stVPSensorData = 1;
 * @return {?proto.vpdata.VPData}
 */
proto.vlam.sa.FeatureExtractionIn.prototype.getStvpsensordata = function() {
  return /** @type{?proto.vpdata.VPData} */ (
    jspb.Message.getWrapperField(this, vp_msg_pb.VPData, 1));
};


/**
 * @param {?proto.vpdata.VPData|undefined} value
 * @return {!proto.vlam.sa.FeatureExtractionIn} returns this
*/
proto.vlam.sa.FeatureExtractionIn.prototype.setStvpsensordata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlam.sa.FeatureExtractionIn} returns this
 */
proto.vlam.sa.FeatureExtractionIn.prototype.clearStvpsensordata = function() {
  return this.setStvpsensordata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlam.sa.FeatureExtractionIn.prototype.hasStvpsensordata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional vpdata.camera.Camera_t stEnhancedImage = 2;
 * @return {?proto.vpdata.camera.Camera_t}
 */
proto.vlam.sa.FeatureExtractionIn.prototype.getStenhancedimage = function() {
  return /** @type{?proto.vpdata.camera.Camera_t} */ (
    jspb.Message.getWrapperField(this, vp_camera_pb.Camera_t, 2));
};


/**
 * @param {?proto.vpdata.camera.Camera_t|undefined} value
 * @return {!proto.vlam.sa.FeatureExtractionIn} returns this
*/
proto.vlam.sa.FeatureExtractionIn.prototype.setStenhancedimage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlam.sa.FeatureExtractionIn} returns this
 */
proto.vlam.sa.FeatureExtractionIn.prototype.clearStenhancedimage = function() {
  return this.setStenhancedimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlam.sa.FeatureExtractionIn.prototype.hasStenhancedimage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vlam.sa.FeatureExtractionOut.prototype.toObject = function(opt_includeInstance) {
  return proto.vlam.sa.FeatureExtractionOut.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vlam.sa.FeatureExtractionOut} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlam.sa.FeatureExtractionOut.toObject = function(includeInstance, msg) {
  var f, obj = {
    arstplacevectorlist: (f = msg.getArstplacevectorlist()) && placevector_pb.PlaceVectorSet.toObject(includeInstance, f),
    arstlocalfeaturelist: (f = msg.getArstlocalfeaturelist()) && localfeature_pb.LocalFeatureSet.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vlam.sa.FeatureExtractionOut}
 */
proto.vlam.sa.FeatureExtractionOut.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vlam.sa.FeatureExtractionOut;
  return proto.vlam.sa.FeatureExtractionOut.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vlam.sa.FeatureExtractionOut} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vlam.sa.FeatureExtractionOut}
 */
proto.vlam.sa.FeatureExtractionOut.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 11:
      var value = new placevector_pb.PlaceVectorSet;
      reader.readMessage(value,placevector_pb.PlaceVectorSet.deserializeBinaryFromReader);
      msg.setArstplacevectorlist(value);
      break;
    case 12:
      var value = new localfeature_pb.LocalFeatureSet;
      reader.readMessage(value,localfeature_pb.LocalFeatureSet.deserializeBinaryFromReader);
      msg.setArstlocalfeaturelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vlam.sa.FeatureExtractionOut.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vlam.sa.FeatureExtractionOut.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vlam.sa.FeatureExtractionOut} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vlam.sa.FeatureExtractionOut.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArstplacevectorlist();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      placevector_pb.PlaceVectorSet.serializeBinaryToWriter
    );
  }
  f = message.getArstlocalfeaturelist();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      localfeature_pb.LocalFeatureSet.serializeBinaryToWriter
    );
  }
};


/**
 * optional VgeoDB.PlaceVectorSet arstPlaceVectorList = 11;
 * @return {?proto.VgeoDB.PlaceVectorSet}
 */
proto.vlam.sa.FeatureExtractionOut.prototype.getArstplacevectorlist = function() {
  return /** @type{?proto.VgeoDB.PlaceVectorSet} */ (
    jspb.Message.getWrapperField(this, placevector_pb.PlaceVectorSet, 11));
};


/**
 * @param {?proto.VgeoDB.PlaceVectorSet|undefined} value
 * @return {!proto.vlam.sa.FeatureExtractionOut} returns this
*/
proto.vlam.sa.FeatureExtractionOut.prototype.setArstplacevectorlist = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlam.sa.FeatureExtractionOut} returns this
 */
proto.vlam.sa.FeatureExtractionOut.prototype.clearArstplacevectorlist = function() {
  return this.setArstplacevectorlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlam.sa.FeatureExtractionOut.prototype.hasArstplacevectorlist = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional VgeoDB.LocalFeatureSet arstLocalFeatureList = 12;
 * @return {?proto.VgeoDB.LocalFeatureSet}
 */
proto.vlam.sa.FeatureExtractionOut.prototype.getArstlocalfeaturelist = function() {
  return /** @type{?proto.VgeoDB.LocalFeatureSet} */ (
    jspb.Message.getWrapperField(this, localfeature_pb.LocalFeatureSet, 12));
};


/**
 * @param {?proto.VgeoDB.LocalFeatureSet|undefined} value
 * @return {!proto.vlam.sa.FeatureExtractionOut} returns this
*/
proto.vlam.sa.FeatureExtractionOut.prototype.setArstlocalfeaturelist = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.vlam.sa.FeatureExtractionOut} returns this
 */
proto.vlam.sa.FeatureExtractionOut.prototype.clearArstlocalfeaturelist = function() {
  return this.setArstlocalfeaturelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.vlam.sa.FeatureExtractionOut.prototype.hasArstlocalfeaturelist = function() {
  return jspb.Message.getField(this, 12) != null;
};


goog.object.extend(exports, proto.vlam.sa);
