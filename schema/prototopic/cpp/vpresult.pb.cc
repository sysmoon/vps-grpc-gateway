// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpresult.proto

#include "vpresult.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vpresult {
constexpr VPService_t::VPService_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stvpresult_(nullptr)
  , stvpresulttrackingmode_(nullptr){}
struct VPService_tDefaultTypeInternal {
  constexpr VPService_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPService_tDefaultTypeInternal() {}
  union {
    VPService_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPService_tDefaultTypeInternal _VPService_t_default_instance_;
}  // namespace vpresult
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vpresult_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vpresult_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vpresult_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vpresult_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpresult::VPService_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpresult::VPService_t, stvpresult_),
  PROTOBUF_FIELD_OFFSET(::vpresult::VPService_t, stvpresulttrackingmode_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vpresult::VPService_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpresult::_VPService_t_default_instance_),
};

const char descriptor_table_protodef_vpresult_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016vpresult.proto\022\010vpresult\032\036google/proto"
  "buf/wrappers.proto\032\017prdb_meta.proto\032\021vp_"
  "tracking.proto\032\014vp_msg.proto\"u\n\013VPServic"
  "e_t\022%\n\nstVPResult\030\001 \001(\0132\021.prdb.meta.Meta"
  "_t\022\?\n\026stVPResultTrackingMode\030\002 \001(\0132\037.vp."
  "tracking.MetaTrackingMode_t2\217\001\n\017Location"
  "Service\022:\n\017getLocationPose\022\016.vpdata.VPDa"
  "ta\032\025.vpresult.VPService_t\"\000\022@\n\017getLocati"
  "onInfo\022\016.vpdata.VPData\032\033.google.protobuf"
  ".FloatValue\"\000B\014\n\nvp.serviceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vpresult_2eproto_deps[4] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_prdb_5fmeta_2eproto,
  &::descriptor_table_vp_5fmsg_2eproto,
  &::descriptor_table_vp_5ftracking_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vpresult_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vpresult_2eproto = {
  false, false, 395, descriptor_table_protodef_vpresult_2eproto, "vpresult.proto", 
  &descriptor_table_vpresult_2eproto_once, descriptor_table_vpresult_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_vpresult_2eproto::offsets,
  file_level_metadata_vpresult_2eproto, file_level_enum_descriptors_vpresult_2eproto, file_level_service_descriptors_vpresult_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vpresult_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vpresult_2eproto);
  return descriptor_table_vpresult_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vpresult_2eproto(&descriptor_table_vpresult_2eproto);
namespace vpresult {

// ===================================================================

class VPService_t::_Internal {
 public:
  static const ::prdb::meta::Meta_t& stvpresult(const VPService_t* msg);
  static const ::vp::tracking::MetaTrackingMode_t& stvpresulttrackingmode(const VPService_t* msg);
};

const ::prdb::meta::Meta_t&
VPService_t::_Internal::stvpresult(const VPService_t* msg) {
  return *msg->stvpresult_;
}
const ::vp::tracking::MetaTrackingMode_t&
VPService_t::_Internal::stvpresulttrackingmode(const VPService_t* msg) {
  return *msg->stvpresulttrackingmode_;
}
void VPService_t::clear_stvpresult() {
  if (GetArena() == nullptr && stvpresult_ != nullptr) {
    delete stvpresult_;
  }
  stvpresult_ = nullptr;
}
void VPService_t::clear_stvpresulttrackingmode() {
  if (GetArena() == nullptr && stvpresulttrackingmode_ != nullptr) {
    delete stvpresulttrackingmode_;
  }
  stvpresulttrackingmode_ = nullptr;
}
VPService_t::VPService_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpresult.VPService_t)
}
VPService_t::VPService_t(const VPService_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stvpresult()) {
    stvpresult_ = new ::prdb::meta::Meta_t(*from.stvpresult_);
  } else {
    stvpresult_ = nullptr;
  }
  if (from._internal_has_stvpresulttrackingmode()) {
    stvpresulttrackingmode_ = new ::vp::tracking::MetaTrackingMode_t(*from.stvpresulttrackingmode_);
  } else {
    stvpresulttrackingmode_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vpresult.VPService_t)
}

void VPService_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stvpresult_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stvpresulttrackingmode_) -
    reinterpret_cast<char*>(&stvpresult_)) + sizeof(stvpresulttrackingmode_));
}

VPService_t::~VPService_t() {
  // @@protoc_insertion_point(destructor:vpresult.VPService_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPService_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stvpresult_;
  if (this != internal_default_instance()) delete stvpresulttrackingmode_;
}

void VPService_t::ArenaDtor(void* object) {
  VPService_t* _this = reinterpret_cast< VPService_t* >(object);
  (void)_this;
}
void VPService_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPService_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPService_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpresult.VPService_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stvpresult_ != nullptr) {
    delete stvpresult_;
  }
  stvpresult_ = nullptr;
  if (GetArena() == nullptr && stvpresulttrackingmode_ != nullptr) {
    delete stvpresulttrackingmode_;
  }
  stvpresulttrackingmode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPService_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .prdb.meta.Meta_t stVPResult = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpresult(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.MetaTrackingMode_t stVPResultTrackingMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpresulttrackingmode(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPService_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpresult.VPService_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prdb.meta.Meta_t stVPResult = 1;
  if (this->has_stvpresult()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stvpresult(this), target, stream);
  }

  // .vp.tracking.MetaTrackingMode_t stVPResultTrackingMode = 2;
  if (this->has_stvpresulttrackingmode()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stvpresulttrackingmode(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpresult.VPService_t)
  return target;
}

size_t VPService_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpresult.VPService_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prdb.meta.Meta_t stVPResult = 1;
  if (this->has_stvpresult()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpresult_);
  }

  // .vp.tracking.MetaTrackingMode_t stVPResultTrackingMode = 2;
  if (this->has_stvpresulttrackingmode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpresulttrackingmode_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPService_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpresult.VPService_t)
  GOOGLE_DCHECK_NE(&from, this);
  const VPService_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPService_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpresult.VPService_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpresult.VPService_t)
    MergeFrom(*source);
  }
}

void VPService_t::MergeFrom(const VPService_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpresult.VPService_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stvpresult()) {
    _internal_mutable_stvpresult()->::prdb::meta::Meta_t::MergeFrom(from._internal_stvpresult());
  }
  if (from.has_stvpresulttrackingmode()) {
    _internal_mutable_stvpresulttrackingmode()->::vp::tracking::MetaTrackingMode_t::MergeFrom(from._internal_stvpresulttrackingmode());
  }
}

void VPService_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpresult.VPService_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPService_t::CopyFrom(const VPService_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpresult.VPService_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPService_t::IsInitialized() const {
  return true;
}

void VPService_t::InternalSwap(VPService_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPService_t, stvpresulttrackingmode_)
      + sizeof(VPService_t::stvpresulttrackingmode_)
      - PROTOBUF_FIELD_OFFSET(VPService_t, stvpresult_)>(
          reinterpret_cast<char*>(&stvpresult_),
          reinterpret_cast<char*>(&other->stvpresult_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPService_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vpresult
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vpresult::VPService_t* Arena::CreateMaybeMessage< ::vpresult::VPService_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpresult::VPService_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
