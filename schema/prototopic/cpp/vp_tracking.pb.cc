// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_tracking.proto

#include "vp_tracking.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vp {
namespace tracking {
constexpr Pose_t::Pose_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f64x_(0)
  , f64y_(0)
  , f64z_(0)
  , f32qx_(0)
  , f32qy_(0)
  , f32qz_(0)
  , f32qw_(0){}
struct Pose_tDefaultTypeInternal {
  constexpr Pose_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Pose_tDefaultTypeInternal() {}
  union {
    Pose_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Pose_tDefaultTypeInternal _Pose_t_default_instance_;
constexpr PoseInfo_t::PoseInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stpose_(nullptr)
  , u64timestamp_(PROTOBUF_ULONGLONG(0))
  , bposeflag_(false)
  , f32poseconfidence_(0){}
struct PoseInfo_tDefaultTypeInternal {
  constexpr PoseInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PoseInfo_tDefaultTypeInternal() {}
  union {
    PoseInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PoseInfo_tDefaultTypeInternal _PoseInfo_t_default_instance_;
constexpr FramePoseInfo_t::FramePoseInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stlastdrposeinfoarray_()
  , stlastegposeinfoarray_()
  , stvpsposeinfo_(nullptr){}
struct FramePoseInfo_tDefaultTypeInternal {
  constexpr FramePoseInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FramePoseInfo_tDefaultTypeInternal() {}
  union {
    FramePoseInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FramePoseInfo_tDefaultTypeInternal _FramePoseInfo_t_default_instance_;
constexpr KalmanFilter_t::KalmanFilter_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : f64state_()
  , _f64state_cached_byte_size_()
  , f32covariance_()
  , _f32covariance_cached_byte_size_(){}
struct KalmanFilter_tDefaultTypeInternal {
  constexpr KalmanFilter_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KalmanFilter_tDefaultTypeInternal() {}
  union {
    KalmanFilter_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KalmanFilter_tDefaultTypeInternal _KalmanFilter_t_default_instance_;
constexpr Param_t::Param_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : strname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , s32val_(0)
  , f32val_(0)
  , f64val_(0)
  , bval_(false){}
struct Param_tDefaultTypeInternal {
  constexpr Param_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Param_tDefaultTypeInternal() {}
  union {
    Param_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Param_tDefaultTypeInternal _Param_t_default_instance_;
constexpr MetaTrackingMode_t::MetaTrackingMode_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stvpsposeinfo_(nullptr)
  , stcorrectingtr_(nullptr)
  , stlinearvelocitykf_(nullptr)
  , stvpsposekf_(nullptr)
  , evpstatustrackingmode_(0)
{}
struct MetaTrackingMode_tDefaultTypeInternal {
  constexpr MetaTrackingMode_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MetaTrackingMode_tDefaultTypeInternal() {}
  union {
    MetaTrackingMode_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MetaTrackingMode_tDefaultTypeInternal _MetaTrackingMode_t_default_instance_;
}  // namespace tracking
}  // namespace vp
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vp_5ftracking_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vp_5ftracking_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vp_5ftracking_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vp_5ftracking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f64x_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f64y_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f64z_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f32qx_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f32qy_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f32qz_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Pose_t, f32qw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::PoseInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::PoseInfo_t, u64timestamp_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::PoseInfo_t, bposeflag_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::PoseInfo_t, f32poseconfidence_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::PoseInfo_t, stpose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::FramePoseInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::FramePoseInfo_t, stvpsposeinfo_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::FramePoseInfo_t, stlastdrposeinfoarray_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::FramePoseInfo_t, stlastegposeinfoarray_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::KalmanFilter_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::KalmanFilter_t, f64state_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::KalmanFilter_t, f32covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, strname_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, s32val_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, f32val_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, f64val_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, strval_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::Param_t, bval_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::MetaTrackingMode_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vp::tracking::MetaTrackingMode_t, evpstatustrackingmode_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::MetaTrackingMode_t, stvpsposeinfo_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::MetaTrackingMode_t, stcorrectingtr_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::MetaTrackingMode_t, stlinearvelocitykf_),
  PROTOBUF_FIELD_OFFSET(::vp::tracking::MetaTrackingMode_t, stvpsposekf_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vp::tracking::Pose_t)},
  { 12, -1, sizeof(::vp::tracking::PoseInfo_t)},
  { 21, -1, sizeof(::vp::tracking::FramePoseInfo_t)},
  { 29, -1, sizeof(::vp::tracking::KalmanFilter_t)},
  { 36, -1, sizeof(::vp::tracking::Param_t)},
  { 47, -1, sizeof(::vp::tracking::MetaTrackingMode_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vp::tracking::_Pose_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vp::tracking::_PoseInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vp::tracking::_FramePoseInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vp::tracking::_KalmanFilter_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vp::tracking::_Param_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vp::tracking::_MetaTrackingMode_t_default_instance_),
};

const char descriptor_table_protodef_vp_5ftracking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021vp_tracking.proto\022\013vp.tracking\"n\n\006Pose"
  "_t\022\014\n\004f64X\030\001 \001(\001\022\014\n\004f64Y\030\002 \001(\001\022\014\n\004f64Z\030\003"
  " \001(\001\022\r\n\005f32qX\030\004 \001(\002\022\r\n\005f32qY\030\005 \001(\002\022\r\n\005f3"
  "2qZ\030\006 \001(\002\022\r\n\005f32qW\030\007 \001(\002\"u\n\nPoseInfo_t\022\024"
  "\n\014u64Timestamp\030\001 \001(\004\022\021\n\tbPoseFlag\030\002 \001(\010\022"
  "\031\n\021f32PoseConfidence\030\003 \001(\002\022#\n\006stPose\030\004 \001"
  "(\0132\023.vp.tracking.Pose_t\"\261\001\n\017FramePoseInf"
  "o_t\022.\n\rstVPSPoseInfo\030\001 \001(\0132\027.vp.tracking"
  ".PoseInfo_t\0226\n\025stLastDRPoseInfoArray\030\002 \003"
  "(\0132\027.vp.tracking.PoseInfo_t\0226\n\025stLastEGP"
  "oseInfoArray\030\003 \003(\0132\027.vp.tracking.PoseInf"
  "o_t\"9\n\016KalmanFilter_t\022\020\n\010f64State\030\001 \003(\001\022"
  "\025\n\rf32Covariance\030\002 \003(\002\"h\n\007Param_t\022\017\n\007str"
  "Name\030\001 \001(\t\022\016\n\006s32Val\030\002 \001(\005\022\016\n\006f32Val\030\003 \001"
  "(\002\022\016\n\006f64Val\030\004 \001(\001\022\016\n\006strVal\030\005 \001(\t\022\014\n\004bV"
  "al\030\006 \001(\010\"\236\002\n\022MetaTrackingMode_t\022@\n\025eVPSt"
  "atusTrackingMode\030\001 \001(\0162!.vp.tracking.VPS"
  "tatusTrackingMode\022.\n\rstVPSPoseInfo\030\002 \001(\013"
  "2\027.vp.tracking.PoseInfo_t\022+\n\016stCorrectin"
  "gTr\030\003 \001(\0132\023.vp.tracking.Pose_t\0227\n\022stLine"
  "arVelocityKF\030\004 \001(\0132\033.vp.tracking.KalmanF"
  "ilter_t\0220\n\013stVPSPoseKF\030\005 \001(\0132\033.vp.tracki"
  "ng.KalmanFilter_t*p\n\024VPStatusTrackingMod"
  "e\022\t\n\005eLOST\020\000\022\020\n\014eINITIALIZED\020\001\022\016\n\neLOCAL"
  "IZED\020\002\022\014\n\010eTRACKED\020\003\022\014\n\010eCOSTING\020\004\022\017\n\013eT"
  "RANSITION\020\005B\025\n\023msgmanager.protobufb\006prot"
  "o3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vp_5ftracking_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5ftracking_2eproto = {
  false, false, 1042, descriptor_table_protodef_vp_5ftracking_2eproto, "vp_tracking.proto", 
  &descriptor_table_vp_5ftracking_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_vp_5ftracking_2eproto::offsets,
  file_level_metadata_vp_5ftracking_2eproto, file_level_enum_descriptors_vp_5ftracking_2eproto, file_level_service_descriptors_vp_5ftracking_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vp_5ftracking_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5ftracking_2eproto);
  return descriptor_table_vp_5ftracking_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vp_5ftracking_2eproto(&descriptor_table_vp_5ftracking_2eproto);
namespace vp {
namespace tracking {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPStatusTrackingMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5ftracking_2eproto);
  return file_level_enum_descriptors_vp_5ftracking_2eproto[0];
}
bool VPStatusTrackingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Pose_t::_Internal {
 public:
};

Pose_t::Pose_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vp.tracking.Pose_t)
}
Pose_t::Pose_t(const Pose_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&f64x_, &from.f64x_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32qw_) -
    reinterpret_cast<char*>(&f64x_)) + sizeof(f32qw_));
  // @@protoc_insertion_point(copy_constructor:vp.tracking.Pose_t)
}

void Pose_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&f64x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32qw_) -
    reinterpret_cast<char*>(&f64x_)) + sizeof(f32qw_));
}

Pose_t::~Pose_t() {
  // @@protoc_insertion_point(destructor:vp.tracking.Pose_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pose_t::ArenaDtor(void* object) {
  Pose_t* _this = reinterpret_cast< Pose_t* >(object);
  (void)_this;
}
void Pose_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pose_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vp.tracking.Pose_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&f64x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32qw_) -
      reinterpret_cast<char*>(&f64x_)) + sizeof(f32qw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double f64X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          f64x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          f64y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          f64z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float f32qX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          f32qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          f32qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qW = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          f32qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vp.tracking.Pose_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double f64X = 1;
  if (!(this->f64x() <= 0 && this->f64x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_f64x(), target);
  }

  // double f64Y = 2;
  if (!(this->f64y() <= 0 && this->f64y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f64y(), target);
  }

  // double f64Z = 3;
  if (!(this->f64z() <= 0 && this->f64z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_f64z(), target);
  }

  // float f32qX = 4;
  if (!(this->f32qx() <= 0 && this->f32qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32qx(), target);
  }

  // float f32qY = 5;
  if (!(this->f32qy() <= 0 && this->f32qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f32qy(), target);
  }

  // float f32qZ = 6;
  if (!(this->f32qz() <= 0 && this->f32qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f32qz(), target);
  }

  // float f32qW = 7;
  if (!(this->f32qw() <= 0 && this->f32qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_f32qw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vp.tracking.Pose_t)
  return target;
}

size_t Pose_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vp.tracking.Pose_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double f64X = 1;
  if (!(this->f64x() <= 0 && this->f64x() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Y = 2;
  if (!(this->f64y() <= 0 && this->f64y() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Z = 3;
  if (!(this->f64z() <= 0 && this->f64z() >= 0)) {
    total_size += 1 + 8;
  }

  // float f32qX = 4;
  if (!(this->f32qx() <= 0 && this->f32qx() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qY = 5;
  if (!(this->f32qy() <= 0 && this->f32qy() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qZ = 6;
  if (!(this->f32qz() <= 0 && this->f32qz() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qW = 7;
  if (!(this->f32qw() <= 0 && this->f32qw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vp.tracking.Pose_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vp.tracking.Pose_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vp.tracking.Pose_t)
    MergeFrom(*source);
  }
}

void Pose_t::MergeFrom(const Pose_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vp.tracking.Pose_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.f64x() <= 0 && from.f64x() >= 0)) {
    _internal_set_f64x(from._internal_f64x());
  }
  if (!(from.f64y() <= 0 && from.f64y() >= 0)) {
    _internal_set_f64y(from._internal_f64y());
  }
  if (!(from.f64z() <= 0 && from.f64z() >= 0)) {
    _internal_set_f64z(from._internal_f64z());
  }
  if (!(from.f32qx() <= 0 && from.f32qx() >= 0)) {
    _internal_set_f32qx(from._internal_f32qx());
  }
  if (!(from.f32qy() <= 0 && from.f32qy() >= 0)) {
    _internal_set_f32qy(from._internal_f32qy());
  }
  if (!(from.f32qz() <= 0 && from.f32qz() >= 0)) {
    _internal_set_f32qz(from._internal_f32qz());
  }
  if (!(from.f32qw() <= 0 && from.f32qw() >= 0)) {
    _internal_set_f32qw(from._internal_f32qw());
  }
}

void Pose_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vp.tracking.Pose_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose_t::CopyFrom(const Pose_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vp.tracking.Pose_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose_t::IsInitialized() const {
  return true;
}

void Pose_t::InternalSwap(Pose_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose_t, f32qw_)
      + sizeof(Pose_t::f32qw_)
      - PROTOBUF_FIELD_OFFSET(Pose_t, f64x_)>(
          reinterpret_cast<char*>(&f64x_),
          reinterpret_cast<char*>(&other->f64x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PoseInfo_t::_Internal {
 public:
  static const ::vp::tracking::Pose_t& stpose(const PoseInfo_t* msg);
};

const ::vp::tracking::Pose_t&
PoseInfo_t::_Internal::stpose(const PoseInfo_t* msg) {
  return *msg->stpose_;
}
PoseInfo_t::PoseInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vp.tracking.PoseInfo_t)
}
PoseInfo_t::PoseInfo_t(const PoseInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stpose()) {
    stpose_ = new ::vp::tracking::Pose_t(*from.stpose_);
  } else {
    stpose_ = nullptr;
  }
  ::memcpy(&u64timestamp_, &from.u64timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32poseconfidence_) -
    reinterpret_cast<char*>(&u64timestamp_)) + sizeof(f32poseconfidence_));
  // @@protoc_insertion_point(copy_constructor:vp.tracking.PoseInfo_t)
}

void PoseInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stpose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32poseconfidence_) -
    reinterpret_cast<char*>(&stpose_)) + sizeof(f32poseconfidence_));
}

PoseInfo_t::~PoseInfo_t() {
  // @@protoc_insertion_point(destructor:vp.tracking.PoseInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stpose_;
}

void PoseInfo_t::ArenaDtor(void* object) {
  PoseInfo_t* _this = reinterpret_cast< PoseInfo_t* >(object);
  (void)_this;
}
void PoseInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vp.tracking.PoseInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stpose_ != nullptr) {
    delete stpose_;
  }
  stpose_ = nullptr;
  ::memset(&u64timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32poseconfidence_) -
      reinterpret_cast<char*>(&u64timestamp_)) + sizeof(f32poseconfidence_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64Timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bPoseFlag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bposeflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32PoseConfidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32poseconfidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.Pose_t stPose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stpose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vp.tracking.PoseInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64Timestamp = 1;
  if (this->u64timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64timestamp(), target);
  }

  // bool bPoseFlag = 2;
  if (this->bposeflag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_bposeflag(), target);
  }

  // float f32PoseConfidence = 3;
  if (!(this->f32poseconfidence() <= 0 && this->f32poseconfidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32poseconfidence(), target);
  }

  // .vp.tracking.Pose_t stPose = 4;
  if (this->has_stpose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stpose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vp.tracking.PoseInfo_t)
  return target;
}

size_t PoseInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vp.tracking.PoseInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vp.tracking.Pose_t stPose = 4;
  if (this->has_stpose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stpose_);
  }

  // uint64 u64Timestamp = 1;
  if (this->u64timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64timestamp());
  }

  // bool bPoseFlag = 2;
  if (this->bposeflag() != 0) {
    total_size += 1 + 1;
  }

  // float f32PoseConfidence = 3;
  if (!(this->f32poseconfidence() <= 0 && this->f32poseconfidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vp.tracking.PoseInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vp.tracking.PoseInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vp.tracking.PoseInfo_t)
    MergeFrom(*source);
  }
}

void PoseInfo_t::MergeFrom(const PoseInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vp.tracking.PoseInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stpose()) {
    _internal_mutable_stpose()->::vp::tracking::Pose_t::MergeFrom(from._internal_stpose());
  }
  if (from.u64timestamp() != 0) {
    _internal_set_u64timestamp(from._internal_u64timestamp());
  }
  if (from.bposeflag() != 0) {
    _internal_set_bposeflag(from._internal_bposeflag());
  }
  if (!(from.f32poseconfidence() <= 0 && from.f32poseconfidence() >= 0)) {
    _internal_set_f32poseconfidence(from._internal_f32poseconfidence());
  }
}

void PoseInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vp.tracking.PoseInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseInfo_t::CopyFrom(const PoseInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vp.tracking.PoseInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseInfo_t::IsInitialized() const {
  return true;
}

void PoseInfo_t::InternalSwap(PoseInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseInfo_t, f32poseconfidence_)
      + sizeof(PoseInfo_t::f32poseconfidence_)
      - PROTOBUF_FIELD_OFFSET(PoseInfo_t, stpose_)>(
          reinterpret_cast<char*>(&stpose_),
          reinterpret_cast<char*>(&other->stpose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FramePoseInfo_t::_Internal {
 public:
  static const ::vp::tracking::PoseInfo_t& stvpsposeinfo(const FramePoseInfo_t* msg);
};

const ::vp::tracking::PoseInfo_t&
FramePoseInfo_t::_Internal::stvpsposeinfo(const FramePoseInfo_t* msg) {
  return *msg->stvpsposeinfo_;
}
FramePoseInfo_t::FramePoseInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stlastdrposeinfoarray_(arena),
  stlastegposeinfoarray_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vp.tracking.FramePoseInfo_t)
}
FramePoseInfo_t::FramePoseInfo_t(const FramePoseInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stlastdrposeinfoarray_(from.stlastdrposeinfoarray_),
      stlastegposeinfoarray_(from.stlastegposeinfoarray_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stvpsposeinfo()) {
    stvpsposeinfo_ = new ::vp::tracking::PoseInfo_t(*from.stvpsposeinfo_);
  } else {
    stvpsposeinfo_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vp.tracking.FramePoseInfo_t)
}

void FramePoseInfo_t::SharedCtor() {
stvpsposeinfo_ = nullptr;
}

FramePoseInfo_t::~FramePoseInfo_t() {
  // @@protoc_insertion_point(destructor:vp.tracking.FramePoseInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FramePoseInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stvpsposeinfo_;
}

void FramePoseInfo_t::ArenaDtor(void* object) {
  FramePoseInfo_t* _this = reinterpret_cast< FramePoseInfo_t* >(object);
  (void)_this;
}
void FramePoseInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FramePoseInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FramePoseInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vp.tracking.FramePoseInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stlastdrposeinfoarray_.Clear();
  stlastegposeinfoarray_.Clear();
  if (GetArena() == nullptr && stvpsposeinfo_ != nullptr) {
    delete stvpsposeinfo_;
  }
  stvpsposeinfo_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FramePoseInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vp.tracking.PoseInfo_t stVPSPoseInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpsposeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vp.tracking.PoseInfo_t stLastDRPoseInfoArray = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stlastdrposeinfoarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vp.tracking.PoseInfo_t stLastEGPoseInfoArray = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stlastegposeinfoarray(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FramePoseInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vp.tracking.FramePoseInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vp.tracking.PoseInfo_t stVPSPoseInfo = 1;
  if (this->has_stvpsposeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stvpsposeinfo(this), target, stream);
  }

  // repeated .vp.tracking.PoseInfo_t stLastDRPoseInfoArray = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stlastdrposeinfoarray_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stlastdrposeinfoarray(i), target, stream);
  }

  // repeated .vp.tracking.PoseInfo_t stLastEGPoseInfoArray = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stlastegposeinfoarray_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stlastegposeinfoarray(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vp.tracking.FramePoseInfo_t)
  return target;
}

size_t FramePoseInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vp.tracking.FramePoseInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vp.tracking.PoseInfo_t stLastDRPoseInfoArray = 2;
  total_size += 1UL * this->_internal_stlastdrposeinfoarray_size();
  for (const auto& msg : this->stlastdrposeinfoarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vp.tracking.PoseInfo_t stLastEGPoseInfoArray = 3;
  total_size += 1UL * this->_internal_stlastegposeinfoarray_size();
  for (const auto& msg : this->stlastegposeinfoarray_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vp.tracking.PoseInfo_t stVPSPoseInfo = 1;
  if (this->has_stvpsposeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpsposeinfo_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FramePoseInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vp.tracking.FramePoseInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const FramePoseInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FramePoseInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vp.tracking.FramePoseInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vp.tracking.FramePoseInfo_t)
    MergeFrom(*source);
  }
}

void FramePoseInfo_t::MergeFrom(const FramePoseInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vp.tracking.FramePoseInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stlastdrposeinfoarray_.MergeFrom(from.stlastdrposeinfoarray_);
  stlastegposeinfoarray_.MergeFrom(from.stlastegposeinfoarray_);
  if (from.has_stvpsposeinfo()) {
    _internal_mutable_stvpsposeinfo()->::vp::tracking::PoseInfo_t::MergeFrom(from._internal_stvpsposeinfo());
  }
}

void FramePoseInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vp.tracking.FramePoseInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FramePoseInfo_t::CopyFrom(const FramePoseInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vp.tracking.FramePoseInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FramePoseInfo_t::IsInitialized() const {
  return true;
}

void FramePoseInfo_t::InternalSwap(FramePoseInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stlastdrposeinfoarray_.InternalSwap(&other->stlastdrposeinfoarray_);
  stlastegposeinfoarray_.InternalSwap(&other->stlastegposeinfoarray_);
  swap(stvpsposeinfo_, other->stvpsposeinfo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FramePoseInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KalmanFilter_t::_Internal {
 public:
};

KalmanFilter_t::KalmanFilter_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  f64state_(arena),
  f32covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vp.tracking.KalmanFilter_t)
}
KalmanFilter_t::KalmanFilter_t(const KalmanFilter_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      f64state_(from.f64state_),
      f32covariance_(from.f32covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:vp.tracking.KalmanFilter_t)
}

void KalmanFilter_t::SharedCtor() {
}

KalmanFilter_t::~KalmanFilter_t() {
  // @@protoc_insertion_point(destructor:vp.tracking.KalmanFilter_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KalmanFilter_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KalmanFilter_t::ArenaDtor(void* object) {
  KalmanFilter_t* _this = reinterpret_cast< KalmanFilter_t* >(object);
  (void)_this;
}
void KalmanFilter_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KalmanFilter_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KalmanFilter_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vp.tracking.KalmanFilter_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  f64state_.Clear();
  f32covariance_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KalmanFilter_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double f64State = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_f64state(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_f64state(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float f32Covariance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_f32covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_f32covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KalmanFilter_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vp.tracking.KalmanFilter_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double f64State = 1;
  if (this->_internal_f64state_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_f64state(), target);
  }

  // repeated float f32Covariance = 2;
  if (this->_internal_f32covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_f32covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vp.tracking.KalmanFilter_t)
  return target;
}

size_t KalmanFilter_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vp.tracking.KalmanFilter_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double f64State = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f64state_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f64state_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float f32Covariance = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f32covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _f32covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KalmanFilter_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vp.tracking.KalmanFilter_t)
  GOOGLE_DCHECK_NE(&from, this);
  const KalmanFilter_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KalmanFilter_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vp.tracking.KalmanFilter_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vp.tracking.KalmanFilter_t)
    MergeFrom(*source);
  }
}

void KalmanFilter_t::MergeFrom(const KalmanFilter_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vp.tracking.KalmanFilter_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  f64state_.MergeFrom(from.f64state_);
  f32covariance_.MergeFrom(from.f32covariance_);
}

void KalmanFilter_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vp.tracking.KalmanFilter_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KalmanFilter_t::CopyFrom(const KalmanFilter_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vp.tracking.KalmanFilter_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KalmanFilter_t::IsInitialized() const {
  return true;
}

void KalmanFilter_t::InternalSwap(KalmanFilter_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  f64state_.InternalSwap(&other->f64state_);
  f32covariance_.InternalSwap(&other->f32covariance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KalmanFilter_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Param_t::_Internal {
 public:
};

Param_t::Param_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vp.tracking.Param_t)
}
Param_t::Param_t(const Param_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strname().empty()) {
    strname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strname(), 
      GetArena());
  }
  strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strval().empty()) {
    strval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strval(), 
      GetArena());
  }
  ::memcpy(&s32val_, &from.s32val_,
    static_cast<size_t>(reinterpret_cast<char*>(&bval_) -
    reinterpret_cast<char*>(&s32val_)) + sizeof(bval_));
  // @@protoc_insertion_point(copy_constructor:vp.tracking.Param_t)
}

void Param_t::SharedCtor() {
strname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
strval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&s32val_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bval_) -
    reinterpret_cast<char*>(&s32val_)) + sizeof(bval_));
}

Param_t::~Param_t() {
  // @@protoc_insertion_point(destructor:vp.tracking.Param_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Param_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Param_t::ArenaDtor(void* object) {
  Param_t* _this = reinterpret_cast< Param_t* >(object);
  (void)_this;
}
void Param_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Param_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Param_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vp.tracking.Param_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strname_.ClearToEmpty();
  strval_.ClearToEmpty();
  ::memset(&s32val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bval_) -
      reinterpret_cast<char*>(&s32val_)) + sizeof(bval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Param_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string strName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vp.tracking.Param_t.strName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s32Val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          s32val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32Val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // double f64Val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          f64val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string strVal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_strval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vp.tracking.Param_t.strVal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bVal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Param_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vp.tracking.Param_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strName = 1;
  if (this->strname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vp.tracking.Param_t.strName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strname(), target);
  }

  // int32 s32Val = 2;
  if (this->s32val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_s32val(), target);
  }

  // float f32Val = 3;
  if (!(this->f32val() <= 0 && this->f32val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32val(), target);
  }

  // double f64Val = 4;
  if (!(this->f64val() <= 0 && this->f64val() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_f64val(), target);
  }

  // string strVal = 5;
  if (this->strval().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strval().data(), static_cast<int>(this->_internal_strval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vp.tracking.Param_t.strVal");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_strval(), target);
  }

  // bool bVal = 6;
  if (this->bval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_bval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vp.tracking.Param_t)
  return target;
}

size_t Param_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vp.tracking.Param_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strName = 1;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  // string strVal = 5;
  if (this->strval().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strval());
  }

  // int32 s32Val = 2;
  if (this->s32val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s32val());
  }

  // float f32Val = 3;
  if (!(this->f32val() <= 0 && this->f32val() >= 0)) {
    total_size += 1 + 4;
  }

  // double f64Val = 4;
  if (!(this->f64val() <= 0 && this->f64val() >= 0)) {
    total_size += 1 + 8;
  }

  // bool bVal = 6;
  if (this->bval() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Param_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vp.tracking.Param_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Param_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Param_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vp.tracking.Param_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vp.tracking.Param_t)
    MergeFrom(*source);
  }
}

void Param_t::MergeFrom(const Param_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vp.tracking.Param_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strname().size() > 0) {
    _internal_set_strname(from._internal_strname());
  }
  if (from.strval().size() > 0) {
    _internal_set_strval(from._internal_strval());
  }
  if (from.s32val() != 0) {
    _internal_set_s32val(from._internal_s32val());
  }
  if (!(from.f32val() <= 0 && from.f32val() >= 0)) {
    _internal_set_f32val(from._internal_f32val());
  }
  if (!(from.f64val() <= 0 && from.f64val() >= 0)) {
    _internal_set_f64val(from._internal_f64val());
  }
  if (from.bval() != 0) {
    _internal_set_bval(from._internal_bval());
  }
}

void Param_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vp.tracking.Param_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param_t::CopyFrom(const Param_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vp.tracking.Param_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param_t::IsInitialized() const {
  return true;
}

void Param_t::InternalSwap(Param_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  strname_.Swap(&other->strname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strval_.Swap(&other->strval_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Param_t, bval_)
      + sizeof(Param_t::bval_)
      - PROTOBUF_FIELD_OFFSET(Param_t, s32val_)>(
          reinterpret_cast<char*>(&s32val_),
          reinterpret_cast<char*>(&other->s32val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Param_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MetaTrackingMode_t::_Internal {
 public:
  static const ::vp::tracking::PoseInfo_t& stvpsposeinfo(const MetaTrackingMode_t* msg);
  static const ::vp::tracking::Pose_t& stcorrectingtr(const MetaTrackingMode_t* msg);
  static const ::vp::tracking::KalmanFilter_t& stlinearvelocitykf(const MetaTrackingMode_t* msg);
  static const ::vp::tracking::KalmanFilter_t& stvpsposekf(const MetaTrackingMode_t* msg);
};

const ::vp::tracking::PoseInfo_t&
MetaTrackingMode_t::_Internal::stvpsposeinfo(const MetaTrackingMode_t* msg) {
  return *msg->stvpsposeinfo_;
}
const ::vp::tracking::Pose_t&
MetaTrackingMode_t::_Internal::stcorrectingtr(const MetaTrackingMode_t* msg) {
  return *msg->stcorrectingtr_;
}
const ::vp::tracking::KalmanFilter_t&
MetaTrackingMode_t::_Internal::stlinearvelocitykf(const MetaTrackingMode_t* msg) {
  return *msg->stlinearvelocitykf_;
}
const ::vp::tracking::KalmanFilter_t&
MetaTrackingMode_t::_Internal::stvpsposekf(const MetaTrackingMode_t* msg) {
  return *msg->stvpsposekf_;
}
MetaTrackingMode_t::MetaTrackingMode_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vp.tracking.MetaTrackingMode_t)
}
MetaTrackingMode_t::MetaTrackingMode_t(const MetaTrackingMode_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stvpsposeinfo()) {
    stvpsposeinfo_ = new ::vp::tracking::PoseInfo_t(*from.stvpsposeinfo_);
  } else {
    stvpsposeinfo_ = nullptr;
  }
  if (from._internal_has_stcorrectingtr()) {
    stcorrectingtr_ = new ::vp::tracking::Pose_t(*from.stcorrectingtr_);
  } else {
    stcorrectingtr_ = nullptr;
  }
  if (from._internal_has_stlinearvelocitykf()) {
    stlinearvelocitykf_ = new ::vp::tracking::KalmanFilter_t(*from.stlinearvelocitykf_);
  } else {
    stlinearvelocitykf_ = nullptr;
  }
  if (from._internal_has_stvpsposekf()) {
    stvpsposekf_ = new ::vp::tracking::KalmanFilter_t(*from.stvpsposekf_);
  } else {
    stvpsposekf_ = nullptr;
  }
  evpstatustrackingmode_ = from.evpstatustrackingmode_;
  // @@protoc_insertion_point(copy_constructor:vp.tracking.MetaTrackingMode_t)
}

void MetaTrackingMode_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stvpsposeinfo_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evpstatustrackingmode_) -
    reinterpret_cast<char*>(&stvpsposeinfo_)) + sizeof(evpstatustrackingmode_));
}

MetaTrackingMode_t::~MetaTrackingMode_t() {
  // @@protoc_insertion_point(destructor:vp.tracking.MetaTrackingMode_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetaTrackingMode_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stvpsposeinfo_;
  if (this != internal_default_instance()) delete stcorrectingtr_;
  if (this != internal_default_instance()) delete stlinearvelocitykf_;
  if (this != internal_default_instance()) delete stvpsposekf_;
}

void MetaTrackingMode_t::ArenaDtor(void* object) {
  MetaTrackingMode_t* _this = reinterpret_cast< MetaTrackingMode_t* >(object);
  (void)_this;
}
void MetaTrackingMode_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetaTrackingMode_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MetaTrackingMode_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vp.tracking.MetaTrackingMode_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stvpsposeinfo_ != nullptr) {
    delete stvpsposeinfo_;
  }
  stvpsposeinfo_ = nullptr;
  if (GetArena() == nullptr && stcorrectingtr_ != nullptr) {
    delete stcorrectingtr_;
  }
  stcorrectingtr_ = nullptr;
  if (GetArena() == nullptr && stlinearvelocitykf_ != nullptr) {
    delete stlinearvelocitykf_;
  }
  stlinearvelocitykf_ = nullptr;
  if (GetArena() == nullptr && stvpsposekf_ != nullptr) {
    delete stvpsposekf_;
  }
  stvpsposekf_ = nullptr;
  evpstatustrackingmode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetaTrackingMode_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evpstatustrackingmode(static_cast<::vp::tracking::VPStatusTrackingMode>(val));
        } else goto handle_unusual;
        continue;
      // .vp.tracking.PoseInfo_t stVPSPoseInfo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpsposeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.Pose_t stCorrectingTr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_stcorrectingtr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlinearvelocitykf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.KalmanFilter_t stVPSPoseKF = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpsposekf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaTrackingMode_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vp.tracking.MetaTrackingMode_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 1;
  if (this->evpstatustrackingmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_evpstatustrackingmode(), target);
  }

  // .vp.tracking.PoseInfo_t stVPSPoseInfo = 2;
  if (this->has_stvpsposeinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stvpsposeinfo(this), target, stream);
  }

  // .vp.tracking.Pose_t stCorrectingTr = 3;
  if (this->has_stcorrectingtr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::stcorrectingtr(this), target, stream);
  }

  // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 4;
  if (this->has_stlinearvelocitykf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::stlinearvelocitykf(this), target, stream);
  }

  // .vp.tracking.KalmanFilter_t stVPSPoseKF = 5;
  if (this->has_stvpsposekf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stvpsposekf(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vp.tracking.MetaTrackingMode_t)
  return target;
}

size_t MetaTrackingMode_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vp.tracking.MetaTrackingMode_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vp.tracking.PoseInfo_t stVPSPoseInfo = 2;
  if (this->has_stvpsposeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpsposeinfo_);
  }

  // .vp.tracking.Pose_t stCorrectingTr = 3;
  if (this->has_stcorrectingtr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcorrectingtr_);
  }

  // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 4;
  if (this->has_stlinearvelocitykf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlinearvelocitykf_);
  }

  // .vp.tracking.KalmanFilter_t stVPSPoseKF = 5;
  if (this->has_stvpsposekf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpsposekf_);
  }

  // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 1;
  if (this->evpstatustrackingmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evpstatustrackingmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaTrackingMode_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vp.tracking.MetaTrackingMode_t)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaTrackingMode_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetaTrackingMode_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vp.tracking.MetaTrackingMode_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vp.tracking.MetaTrackingMode_t)
    MergeFrom(*source);
  }
}

void MetaTrackingMode_t::MergeFrom(const MetaTrackingMode_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vp.tracking.MetaTrackingMode_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stvpsposeinfo()) {
    _internal_mutable_stvpsposeinfo()->::vp::tracking::PoseInfo_t::MergeFrom(from._internal_stvpsposeinfo());
  }
  if (from.has_stcorrectingtr()) {
    _internal_mutable_stcorrectingtr()->::vp::tracking::Pose_t::MergeFrom(from._internal_stcorrectingtr());
  }
  if (from.has_stlinearvelocitykf()) {
    _internal_mutable_stlinearvelocitykf()->::vp::tracking::KalmanFilter_t::MergeFrom(from._internal_stlinearvelocitykf());
  }
  if (from.has_stvpsposekf()) {
    _internal_mutable_stvpsposekf()->::vp::tracking::KalmanFilter_t::MergeFrom(from._internal_stvpsposekf());
  }
  if (from.evpstatustrackingmode() != 0) {
    _internal_set_evpstatustrackingmode(from._internal_evpstatustrackingmode());
  }
}

void MetaTrackingMode_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vp.tracking.MetaTrackingMode_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaTrackingMode_t::CopyFrom(const MetaTrackingMode_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vp.tracking.MetaTrackingMode_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaTrackingMode_t::IsInitialized() const {
  return true;
}

void MetaTrackingMode_t::InternalSwap(MetaTrackingMode_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetaTrackingMode_t, evpstatustrackingmode_)
      + sizeof(MetaTrackingMode_t::evpstatustrackingmode_)
      - PROTOBUF_FIELD_OFFSET(MetaTrackingMode_t, stvpsposeinfo_)>(
          reinterpret_cast<char*>(&stvpsposeinfo_),
          reinterpret_cast<char*>(&other->stvpsposeinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetaTrackingMode_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace tracking
}  // namespace vp
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vp::tracking::Pose_t* Arena::CreateMaybeMessage< ::vp::tracking::Pose_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vp::tracking::Pose_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vp::tracking::PoseInfo_t* Arena::CreateMaybeMessage< ::vp::tracking::PoseInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vp::tracking::PoseInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vp::tracking::FramePoseInfo_t* Arena::CreateMaybeMessage< ::vp::tracking::FramePoseInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vp::tracking::FramePoseInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vp::tracking::KalmanFilter_t* Arena::CreateMaybeMessage< ::vp::tracking::KalmanFilter_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vp::tracking::KalmanFilter_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vp::tracking::Param_t* Arena::CreateMaybeMessage< ::vp::tracking::Param_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vp::tracking::Param_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vp::tracking::MetaTrackingMode_t* Arena::CreateMaybeMessage< ::vp::tracking::MetaTrackingMode_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vp::tracking::MetaTrackingMode_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
