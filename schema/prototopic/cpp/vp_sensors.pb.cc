// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_sensors.proto

#include "vp_sensors.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vpdata {
namespace sensors {
constexpr GPS_t::GPS_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arf32pose_()
  , _arf32pose_cached_byte_size_()
  , u64tscapture_(PROTOBUF_ULONGLONG(0)){}
struct GPS_tDefaultTypeInternal {
  constexpr GPS_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPS_tDefaultTypeInternal() {}
  union {
    GPS_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPS_tDefaultTypeInternal _GPS_t_default_instance_;
constexpr IMU_t::IMU_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arf32data_()
  , _arf32data_cached_byte_size_()
  , u64tscapture_(PROTOBUF_ULONGLONG(0)){}
struct IMU_tDefaultTypeInternal {
  constexpr IMU_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMU_tDefaultTypeInternal() {}
  union {
    IMU_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMU_tDefaultTypeInternal _IMU_t_default_instance_;
constexpr Barometer_t::Barometer_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arf32data_()
  , _arf32data_cached_byte_size_()
  , u64tscapture_(PROTOBUF_ULONGLONG(0)){}
struct Barometer_tDefaultTypeInternal {
  constexpr Barometer_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Barometer_tDefaultTypeInternal() {}
  union {
    Barometer_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Barometer_tDefaultTypeInternal _Barometer_t_default_instance_;
constexpr MCompass_t::MCompass_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arf32data_()
  , _arf32data_cached_byte_size_()
  , u64tscapture_(PROTOBUF_ULONGLONG(0)){}
struct MCompass_tDefaultTypeInternal {
  constexpr MCompass_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MCompass_tDefaultTypeInternal() {}
  union {
    MCompass_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MCompass_tDefaultTypeInternal _MCompass_t_default_instance_;
constexpr GPSLocationInfo_t::GPSLocationInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , f64longitude_(0)
  , f64latitude_(0)
  , f64altitude_(0){}
struct GPSLocationInfo_tDefaultTypeInternal {
  constexpr GPSLocationInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPSLocationInfo_tDefaultTypeInternal() {}
  union {
    GPSLocationInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPSLocationInfo_tDefaultTypeInternal _GPSLocationInfo_t_default_instance_;
constexpr AccelerometerInfo_t::AccelerometerInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , f32ax_(0)
  , f32ay_(0)
  , f32az_(0){}
struct AccelerometerInfo_tDefaultTypeInternal {
  constexpr AccelerometerInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccelerometerInfo_tDefaultTypeInternal() {}
  union {
    AccelerometerInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccelerometerInfo_tDefaultTypeInternal _AccelerometerInfo_t_default_instance_;
constexpr GyroscopeInfo_t::GyroscopeInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , f32gx_(0)
  , f32gy_(0)
  , f32gz_(0){}
struct GyroscopeInfo_tDefaultTypeInternal {
  constexpr GyroscopeInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GyroscopeInfo_tDefaultTypeInternal() {}
  union {
    GyroscopeInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GyroscopeInfo_tDefaultTypeInternal _GyroscopeInfo_t_default_instance_;
constexpr RotationVectorInfo_t::RotationVectorInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , f32qx_(0)
  , f32qy_(0)
  , f32qz_(0)
  , f32qw_(0){}
struct RotationVectorInfo_tDefaultTypeInternal {
  constexpr RotationVectorInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RotationVectorInfo_tDefaultTypeInternal() {}
  union {
    RotationVectorInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RotationVectorInfo_tDefaultTypeInternal _RotationVectorInfo_t_default_instance_;
constexpr StepCounterInfo_t::StepCounterInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , u32stepcounter_(0u){}
struct StepCounterInfo_tDefaultTypeInternal {
  constexpr StepCounterInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StepCounterInfo_tDefaultTypeInternal() {}
  union {
    StepCounterInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StepCounterInfo_tDefaultTypeInternal _StepCounterInfo_t_default_instance_;
constexpr StepDetectorInfo_t::StepDetectorInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , u32stepdetector_(false){}
struct StepDetectorInfo_tDefaultTypeInternal {
  constexpr StepDetectorInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StepDetectorInfo_tDefaultTypeInternal() {}
  union {
    StepDetectorInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StepDetectorInfo_tDefaultTypeInternal _StepDetectorInfo_t_default_instance_;
constexpr MagneticFieldInfo_t::MagneticFieldInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , f32mx_(0)
  , f32my_(0)
  , f32mz_(0){}
struct MagneticFieldInfo_tDefaultTypeInternal {
  constexpr MagneticFieldInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MagneticFieldInfo_tDefaultTypeInternal() {}
  union {
    MagneticFieldInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MagneticFieldInfo_tDefaultTypeInternal _MagneticFieldInfo_t_default_instance_;
constexpr PressureInfo_t::PressureInfo_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : u64tscapture_(PROTOBUF_ULONGLONG(0))
  , f32pressure_(0){}
struct PressureInfo_tDefaultTypeInternal {
  constexpr PressureInfo_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PressureInfo_tDefaultTypeInternal() {}
  union {
    PressureInfo_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PressureInfo_tDefaultTypeInternal _PressureInfo_t_default_instance_;
}  // namespace sensors
}  // namespace vpdata
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vp_5fsensors_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vp_5fsensors_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vp_5fsensors_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vp_5fsensors_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPS_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPS_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPS_t, arf32pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::IMU_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::IMU_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::IMU_t, arf32data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::Barometer_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::Barometer_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::Barometer_t, arf32data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MCompass_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MCompass_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MCompass_t, arf32data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPSLocationInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPSLocationInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPSLocationInfo_t, f64longitude_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPSLocationInfo_t, f64latitude_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GPSLocationInfo_t, f64altitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::AccelerometerInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::AccelerometerInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::AccelerometerInfo_t, f32ax_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::AccelerometerInfo_t, f32ay_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::AccelerometerInfo_t, f32az_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GyroscopeInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GyroscopeInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GyroscopeInfo_t, f32gx_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GyroscopeInfo_t, f32gy_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::GyroscopeInfo_t, f32gz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::RotationVectorInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::RotationVectorInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::RotationVectorInfo_t, f32qx_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::RotationVectorInfo_t, f32qy_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::RotationVectorInfo_t, f32qz_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::RotationVectorInfo_t, f32qw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::StepCounterInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::StepCounterInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::StepCounterInfo_t, u32stepcounter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::StepDetectorInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::StepDetectorInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::StepDetectorInfo_t, u32stepdetector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MagneticFieldInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MagneticFieldInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MagneticFieldInfo_t, f32mx_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MagneticFieldInfo_t, f32my_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::MagneticFieldInfo_t, f32mz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::PressureInfo_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::PressureInfo_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::sensors::PressureInfo_t, f32pressure_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vpdata::sensors::GPS_t)},
  { 7, -1, sizeof(::vpdata::sensors::IMU_t)},
  { 14, -1, sizeof(::vpdata::sensors::Barometer_t)},
  { 21, -1, sizeof(::vpdata::sensors::MCompass_t)},
  { 28, -1, sizeof(::vpdata::sensors::GPSLocationInfo_t)},
  { 37, -1, sizeof(::vpdata::sensors::AccelerometerInfo_t)},
  { 46, -1, sizeof(::vpdata::sensors::GyroscopeInfo_t)},
  { 55, -1, sizeof(::vpdata::sensors::RotationVectorInfo_t)},
  { 65, -1, sizeof(::vpdata::sensors::StepCounterInfo_t)},
  { 72, -1, sizeof(::vpdata::sensors::StepDetectorInfo_t)},
  { 79, -1, sizeof(::vpdata::sensors::MagneticFieldInfo_t)},
  { 88, -1, sizeof(::vpdata::sensors::PressureInfo_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_GPS_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_IMU_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_Barometer_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_MCompass_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_GPSLocationInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_AccelerometerInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_GyroscopeInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_RotationVectorInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_StepCounterInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_StepDetectorInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_MagneticFieldInfo_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::sensors::_PressureInfo_t_default_instance_),
};

const char descriptor_table_protodef_vp_5fsensors_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020vp_sensors.proto\022\016vpdata.sensors\"0\n\005GP"
  "S_t\022\024\n\014u64TSCapture\030\001 \001(\004\022\021\n\tarf32Pose\030\002"
  " \003(\002\"0\n\005IMU_t\022\024\n\014u64TSCapture\030\001 \001(\004\022\021\n\ta"
  "rf32Data\030\002 \003(\002\"6\n\013Barometer_t\022\024\n\014u64TSCa"
  "pture\030\001 \001(\004\022\021\n\tarf32Data\030\002 \003(\002\"5\n\nMCompa"
  "ss_t\022\024\n\014u64TSCapture\030\001 \001(\004\022\021\n\tarf32Data\030"
  "\002 \003(\002\"i\n\021GPSLocationInfo_t\022\024\n\014u64TSCaptu"
  "re\030\001 \001(\004\022\024\n\014f64Longitude\030\002 \001(\001\022\023\n\013f64Lat"
  "itude\030\003 \001(\001\022\023\n\013f64Altitude\030\004 \001(\001\"X\n\023Acce"
  "lerometerInfo_t\022\024\n\014u64TSCapture\030\001 \001(\004\022\r\n"
  "\005f32ax\030\002 \001(\002\022\r\n\005f32ay\030\003 \001(\002\022\r\n\005f32az\030\004 \001"
  "(\002\"T\n\017GyroscopeInfo_t\022\024\n\014u64TSCapture\030\001 "
  "\001(\004\022\r\n\005f32gx\030\002 \001(\002\022\r\n\005f32gy\030\003 \001(\002\022\r\n\005f32"
  "gz\030\004 \001(\002\"h\n\024RotationVectorInfo_t\022\024\n\014u64T"
  "SCapture\030\001 \001(\004\022\r\n\005f32qx\030\002 \001(\002\022\r\n\005f32qy\030\003"
  " \001(\002\022\r\n\005f32qz\030\004 \001(\002\022\r\n\005f32qw\030\005 \001(\002\"A\n\021St"
  "epCounterInfo_t\022\024\n\014u64TSCapture\030\001 \001(\004\022\026\n"
  "\016u32StepCounter\030\002 \001(\r\"C\n\022StepDetectorInf"
  "o_t\022\024\n\014u64TSCapture\030\001 \001(\004\022\027\n\017u32StepDete"
  "ctor\030\002 \001(\010\"X\n\023MagneticFieldInfo_t\022\024\n\014u64"
  "TSCapture\030\001 \001(\004\022\r\n\005f32mx\030\002 \001(\002\022\r\n\005f32my\030"
  "\003 \001(\002\022\r\n\005f32mz\030\004 \001(\002\";\n\016PressureInfo_t\022\024"
  "\n\014u64TSCapture\030\001 \001(\004\022\023\n\013f32Pressure\030\002 \001("
  "\002B\025\n\023msgmanager.protobufb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vp_5fsensors_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fsensors_2eproto = {
  false, false, 952, descriptor_table_protodef_vp_5fsensors_2eproto, "vp_sensors.proto", 
  &descriptor_table_vp_5fsensors_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_vp_5fsensors_2eproto::offsets,
  file_level_metadata_vp_5fsensors_2eproto, file_level_enum_descriptors_vp_5fsensors_2eproto, file_level_service_descriptors_vp_5fsensors_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vp_5fsensors_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fsensors_2eproto);
  return descriptor_table_vp_5fsensors_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vp_5fsensors_2eproto(&descriptor_table_vp_5fsensors_2eproto);
namespace vpdata {
namespace sensors {

// ===================================================================

class GPS_t::_Internal {
 public:
};

GPS_t::GPS_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arf32pose_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.GPS_t)
}
GPS_t::GPS_t(const GPS_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arf32pose_(from.arf32pose_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u64tscapture_ = from.u64tscapture_;
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.GPS_t)
}

void GPS_t::SharedCtor() {
u64tscapture_ = PROTOBUF_ULONGLONG(0);
}

GPS_t::~GPS_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.GPS_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPS_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPS_t::ArenaDtor(void* object) {
  GPS_t* _this = reinterpret_cast< GPS_t* >(object);
  (void)_this;
}
void GPS_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPS_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPS_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.GPS_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arf32pose_.Clear();
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float arf32Pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32pose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_arf32pose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPS_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.GPS_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // repeated float arf32Pose = 2;
  if (this->_internal_arf32pose_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_arf32pose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.GPS_t)
  return target;
}

size_t GPS_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.GPS_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arf32Pose = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32pose_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32pose_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPS_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.GPS_t)
  GOOGLE_DCHECK_NE(&from, this);
  const GPS_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPS_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.GPS_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.GPS_t)
    MergeFrom(*source);
  }
}

void GPS_t::MergeFrom(const GPS_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.GPS_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arf32pose_.MergeFrom(from.arf32pose_);
  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
}

void GPS_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.GPS_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS_t::CopyFrom(const GPS_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.GPS_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS_t::IsInitialized() const {
  return true;
}

void GPS_t::InternalSwap(GPS_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arf32pose_.InternalSwap(&other->arf32pose_);
  swap(u64tscapture_, other->u64tscapture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class IMU_t::_Internal {
 public:
};

IMU_t::IMU_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arf32data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.IMU_t)
}
IMU_t::IMU_t(const IMU_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arf32data_(from.arf32data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u64tscapture_ = from.u64tscapture_;
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.IMU_t)
}

void IMU_t::SharedCtor() {
u64tscapture_ = PROTOBUF_ULONGLONG(0);
}

IMU_t::~IMU_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.IMU_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IMU_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IMU_t::ArenaDtor(void* object) {
  IMU_t* _this = reinterpret_cast< IMU_t* >(object);
  (void)_this;
}
void IMU_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMU_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMU_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.IMU_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arf32data_.Clear();
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMU_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float arf32Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_arf32data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IMU_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.IMU_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // repeated float arf32Data = 2;
  if (this->_internal_arf32data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_arf32data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.IMU_t)
  return target;
}

size_t IMU_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.IMU_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arf32Data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IMU_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.IMU_t)
  GOOGLE_DCHECK_NE(&from, this);
  const IMU_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IMU_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.IMU_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.IMU_t)
    MergeFrom(*source);
  }
}

void IMU_t::MergeFrom(const IMU_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.IMU_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arf32data_.MergeFrom(from.arf32data_);
  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
}

void IMU_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.IMU_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMU_t::CopyFrom(const IMU_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.IMU_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMU_t::IsInitialized() const {
  return true;
}

void IMU_t::InternalSwap(IMU_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arf32data_.InternalSwap(&other->arf32data_);
  swap(u64tscapture_, other->u64tscapture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IMU_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Barometer_t::_Internal {
 public:
};

Barometer_t::Barometer_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arf32data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.Barometer_t)
}
Barometer_t::Barometer_t(const Barometer_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arf32data_(from.arf32data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u64tscapture_ = from.u64tscapture_;
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.Barometer_t)
}

void Barometer_t::SharedCtor() {
u64tscapture_ = PROTOBUF_ULONGLONG(0);
}

Barometer_t::~Barometer_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.Barometer_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Barometer_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Barometer_t::ArenaDtor(void* object) {
  Barometer_t* _this = reinterpret_cast< Barometer_t* >(object);
  (void)_this;
}
void Barometer_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Barometer_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Barometer_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.Barometer_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arf32data_.Clear();
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Barometer_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float arf32Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_arf32data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Barometer_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.Barometer_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // repeated float arf32Data = 2;
  if (this->_internal_arf32data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_arf32data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.Barometer_t)
  return target;
}

size_t Barometer_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.Barometer_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arf32Data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Barometer_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.Barometer_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Barometer_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Barometer_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.Barometer_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.Barometer_t)
    MergeFrom(*source);
  }
}

void Barometer_t::MergeFrom(const Barometer_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.Barometer_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arf32data_.MergeFrom(from.arf32data_);
  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
}

void Barometer_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.Barometer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Barometer_t::CopyFrom(const Barometer_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.Barometer_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Barometer_t::IsInitialized() const {
  return true;
}

void Barometer_t::InternalSwap(Barometer_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arf32data_.InternalSwap(&other->arf32data_);
  swap(u64tscapture_, other->u64tscapture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Barometer_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MCompass_t::_Internal {
 public:
};

MCompass_t::MCompass_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arf32data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.MCompass_t)
}
MCompass_t::MCompass_t(const MCompass_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arf32data_(from.arf32data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  u64tscapture_ = from.u64tscapture_;
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.MCompass_t)
}

void MCompass_t::SharedCtor() {
u64tscapture_ = PROTOBUF_ULONGLONG(0);
}

MCompass_t::~MCompass_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.MCompass_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MCompass_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MCompass_t::ArenaDtor(void* object) {
  MCompass_t* _this = reinterpret_cast< MCompass_t* >(object);
  (void)_this;
}
void MCompass_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MCompass_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MCompass_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.MCompass_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arf32data_.Clear();
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MCompass_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float arf32Data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_arf32data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MCompass_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.MCompass_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // repeated float arf32Data = 2;
  if (this->_internal_arf32data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_arf32data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.MCompass_t)
  return target;
}

size_t MCompass_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.MCompass_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arf32Data = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32data_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MCompass_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.MCompass_t)
  GOOGLE_DCHECK_NE(&from, this);
  const MCompass_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MCompass_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.MCompass_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.MCompass_t)
    MergeFrom(*source);
  }
}

void MCompass_t::MergeFrom(const MCompass_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.MCompass_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arf32data_.MergeFrom(from.arf32data_);
  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
}

void MCompass_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.MCompass_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MCompass_t::CopyFrom(const MCompass_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.MCompass_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MCompass_t::IsInitialized() const {
  return true;
}

void MCompass_t::InternalSwap(MCompass_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arf32data_.InternalSwap(&other->arf32data_);
  swap(u64tscapture_, other->u64tscapture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MCompass_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GPSLocationInfo_t::_Internal {
 public:
};

GPSLocationInfo_t::GPSLocationInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.GPSLocationInfo_t)
}
GPSLocationInfo_t::GPSLocationInfo_t(const GPSLocationInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&f64altitude_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f64altitude_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.GPSLocationInfo_t)
}

void GPSLocationInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f64altitude_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f64altitude_));
}

GPSLocationInfo_t::~GPSLocationInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.GPSLocationInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPSLocationInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GPSLocationInfo_t::ArenaDtor(void* object) {
  GPSLocationInfo_t* _this = reinterpret_cast< GPSLocationInfo_t* >(object);
  (void)_this;
}
void GPSLocationInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPSLocationInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPSLocationInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.GPSLocationInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f64altitude_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f64altitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPSLocationInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double f64Longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          f64longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          f64latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double f64Altitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          f64altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSLocationInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.GPSLocationInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // double f64Longitude = 2;
  if (!(this->f64longitude() <= 0 && this->f64longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_f64longitude(), target);
  }

  // double f64Latitude = 3;
  if (!(this->f64latitude() <= 0 && this->f64latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_f64latitude(), target);
  }

  // double f64Altitude = 4;
  if (!(this->f64altitude() <= 0 && this->f64altitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_f64altitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.GPSLocationInfo_t)
  return target;
}

size_t GPSLocationInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.GPSLocationInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // double f64Longitude = 2;
  if (!(this->f64longitude() <= 0 && this->f64longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Latitude = 3;
  if (!(this->f64latitude() <= 0 && this->f64latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double f64Altitude = 4;
  if (!(this->f64altitude() <= 0 && this->f64altitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPSLocationInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.GPSLocationInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const GPSLocationInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPSLocationInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.GPSLocationInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.GPSLocationInfo_t)
    MergeFrom(*source);
  }
}

void GPSLocationInfo_t::MergeFrom(const GPSLocationInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.GPSLocationInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (!(from.f64longitude() <= 0 && from.f64longitude() >= 0)) {
    _internal_set_f64longitude(from._internal_f64longitude());
  }
  if (!(from.f64latitude() <= 0 && from.f64latitude() >= 0)) {
    _internal_set_f64latitude(from._internal_f64latitude());
  }
  if (!(from.f64altitude() <= 0 && from.f64altitude() >= 0)) {
    _internal_set_f64altitude(from._internal_f64altitude());
  }
}

void GPSLocationInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.GPSLocationInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPSLocationInfo_t::CopyFrom(const GPSLocationInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.GPSLocationInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSLocationInfo_t::IsInitialized() const {
  return true;
}

void GPSLocationInfo_t::InternalSwap(GPSLocationInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPSLocationInfo_t, f64altitude_)
      + sizeof(GPSLocationInfo_t::f64altitude_)
      - PROTOBUF_FIELD_OFFSET(GPSLocationInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSLocationInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AccelerometerInfo_t::_Internal {
 public:
};

AccelerometerInfo_t::AccelerometerInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.AccelerometerInfo_t)
}
AccelerometerInfo_t::AccelerometerInfo_t(const AccelerometerInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32az_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32az_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.AccelerometerInfo_t)
}

void AccelerometerInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32az_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32az_));
}

AccelerometerInfo_t::~AccelerometerInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.AccelerometerInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AccelerometerInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AccelerometerInfo_t::ArenaDtor(void* object) {
  AccelerometerInfo_t* _this = reinterpret_cast< AccelerometerInfo_t* >(object);
  (void)_this;
}
void AccelerometerInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccelerometerInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccelerometerInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.AccelerometerInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32az_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32az_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccelerometerInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32ax = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32ay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32ay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32az = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32az_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelerometerInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.AccelerometerInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // float f32ax = 2;
  if (!(this->f32ax() <= 0 && this->f32ax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32ax(), target);
  }

  // float f32ay = 3;
  if (!(this->f32ay() <= 0 && this->f32ay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32ay(), target);
  }

  // float f32az = 4;
  if (!(this->f32az() <= 0 && this->f32az() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32az(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.AccelerometerInfo_t)
  return target;
}

size_t AccelerometerInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.AccelerometerInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // float f32ax = 2;
  if (!(this->f32ax() <= 0 && this->f32ax() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32ay = 3;
  if (!(this->f32ay() <= 0 && this->f32ay() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32az = 4;
  if (!(this->f32az() <= 0 && this->f32az() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelerometerInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.AccelerometerInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerometerInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelerometerInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.AccelerometerInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.AccelerometerInfo_t)
    MergeFrom(*source);
  }
}

void AccelerometerInfo_t::MergeFrom(const AccelerometerInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.AccelerometerInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (!(from.f32ax() <= 0 && from.f32ax() >= 0)) {
    _internal_set_f32ax(from._internal_f32ax());
  }
  if (!(from.f32ay() <= 0 && from.f32ay() >= 0)) {
    _internal_set_f32ay(from._internal_f32ay());
  }
  if (!(from.f32az() <= 0 && from.f32az() >= 0)) {
    _internal_set_f32az(from._internal_f32az());
  }
}

void AccelerometerInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.AccelerometerInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerometerInfo_t::CopyFrom(const AccelerometerInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.AccelerometerInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerometerInfo_t::IsInitialized() const {
  return true;
}

void AccelerometerInfo_t::InternalSwap(AccelerometerInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccelerometerInfo_t, f32az_)
      + sizeof(AccelerometerInfo_t::f32az_)
      - PROTOBUF_FIELD_OFFSET(AccelerometerInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerometerInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GyroscopeInfo_t::_Internal {
 public:
};

GyroscopeInfo_t::GyroscopeInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.GyroscopeInfo_t)
}
GyroscopeInfo_t::GyroscopeInfo_t(const GyroscopeInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32gz_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32gz_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.GyroscopeInfo_t)
}

void GyroscopeInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32gz_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32gz_));
}

GyroscopeInfo_t::~GyroscopeInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.GyroscopeInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GyroscopeInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GyroscopeInfo_t::ArenaDtor(void* object) {
  GyroscopeInfo_t* _this = reinterpret_cast< GyroscopeInfo_t* >(object);
  (void)_this;
}
void GyroscopeInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GyroscopeInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GyroscopeInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.GyroscopeInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32gz_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32gz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GyroscopeInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32gx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32gx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32gy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32gy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32gz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32gz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GyroscopeInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.GyroscopeInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // float f32gx = 2;
  if (!(this->f32gx() <= 0 && this->f32gx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32gx(), target);
  }

  // float f32gy = 3;
  if (!(this->f32gy() <= 0 && this->f32gy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32gy(), target);
  }

  // float f32gz = 4;
  if (!(this->f32gz() <= 0 && this->f32gz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32gz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.GyroscopeInfo_t)
  return target;
}

size_t GyroscopeInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.GyroscopeInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // float f32gx = 2;
  if (!(this->f32gx() <= 0 && this->f32gx() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32gy = 3;
  if (!(this->f32gy() <= 0 && this->f32gy() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32gz = 4;
  if (!(this->f32gz() <= 0 && this->f32gz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GyroscopeInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.GyroscopeInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const GyroscopeInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GyroscopeInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.GyroscopeInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.GyroscopeInfo_t)
    MergeFrom(*source);
  }
}

void GyroscopeInfo_t::MergeFrom(const GyroscopeInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.GyroscopeInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (!(from.f32gx() <= 0 && from.f32gx() >= 0)) {
    _internal_set_f32gx(from._internal_f32gx());
  }
  if (!(from.f32gy() <= 0 && from.f32gy() >= 0)) {
    _internal_set_f32gy(from._internal_f32gy());
  }
  if (!(from.f32gz() <= 0 && from.f32gz() >= 0)) {
    _internal_set_f32gz(from._internal_f32gz());
  }
}

void GyroscopeInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.GyroscopeInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GyroscopeInfo_t::CopyFrom(const GyroscopeInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.GyroscopeInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GyroscopeInfo_t::IsInitialized() const {
  return true;
}

void GyroscopeInfo_t::InternalSwap(GyroscopeInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GyroscopeInfo_t, f32gz_)
      + sizeof(GyroscopeInfo_t::f32gz_)
      - PROTOBUF_FIELD_OFFSET(GyroscopeInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GyroscopeInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RotationVectorInfo_t::_Internal {
 public:
};

RotationVectorInfo_t::RotationVectorInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.RotationVectorInfo_t)
}
RotationVectorInfo_t::RotationVectorInfo_t(const RotationVectorInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32qw_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32qw_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.RotationVectorInfo_t)
}

void RotationVectorInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32qw_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32qw_));
}

RotationVectorInfo_t::~RotationVectorInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.RotationVectorInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RotationVectorInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RotationVectorInfo_t::ArenaDtor(void* object) {
  RotationVectorInfo_t* _this = reinterpret_cast< RotationVectorInfo_t* >(object);
  (void)_this;
}
void RotationVectorInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RotationVectorInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RotationVectorInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.RotationVectorInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32qw_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32qw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RotationVectorInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32qx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32qw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          f32qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RotationVectorInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.RotationVectorInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // float f32qx = 2;
  if (!(this->f32qx() <= 0 && this->f32qx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32qx(), target);
  }

  // float f32qy = 3;
  if (!(this->f32qy() <= 0 && this->f32qy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32qy(), target);
  }

  // float f32qz = 4;
  if (!(this->f32qz() <= 0 && this->f32qz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32qz(), target);
  }

  // float f32qw = 5;
  if (!(this->f32qw() <= 0 && this->f32qw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_f32qw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.RotationVectorInfo_t)
  return target;
}

size_t RotationVectorInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.RotationVectorInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // float f32qx = 2;
  if (!(this->f32qx() <= 0 && this->f32qx() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qy = 3;
  if (!(this->f32qy() <= 0 && this->f32qy() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qz = 4;
  if (!(this->f32qz() <= 0 && this->f32qz() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32qw = 5;
  if (!(this->f32qw() <= 0 && this->f32qw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotationVectorInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.RotationVectorInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const RotationVectorInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RotationVectorInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.RotationVectorInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.RotationVectorInfo_t)
    MergeFrom(*source);
  }
}

void RotationVectorInfo_t::MergeFrom(const RotationVectorInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.RotationVectorInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (!(from.f32qx() <= 0 && from.f32qx() >= 0)) {
    _internal_set_f32qx(from._internal_f32qx());
  }
  if (!(from.f32qy() <= 0 && from.f32qy() >= 0)) {
    _internal_set_f32qy(from._internal_f32qy());
  }
  if (!(from.f32qz() <= 0 && from.f32qz() >= 0)) {
    _internal_set_f32qz(from._internal_f32qz());
  }
  if (!(from.f32qw() <= 0 && from.f32qw() >= 0)) {
    _internal_set_f32qw(from._internal_f32qw());
  }
}

void RotationVectorInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.RotationVectorInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RotationVectorInfo_t::CopyFrom(const RotationVectorInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.RotationVectorInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotationVectorInfo_t::IsInitialized() const {
  return true;
}

void RotationVectorInfo_t::InternalSwap(RotationVectorInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RotationVectorInfo_t, f32qw_)
      + sizeof(RotationVectorInfo_t::f32qw_)
      - PROTOBUF_FIELD_OFFSET(RotationVectorInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RotationVectorInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StepCounterInfo_t::_Internal {
 public:
};

StepCounterInfo_t::StepCounterInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.StepCounterInfo_t)
}
StepCounterInfo_t::StepCounterInfo_t(const StepCounterInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&u32stepcounter_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(u32stepcounter_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.StepCounterInfo_t)
}

void StepCounterInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u32stepcounter_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(u32stepcounter_));
}

StepCounterInfo_t::~StepCounterInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.StepCounterInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StepCounterInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StepCounterInfo_t::ArenaDtor(void* object) {
  StepCounterInfo_t* _this = reinterpret_cast< StepCounterInfo_t* >(object);
  (void)_this;
}
void StepCounterInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepCounterInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StepCounterInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.StepCounterInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u32stepcounter_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(u32stepcounter_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepCounterInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 u32StepCounter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          u32stepcounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StepCounterInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.StepCounterInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // uint32 u32StepCounter = 2;
  if (this->u32stepcounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_u32stepcounter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.StepCounterInfo_t)
  return target;
}

size_t StepCounterInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.StepCounterInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // uint32 u32StepCounter = 2;
  if (this->u32stepcounter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u32stepcounter());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepCounterInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.StepCounterInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const StepCounterInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepCounterInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.StepCounterInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.StepCounterInfo_t)
    MergeFrom(*source);
  }
}

void StepCounterInfo_t::MergeFrom(const StepCounterInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.StepCounterInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (from.u32stepcounter() != 0) {
    _internal_set_u32stepcounter(from._internal_u32stepcounter());
  }
}

void StepCounterInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.StepCounterInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepCounterInfo_t::CopyFrom(const StepCounterInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.StepCounterInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepCounterInfo_t::IsInitialized() const {
  return true;
}

void StepCounterInfo_t::InternalSwap(StepCounterInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StepCounterInfo_t, u32stepcounter_)
      + sizeof(StepCounterInfo_t::u32stepcounter_)
      - PROTOBUF_FIELD_OFFSET(StepCounterInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StepCounterInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StepDetectorInfo_t::_Internal {
 public:
};

StepDetectorInfo_t::StepDetectorInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.StepDetectorInfo_t)
}
StepDetectorInfo_t::StepDetectorInfo_t(const StepDetectorInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&u32stepdetector_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(u32stepdetector_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.StepDetectorInfo_t)
}

void StepDetectorInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&u32stepdetector_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(u32stepdetector_));
}

StepDetectorInfo_t::~StepDetectorInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.StepDetectorInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StepDetectorInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StepDetectorInfo_t::ArenaDtor(void* object) {
  StepDetectorInfo_t* _this = reinterpret_cast< StepDetectorInfo_t* >(object);
  (void)_this;
}
void StepDetectorInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StepDetectorInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StepDetectorInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.StepDetectorInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&u32stepdetector_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(u32stepdetector_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StepDetectorInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool u32StepDetector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          u32stepdetector_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StepDetectorInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.StepDetectorInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // bool u32StepDetector = 2;
  if (this->u32stepdetector() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_u32stepdetector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.StepDetectorInfo_t)
  return target;
}

size_t StepDetectorInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.StepDetectorInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // bool u32StepDetector = 2;
  if (this->u32stepdetector() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepDetectorInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.StepDetectorInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const StepDetectorInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepDetectorInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.StepDetectorInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.StepDetectorInfo_t)
    MergeFrom(*source);
  }
}

void StepDetectorInfo_t::MergeFrom(const StepDetectorInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.StepDetectorInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (from.u32stepdetector() != 0) {
    _internal_set_u32stepdetector(from._internal_u32stepdetector());
  }
}

void StepDetectorInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.StepDetectorInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepDetectorInfo_t::CopyFrom(const StepDetectorInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.StepDetectorInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepDetectorInfo_t::IsInitialized() const {
  return true;
}

void StepDetectorInfo_t::InternalSwap(StepDetectorInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StepDetectorInfo_t, u32stepdetector_)
      + sizeof(StepDetectorInfo_t::u32stepdetector_)
      - PROTOBUF_FIELD_OFFSET(StepDetectorInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StepDetectorInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MagneticFieldInfo_t::_Internal {
 public:
};

MagneticFieldInfo_t::MagneticFieldInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.MagneticFieldInfo_t)
}
MagneticFieldInfo_t::MagneticFieldInfo_t(const MagneticFieldInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32mz_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32mz_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.MagneticFieldInfo_t)
}

void MagneticFieldInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32mz_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32mz_));
}

MagneticFieldInfo_t::~MagneticFieldInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.MagneticFieldInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MagneticFieldInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MagneticFieldInfo_t::ArenaDtor(void* object) {
  MagneticFieldInfo_t* _this = reinterpret_cast< MagneticFieldInfo_t* >(object);
  (void)_this;
}
void MagneticFieldInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MagneticFieldInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MagneticFieldInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.MagneticFieldInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32mz_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32mz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MagneticFieldInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32mx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32mx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32my = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32my_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32mz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32mz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MagneticFieldInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.MagneticFieldInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // float f32mx = 2;
  if (!(this->f32mx() <= 0 && this->f32mx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32mx(), target);
  }

  // float f32my = 3;
  if (!(this->f32my() <= 0 && this->f32my() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32my(), target);
  }

  // float f32mz = 4;
  if (!(this->f32mz() <= 0 && this->f32mz() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32mz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.MagneticFieldInfo_t)
  return target;
}

size_t MagneticFieldInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.MagneticFieldInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // float f32mx = 2;
  if (!(this->f32mx() <= 0 && this->f32mx() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32my = 3;
  if (!(this->f32my() <= 0 && this->f32my() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32mz = 4;
  if (!(this->f32mz() <= 0 && this->f32mz() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagneticFieldInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.MagneticFieldInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticFieldInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MagneticFieldInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.MagneticFieldInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.MagneticFieldInfo_t)
    MergeFrom(*source);
  }
}

void MagneticFieldInfo_t::MergeFrom(const MagneticFieldInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.MagneticFieldInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (!(from.f32mx() <= 0 && from.f32mx() >= 0)) {
    _internal_set_f32mx(from._internal_f32mx());
  }
  if (!(from.f32my() <= 0 && from.f32my() >= 0)) {
    _internal_set_f32my(from._internal_f32my());
  }
  if (!(from.f32mz() <= 0 && from.f32mz() >= 0)) {
    _internal_set_f32mz(from._internal_f32mz());
  }
}

void MagneticFieldInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.MagneticFieldInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticFieldInfo_t::CopyFrom(const MagneticFieldInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.MagneticFieldInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticFieldInfo_t::IsInitialized() const {
  return true;
}

void MagneticFieldInfo_t::InternalSwap(MagneticFieldInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MagneticFieldInfo_t, f32mz_)
      + sizeof(MagneticFieldInfo_t::f32mz_)
      - PROTOBUF_FIELD_OFFSET(MagneticFieldInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MagneticFieldInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PressureInfo_t::_Internal {
 public:
};

PressureInfo_t::PressureInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.sensors.PressureInfo_t)
}
PressureInfo_t::PressureInfo_t(const PressureInfo_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32pressure_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32pressure_));
  // @@protoc_insertion_point(copy_constructor:vpdata.sensors.PressureInfo_t)
}

void PressureInfo_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tscapture_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32pressure_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32pressure_));
}

PressureInfo_t::~PressureInfo_t() {
  // @@protoc_insertion_point(destructor:vpdata.sensors.PressureInfo_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PressureInfo_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PressureInfo_t::ArenaDtor(void* object) {
  PressureInfo_t* _this = reinterpret_cast< PressureInfo_t* >(object);
  (void)_this;
}
void PressureInfo_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PressureInfo_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PressureInfo_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.sensors.PressureInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32pressure_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(f32pressure_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PressureInfo_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32Pressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PressureInfo_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.sensors.PressureInfo_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // float f32Pressure = 2;
  if (!(this->f32pressure() <= 0 && this->f32pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32pressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.sensors.PressureInfo_t)
  return target;
}

size_t PressureInfo_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.sensors.PressureInfo_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // float f32Pressure = 2;
  if (!(this->f32pressure() <= 0 && this->f32pressure() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PressureInfo_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.sensors.PressureInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  const PressureInfo_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PressureInfo_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.sensors.PressureInfo_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.sensors.PressureInfo_t)
    MergeFrom(*source);
  }
}

void PressureInfo_t::MergeFrom(const PressureInfo_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.sensors.PressureInfo_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (!(from.f32pressure() <= 0 && from.f32pressure() >= 0)) {
    _internal_set_f32pressure(from._internal_f32pressure());
  }
}

void PressureInfo_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.sensors.PressureInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PressureInfo_t::CopyFrom(const PressureInfo_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.sensors.PressureInfo_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressureInfo_t::IsInitialized() const {
  return true;
}

void PressureInfo_t::InternalSwap(PressureInfo_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PressureInfo_t, f32pressure_)
      + sizeof(PressureInfo_t::f32pressure_)
      - PROTOBUF_FIELD_OFFSET(PressureInfo_t, u64tscapture_)>(
          reinterpret_cast<char*>(&u64tscapture_),
          reinterpret_cast<char*>(&other->u64tscapture_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PressureInfo_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sensors
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vpdata::sensors::GPS_t* Arena::CreateMaybeMessage< ::vpdata::sensors::GPS_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::GPS_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::IMU_t* Arena::CreateMaybeMessage< ::vpdata::sensors::IMU_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::IMU_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::Barometer_t* Arena::CreateMaybeMessage< ::vpdata::sensors::Barometer_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::Barometer_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::MCompass_t* Arena::CreateMaybeMessage< ::vpdata::sensors::MCompass_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::MCompass_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::GPSLocationInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::GPSLocationInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::GPSLocationInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::AccelerometerInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::AccelerometerInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::AccelerometerInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::GyroscopeInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::GyroscopeInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::GyroscopeInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::RotationVectorInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::RotationVectorInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::RotationVectorInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::StepCounterInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::StepCounterInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::StepCounterInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::StepDetectorInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::StepDetectorInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::StepDetectorInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::MagneticFieldInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::MagneticFieldInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::MagneticFieldInfo_t >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::sensors::PressureInfo_t* Arena::CreateMaybeMessage< ::vpdata::sensors::PressureInfo_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::sensors::PressureInfo_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
