// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_sensors.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vp_5fsensors_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vp_5fsensors_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vp_5fsensors_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vp_5fsensors_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fsensors_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_vp_5fsensors_2eproto_metadata_getter(int index);
namespace vpdata {
namespace sensors {
class AccelerometerInfo_t;
struct AccelerometerInfo_tDefaultTypeInternal;
extern AccelerometerInfo_tDefaultTypeInternal _AccelerometerInfo_t_default_instance_;
class Barometer_t;
struct Barometer_tDefaultTypeInternal;
extern Barometer_tDefaultTypeInternal _Barometer_t_default_instance_;
class GPSLocationInfo_t;
struct GPSLocationInfo_tDefaultTypeInternal;
extern GPSLocationInfo_tDefaultTypeInternal _GPSLocationInfo_t_default_instance_;
class GPS_t;
struct GPS_tDefaultTypeInternal;
extern GPS_tDefaultTypeInternal _GPS_t_default_instance_;
class GyroscopeInfo_t;
struct GyroscopeInfo_tDefaultTypeInternal;
extern GyroscopeInfo_tDefaultTypeInternal _GyroscopeInfo_t_default_instance_;
class IMU_t;
struct IMU_tDefaultTypeInternal;
extern IMU_tDefaultTypeInternal _IMU_t_default_instance_;
class MCompass_t;
struct MCompass_tDefaultTypeInternal;
extern MCompass_tDefaultTypeInternal _MCompass_t_default_instance_;
class MagneticFieldInfo_t;
struct MagneticFieldInfo_tDefaultTypeInternal;
extern MagneticFieldInfo_tDefaultTypeInternal _MagneticFieldInfo_t_default_instance_;
class PressureInfo_t;
struct PressureInfo_tDefaultTypeInternal;
extern PressureInfo_tDefaultTypeInternal _PressureInfo_t_default_instance_;
class RotationVectorInfo_t;
struct RotationVectorInfo_tDefaultTypeInternal;
extern RotationVectorInfo_tDefaultTypeInternal _RotationVectorInfo_t_default_instance_;
class StepCounterInfo_t;
struct StepCounterInfo_tDefaultTypeInternal;
extern StepCounterInfo_tDefaultTypeInternal _StepCounterInfo_t_default_instance_;
class StepDetectorInfo_t;
struct StepDetectorInfo_tDefaultTypeInternal;
extern StepDetectorInfo_tDefaultTypeInternal _StepDetectorInfo_t_default_instance_;
}  // namespace sensors
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> ::vpdata::sensors::AccelerometerInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::AccelerometerInfo_t>(Arena*);
template<> ::vpdata::sensors::Barometer_t* Arena::CreateMaybeMessage<::vpdata::sensors::Barometer_t>(Arena*);
template<> ::vpdata::sensors::GPSLocationInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::GPSLocationInfo_t>(Arena*);
template<> ::vpdata::sensors::GPS_t* Arena::CreateMaybeMessage<::vpdata::sensors::GPS_t>(Arena*);
template<> ::vpdata::sensors::GyroscopeInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::GyroscopeInfo_t>(Arena*);
template<> ::vpdata::sensors::IMU_t* Arena::CreateMaybeMessage<::vpdata::sensors::IMU_t>(Arena*);
template<> ::vpdata::sensors::MCompass_t* Arena::CreateMaybeMessage<::vpdata::sensors::MCompass_t>(Arena*);
template<> ::vpdata::sensors::MagneticFieldInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::MagneticFieldInfo_t>(Arena*);
template<> ::vpdata::sensors::PressureInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::PressureInfo_t>(Arena*);
template<> ::vpdata::sensors::RotationVectorInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::RotationVectorInfo_t>(Arena*);
template<> ::vpdata::sensors::StepCounterInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::StepCounterInfo_t>(Arena*);
template<> ::vpdata::sensors::StepDetectorInfo_t* Arena::CreateMaybeMessage<::vpdata::sensors::StepDetectorInfo_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vpdata {
namespace sensors {

// ===================================================================

class GPS_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.GPS_t) */ {
 public:
  inline GPS_t() : GPS_t(nullptr) {}
  virtual ~GPS_t();
  explicit constexpr GPS_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPS_t(const GPS_t& from);
  GPS_t(GPS_t&& from) noexcept
    : GPS_t() {
    *this = ::std::move(from);
  }

  inline GPS_t& operator=(const GPS_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPS_t& operator=(GPS_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPS_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPS_t* internal_default_instance() {
    return reinterpret_cast<const GPS_t*>(
               &_GPS_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GPS_t& a, GPS_t& b) {
    a.Swap(&b);
  }
  inline void Swap(GPS_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPS_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPS_t* New() const final {
    return CreateMaybeMessage<GPS_t>(nullptr);
  }

  GPS_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPS_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPS_t& from);
  void MergeFrom(const GPS_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPS_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.GPS_t";
  }
  protected:
  explicit GPS_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArf32PoseFieldNumber = 2,
    kU64TSCaptureFieldNumber = 1,
  };
  // repeated float arf32Pose = 2;
  int arf32pose_size() const;
  private:
  int _internal_arf32pose_size() const;
  public:
  void clear_arf32pose();
  private:
  float _internal_arf32pose(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32pose() const;
  void _internal_add_arf32pose(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32pose();
  public:
  float arf32pose(int index) const;
  void set_arf32pose(int index, float value);
  void add_arf32pose(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32pose() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32pose();

  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.GPS_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32pose_;
  mutable std::atomic<int> _arf32pose_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class IMU_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.IMU_t) */ {
 public:
  inline IMU_t() : IMU_t(nullptr) {}
  virtual ~IMU_t();
  explicit constexpr IMU_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMU_t(const IMU_t& from);
  IMU_t(IMU_t&& from) noexcept
    : IMU_t() {
    *this = ::std::move(from);
  }

  inline IMU_t& operator=(const IMU_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMU_t& operator=(IMU_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IMU_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMU_t* internal_default_instance() {
    return reinterpret_cast<const IMU_t*>(
               &_IMU_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMU_t& a, IMU_t& b) {
    a.Swap(&b);
  }
  inline void Swap(IMU_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMU_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IMU_t* New() const final {
    return CreateMaybeMessage<IMU_t>(nullptr);
  }

  IMU_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IMU_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IMU_t& from);
  void MergeFrom(const IMU_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMU_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.IMU_t";
  }
  protected:
  explicit IMU_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArf32DataFieldNumber = 2,
    kU64TSCaptureFieldNumber = 1,
  };
  // repeated float arf32Data = 2;
  int arf32data_size() const;
  private:
  int _internal_arf32data_size() const;
  public:
  void clear_arf32data();
  private:
  float _internal_arf32data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32data() const;
  void _internal_add_arf32data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32data();
  public:
  float arf32data(int index) const;
  void set_arf32data(int index, float value);
  void add_arf32data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32data();

  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.IMU_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32data_;
  mutable std::atomic<int> _arf32data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class Barometer_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.Barometer_t) */ {
 public:
  inline Barometer_t() : Barometer_t(nullptr) {}
  virtual ~Barometer_t();
  explicit constexpr Barometer_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Barometer_t(const Barometer_t& from);
  Barometer_t(Barometer_t&& from) noexcept
    : Barometer_t() {
    *this = ::std::move(from);
  }

  inline Barometer_t& operator=(const Barometer_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline Barometer_t& operator=(Barometer_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Barometer_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const Barometer_t* internal_default_instance() {
    return reinterpret_cast<const Barometer_t*>(
               &_Barometer_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Barometer_t& a, Barometer_t& b) {
    a.Swap(&b);
  }
  inline void Swap(Barometer_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Barometer_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Barometer_t* New() const final {
    return CreateMaybeMessage<Barometer_t>(nullptr);
  }

  Barometer_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Barometer_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Barometer_t& from);
  void MergeFrom(const Barometer_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Barometer_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.Barometer_t";
  }
  protected:
  explicit Barometer_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArf32DataFieldNumber = 2,
    kU64TSCaptureFieldNumber = 1,
  };
  // repeated float arf32Data = 2;
  int arf32data_size() const;
  private:
  int _internal_arf32data_size() const;
  public:
  void clear_arf32data();
  private:
  float _internal_arf32data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32data() const;
  void _internal_add_arf32data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32data();
  public:
  float arf32data(int index) const;
  void set_arf32data(int index, float value);
  void add_arf32data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32data();

  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.Barometer_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32data_;
  mutable std::atomic<int> _arf32data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class MCompass_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.MCompass_t) */ {
 public:
  inline MCompass_t() : MCompass_t(nullptr) {}
  virtual ~MCompass_t();
  explicit constexpr MCompass_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MCompass_t(const MCompass_t& from);
  MCompass_t(MCompass_t&& from) noexcept
    : MCompass_t() {
    *this = ::std::move(from);
  }

  inline MCompass_t& operator=(const MCompass_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline MCompass_t& operator=(MCompass_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MCompass_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const MCompass_t* internal_default_instance() {
    return reinterpret_cast<const MCompass_t*>(
               &_MCompass_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MCompass_t& a, MCompass_t& b) {
    a.Swap(&b);
  }
  inline void Swap(MCompass_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MCompass_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MCompass_t* New() const final {
    return CreateMaybeMessage<MCompass_t>(nullptr);
  }

  MCompass_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MCompass_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MCompass_t& from);
  void MergeFrom(const MCompass_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MCompass_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.MCompass_t";
  }
  protected:
  explicit MCompass_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArf32DataFieldNumber = 2,
    kU64TSCaptureFieldNumber = 1,
  };
  // repeated float arf32Data = 2;
  int arf32data_size() const;
  private:
  int _internal_arf32data_size() const;
  public:
  void clear_arf32data();
  private:
  float _internal_arf32data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32data() const;
  void _internal_add_arf32data(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32data();
  public:
  float arf32data(int index) const;
  void set_arf32data(int index, float value);
  void add_arf32data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32data();

  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.MCompass_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32data_;
  mutable std::atomic<int> _arf32data_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class GPSLocationInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.GPSLocationInfo_t) */ {
 public:
  inline GPSLocationInfo_t() : GPSLocationInfo_t(nullptr) {}
  virtual ~GPSLocationInfo_t();
  explicit constexpr GPSLocationInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GPSLocationInfo_t(const GPSLocationInfo_t& from);
  GPSLocationInfo_t(GPSLocationInfo_t&& from) noexcept
    : GPSLocationInfo_t() {
    *this = ::std::move(from);
  }

  inline GPSLocationInfo_t& operator=(const GPSLocationInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPSLocationInfo_t& operator=(GPSLocationInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPSLocationInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const GPSLocationInfo_t* internal_default_instance() {
    return reinterpret_cast<const GPSLocationInfo_t*>(
               &_GPSLocationInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GPSLocationInfo_t& a, GPSLocationInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(GPSLocationInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPSLocationInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPSLocationInfo_t* New() const final {
    return CreateMaybeMessage<GPSLocationInfo_t>(nullptr);
  }

  GPSLocationInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPSLocationInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPSLocationInfo_t& from);
  void MergeFrom(const GPSLocationInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPSLocationInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.GPSLocationInfo_t";
  }
  protected:
  explicit GPSLocationInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kF64LongitudeFieldNumber = 2,
    kF64LatitudeFieldNumber = 3,
    kF64AltitudeFieldNumber = 4,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double f64Longitude = 2;
  void clear_f64longitude();
  double f64longitude() const;
  void set_f64longitude(double value);
  private:
  double _internal_f64longitude() const;
  void _internal_set_f64longitude(double value);
  public:

  // double f64Latitude = 3;
  void clear_f64latitude();
  double f64latitude() const;
  void set_f64latitude(double value);
  private:
  double _internal_f64latitude() const;
  void _internal_set_f64latitude(double value);
  public:

  // double f64Altitude = 4;
  void clear_f64altitude();
  double f64altitude() const;
  void set_f64altitude(double value);
  private:
  double _internal_f64altitude() const;
  void _internal_set_f64altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.GPSLocationInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  double f64longitude_;
  double f64latitude_;
  double f64altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class AccelerometerInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.AccelerometerInfo_t) */ {
 public:
  inline AccelerometerInfo_t() : AccelerometerInfo_t(nullptr) {}
  virtual ~AccelerometerInfo_t();
  explicit constexpr AccelerometerInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccelerometerInfo_t(const AccelerometerInfo_t& from);
  AccelerometerInfo_t(AccelerometerInfo_t&& from) noexcept
    : AccelerometerInfo_t() {
    *this = ::std::move(from);
  }

  inline AccelerometerInfo_t& operator=(const AccelerometerInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerometerInfo_t& operator=(AccelerometerInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccelerometerInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccelerometerInfo_t* internal_default_instance() {
    return reinterpret_cast<const AccelerometerInfo_t*>(
               &_AccelerometerInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AccelerometerInfo_t& a, AccelerometerInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelerometerInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccelerometerInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccelerometerInfo_t* New() const final {
    return CreateMaybeMessage<AccelerometerInfo_t>(nullptr);
  }

  AccelerometerInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccelerometerInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccelerometerInfo_t& from);
  void MergeFrom(const AccelerometerInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelerometerInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.AccelerometerInfo_t";
  }
  protected:
  explicit AccelerometerInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kF32AxFieldNumber = 2,
    kF32AyFieldNumber = 3,
    kF32AzFieldNumber = 4,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float f32ax = 2;
  void clear_f32ax();
  float f32ax() const;
  void set_f32ax(float value);
  private:
  float _internal_f32ax() const;
  void _internal_set_f32ax(float value);
  public:

  // float f32ay = 3;
  void clear_f32ay();
  float f32ay() const;
  void set_f32ay(float value);
  private:
  float _internal_f32ay() const;
  void _internal_set_f32ay(float value);
  public:

  // float f32az = 4;
  void clear_f32az();
  float f32az() const;
  void set_f32az(float value);
  private:
  float _internal_f32az() const;
  void _internal_set_f32az(float value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.AccelerometerInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  float f32ax_;
  float f32ay_;
  float f32az_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class GyroscopeInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.GyroscopeInfo_t) */ {
 public:
  inline GyroscopeInfo_t() : GyroscopeInfo_t(nullptr) {}
  virtual ~GyroscopeInfo_t();
  explicit constexpr GyroscopeInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GyroscopeInfo_t(const GyroscopeInfo_t& from);
  GyroscopeInfo_t(GyroscopeInfo_t&& from) noexcept
    : GyroscopeInfo_t() {
    *this = ::std::move(from);
  }

  inline GyroscopeInfo_t& operator=(const GyroscopeInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline GyroscopeInfo_t& operator=(GyroscopeInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GyroscopeInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const GyroscopeInfo_t* internal_default_instance() {
    return reinterpret_cast<const GyroscopeInfo_t*>(
               &_GyroscopeInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GyroscopeInfo_t& a, GyroscopeInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(GyroscopeInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GyroscopeInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GyroscopeInfo_t* New() const final {
    return CreateMaybeMessage<GyroscopeInfo_t>(nullptr);
  }

  GyroscopeInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GyroscopeInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GyroscopeInfo_t& from);
  void MergeFrom(const GyroscopeInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GyroscopeInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.GyroscopeInfo_t";
  }
  protected:
  explicit GyroscopeInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kF32GxFieldNumber = 2,
    kF32GyFieldNumber = 3,
    kF32GzFieldNumber = 4,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float f32gx = 2;
  void clear_f32gx();
  float f32gx() const;
  void set_f32gx(float value);
  private:
  float _internal_f32gx() const;
  void _internal_set_f32gx(float value);
  public:

  // float f32gy = 3;
  void clear_f32gy();
  float f32gy() const;
  void set_f32gy(float value);
  private:
  float _internal_f32gy() const;
  void _internal_set_f32gy(float value);
  public:

  // float f32gz = 4;
  void clear_f32gz();
  float f32gz() const;
  void set_f32gz(float value);
  private:
  float _internal_f32gz() const;
  void _internal_set_f32gz(float value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.GyroscopeInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  float f32gx_;
  float f32gy_;
  float f32gz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class RotationVectorInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.RotationVectorInfo_t) */ {
 public:
  inline RotationVectorInfo_t() : RotationVectorInfo_t(nullptr) {}
  virtual ~RotationVectorInfo_t();
  explicit constexpr RotationVectorInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotationVectorInfo_t(const RotationVectorInfo_t& from);
  RotationVectorInfo_t(RotationVectorInfo_t&& from) noexcept
    : RotationVectorInfo_t() {
    *this = ::std::move(from);
  }

  inline RotationVectorInfo_t& operator=(const RotationVectorInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotationVectorInfo_t& operator=(RotationVectorInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RotationVectorInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotationVectorInfo_t* internal_default_instance() {
    return reinterpret_cast<const RotationVectorInfo_t*>(
               &_RotationVectorInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RotationVectorInfo_t& a, RotationVectorInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(RotationVectorInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotationVectorInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RotationVectorInfo_t* New() const final {
    return CreateMaybeMessage<RotationVectorInfo_t>(nullptr);
  }

  RotationVectorInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RotationVectorInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RotationVectorInfo_t& from);
  void MergeFrom(const RotationVectorInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RotationVectorInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.RotationVectorInfo_t";
  }
  protected:
  explicit RotationVectorInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kF32QxFieldNumber = 2,
    kF32QyFieldNumber = 3,
    kF32QzFieldNumber = 4,
    kF32QwFieldNumber = 5,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float f32qx = 2;
  void clear_f32qx();
  float f32qx() const;
  void set_f32qx(float value);
  private:
  float _internal_f32qx() const;
  void _internal_set_f32qx(float value);
  public:

  // float f32qy = 3;
  void clear_f32qy();
  float f32qy() const;
  void set_f32qy(float value);
  private:
  float _internal_f32qy() const;
  void _internal_set_f32qy(float value);
  public:

  // float f32qz = 4;
  void clear_f32qz();
  float f32qz() const;
  void set_f32qz(float value);
  private:
  float _internal_f32qz() const;
  void _internal_set_f32qz(float value);
  public:

  // float f32qw = 5;
  void clear_f32qw();
  float f32qw() const;
  void set_f32qw(float value);
  private:
  float _internal_f32qw() const;
  void _internal_set_f32qw(float value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.RotationVectorInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  float f32qx_;
  float f32qy_;
  float f32qz_;
  float f32qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class StepCounterInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.StepCounterInfo_t) */ {
 public:
  inline StepCounterInfo_t() : StepCounterInfo_t(nullptr) {}
  virtual ~StepCounterInfo_t();
  explicit constexpr StepCounterInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepCounterInfo_t(const StepCounterInfo_t& from);
  StepCounterInfo_t(StepCounterInfo_t&& from) noexcept
    : StepCounterInfo_t() {
    *this = ::std::move(from);
  }

  inline StepCounterInfo_t& operator=(const StepCounterInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepCounterInfo_t& operator=(StepCounterInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepCounterInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepCounterInfo_t* internal_default_instance() {
    return reinterpret_cast<const StepCounterInfo_t*>(
               &_StepCounterInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StepCounterInfo_t& a, StepCounterInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(StepCounterInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepCounterInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepCounterInfo_t* New() const final {
    return CreateMaybeMessage<StepCounterInfo_t>(nullptr);
  }

  StepCounterInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepCounterInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepCounterInfo_t& from);
  void MergeFrom(const StepCounterInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepCounterInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.StepCounterInfo_t";
  }
  protected:
  explicit StepCounterInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kU32StepCounterFieldNumber = 2,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 u32StepCounter = 2;
  void clear_u32stepcounter();
  ::PROTOBUF_NAMESPACE_ID::uint32 u32stepcounter() const;
  void set_u32stepcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_u32stepcounter() const;
  void _internal_set_u32stepcounter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.StepCounterInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  ::PROTOBUF_NAMESPACE_ID::uint32 u32stepcounter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class StepDetectorInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.StepDetectorInfo_t) */ {
 public:
  inline StepDetectorInfo_t() : StepDetectorInfo_t(nullptr) {}
  virtual ~StepDetectorInfo_t();
  explicit constexpr StepDetectorInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StepDetectorInfo_t(const StepDetectorInfo_t& from);
  StepDetectorInfo_t(StepDetectorInfo_t&& from) noexcept
    : StepDetectorInfo_t() {
    *this = ::std::move(from);
  }

  inline StepDetectorInfo_t& operator=(const StepDetectorInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline StepDetectorInfo_t& operator=(StepDetectorInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StepDetectorInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const StepDetectorInfo_t* internal_default_instance() {
    return reinterpret_cast<const StepDetectorInfo_t*>(
               &_StepDetectorInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StepDetectorInfo_t& a, StepDetectorInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(StepDetectorInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StepDetectorInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StepDetectorInfo_t* New() const final {
    return CreateMaybeMessage<StepDetectorInfo_t>(nullptr);
  }

  StepDetectorInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StepDetectorInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StepDetectorInfo_t& from);
  void MergeFrom(const StepDetectorInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StepDetectorInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.StepDetectorInfo_t";
  }
  protected:
  explicit StepDetectorInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kU32StepDetectorFieldNumber = 2,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool u32StepDetector = 2;
  void clear_u32stepdetector();
  bool u32stepdetector() const;
  void set_u32stepdetector(bool value);
  private:
  bool _internal_u32stepdetector() const;
  void _internal_set_u32stepdetector(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.StepDetectorInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  bool u32stepdetector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class MagneticFieldInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.MagneticFieldInfo_t) */ {
 public:
  inline MagneticFieldInfo_t() : MagneticFieldInfo_t(nullptr) {}
  virtual ~MagneticFieldInfo_t();
  explicit constexpr MagneticFieldInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MagneticFieldInfo_t(const MagneticFieldInfo_t& from);
  MagneticFieldInfo_t(MagneticFieldInfo_t&& from) noexcept
    : MagneticFieldInfo_t() {
    *this = ::std::move(from);
  }

  inline MagneticFieldInfo_t& operator=(const MagneticFieldInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline MagneticFieldInfo_t& operator=(MagneticFieldInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MagneticFieldInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const MagneticFieldInfo_t* internal_default_instance() {
    return reinterpret_cast<const MagneticFieldInfo_t*>(
               &_MagneticFieldInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MagneticFieldInfo_t& a, MagneticFieldInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(MagneticFieldInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MagneticFieldInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MagneticFieldInfo_t* New() const final {
    return CreateMaybeMessage<MagneticFieldInfo_t>(nullptr);
  }

  MagneticFieldInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MagneticFieldInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MagneticFieldInfo_t& from);
  void MergeFrom(const MagneticFieldInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MagneticFieldInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.MagneticFieldInfo_t";
  }
  protected:
  explicit MagneticFieldInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kF32MxFieldNumber = 2,
    kF32MyFieldNumber = 3,
    kF32MzFieldNumber = 4,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float f32mx = 2;
  void clear_f32mx();
  float f32mx() const;
  void set_f32mx(float value);
  private:
  float _internal_f32mx() const;
  void _internal_set_f32mx(float value);
  public:

  // float f32my = 3;
  void clear_f32my();
  float f32my() const;
  void set_f32my(float value);
  private:
  float _internal_f32my() const;
  void _internal_set_f32my(float value);
  public:

  // float f32mz = 4;
  void clear_f32mz();
  float f32mz() const;
  void set_f32mz(float value);
  private:
  float _internal_f32mz() const;
  void _internal_set_f32mz(float value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.MagneticFieldInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  float f32mx_;
  float f32my_;
  float f32mz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// -------------------------------------------------------------------

class PressureInfo_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpdata.sensors.PressureInfo_t) */ {
 public:
  inline PressureInfo_t() : PressureInfo_t(nullptr) {}
  virtual ~PressureInfo_t();
  explicit constexpr PressureInfo_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PressureInfo_t(const PressureInfo_t& from);
  PressureInfo_t(PressureInfo_t&& from) noexcept
    : PressureInfo_t() {
    *this = ::std::move(from);
  }

  inline PressureInfo_t& operator=(const PressureInfo_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline PressureInfo_t& operator=(PressureInfo_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PressureInfo_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const PressureInfo_t* internal_default_instance() {
    return reinterpret_cast<const PressureInfo_t*>(
               &_PressureInfo_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PressureInfo_t& a, PressureInfo_t& b) {
    a.Swap(&b);
  }
  inline void Swap(PressureInfo_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PressureInfo_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PressureInfo_t* New() const final {
    return CreateMaybeMessage<PressureInfo_t>(nullptr);
  }

  PressureInfo_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PressureInfo_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PressureInfo_t& from);
  void MergeFrom(const PressureInfo_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PressureInfo_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpdata.sensors.PressureInfo_t";
  }
  protected:
  explicit PressureInfo_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vp_5fsensors_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kU64TSCaptureFieldNumber = 1,
    kF32PressureFieldNumber = 2,
  };
  // uint64 u64TSCapture = 1;
  void clear_u64tscapture();
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture() const;
  void set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_u64tscapture() const;
  void _internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float f32Pressure = 2;
  void clear_f32pressure();
  float f32pressure() const;
  void set_f32pressure(float value);
  private:
  float _internal_f32pressure() const;
  void _internal_set_f32pressure(float value);
  public:

  // @@protoc_insertion_point(class_scope:vpdata.sensors.PressureInfo_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 u64tscapture_;
  float f32pressure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vp_5fsensors_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GPS_t

// uint64 u64TSCapture = 1;
inline void GPS_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPS_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPS_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GPS_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void GPS_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void GPS_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GPS_t.u64TSCapture)
}

// repeated float arf32Pose = 2;
inline int GPS_t::_internal_arf32pose_size() const {
  return arf32pose_.size();
}
inline int GPS_t::arf32pose_size() const {
  return _internal_arf32pose_size();
}
inline void GPS_t::clear_arf32pose() {
  arf32pose_.Clear();
}
inline float GPS_t::_internal_arf32pose(int index) const {
  return arf32pose_.Get(index);
}
inline float GPS_t::arf32pose(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GPS_t.arf32Pose)
  return _internal_arf32pose(index);
}
inline void GPS_t::set_arf32pose(int index, float value) {
  arf32pose_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GPS_t.arf32Pose)
}
inline void GPS_t::_internal_add_arf32pose(float value) {
  arf32pose_.Add(value);
}
inline void GPS_t::add_arf32pose(float value) {
  _internal_add_arf32pose(value);
  // @@protoc_insertion_point(field_add:vpdata.sensors.GPS_t.arf32Pose)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GPS_t::_internal_arf32pose() const {
  return arf32pose_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GPS_t::arf32pose() const {
  // @@protoc_insertion_point(field_list:vpdata.sensors.GPS_t.arf32Pose)
  return _internal_arf32pose();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GPS_t::_internal_mutable_arf32pose() {
  return &arf32pose_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GPS_t::mutable_arf32pose() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.sensors.GPS_t.arf32Pose)
  return _internal_mutable_arf32pose();
}

// -------------------------------------------------------------------

// IMU_t

// uint64 u64TSCapture = 1;
inline void IMU_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IMU_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 IMU_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.IMU_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void IMU_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void IMU_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.IMU_t.u64TSCapture)
}

// repeated float arf32Data = 2;
inline int IMU_t::_internal_arf32data_size() const {
  return arf32data_.size();
}
inline int IMU_t::arf32data_size() const {
  return _internal_arf32data_size();
}
inline void IMU_t::clear_arf32data() {
  arf32data_.Clear();
}
inline float IMU_t::_internal_arf32data(int index) const {
  return arf32data_.Get(index);
}
inline float IMU_t::arf32data(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.IMU_t.arf32Data)
  return _internal_arf32data(index);
}
inline void IMU_t::set_arf32data(int index, float value) {
  arf32data_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.IMU_t.arf32Data)
}
inline void IMU_t::_internal_add_arf32data(float value) {
  arf32data_.Add(value);
}
inline void IMU_t::add_arf32data(float value) {
  _internal_add_arf32data(value);
  // @@protoc_insertion_point(field_add:vpdata.sensors.IMU_t.arf32Data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IMU_t::_internal_arf32data() const {
  return arf32data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
IMU_t::arf32data() const {
  // @@protoc_insertion_point(field_list:vpdata.sensors.IMU_t.arf32Data)
  return _internal_arf32data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IMU_t::_internal_mutable_arf32data() {
  return &arf32data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
IMU_t::mutable_arf32data() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.sensors.IMU_t.arf32Data)
  return _internal_mutable_arf32data();
}

// -------------------------------------------------------------------

// Barometer_t

// uint64 u64TSCapture = 1;
inline void Barometer_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Barometer_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Barometer_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.Barometer_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void Barometer_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void Barometer_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.Barometer_t.u64TSCapture)
}

// repeated float arf32Data = 2;
inline int Barometer_t::_internal_arf32data_size() const {
  return arf32data_.size();
}
inline int Barometer_t::arf32data_size() const {
  return _internal_arf32data_size();
}
inline void Barometer_t::clear_arf32data() {
  arf32data_.Clear();
}
inline float Barometer_t::_internal_arf32data(int index) const {
  return arf32data_.Get(index);
}
inline float Barometer_t::arf32data(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.Barometer_t.arf32Data)
  return _internal_arf32data(index);
}
inline void Barometer_t::set_arf32data(int index, float value) {
  arf32data_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.Barometer_t.arf32Data)
}
inline void Barometer_t::_internal_add_arf32data(float value) {
  arf32data_.Add(value);
}
inline void Barometer_t::add_arf32data(float value) {
  _internal_add_arf32data(value);
  // @@protoc_insertion_point(field_add:vpdata.sensors.Barometer_t.arf32Data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Barometer_t::_internal_arf32data() const {
  return arf32data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Barometer_t::arf32data() const {
  // @@protoc_insertion_point(field_list:vpdata.sensors.Barometer_t.arf32Data)
  return _internal_arf32data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Barometer_t::_internal_mutable_arf32data() {
  return &arf32data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Barometer_t::mutable_arf32data() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.sensors.Barometer_t.arf32Data)
  return _internal_mutable_arf32data();
}

// -------------------------------------------------------------------

// MCompass_t

// uint64 u64TSCapture = 1;
inline void MCompass_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MCompass_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MCompass_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.MCompass_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void MCompass_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void MCompass_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.MCompass_t.u64TSCapture)
}

// repeated float arf32Data = 2;
inline int MCompass_t::_internal_arf32data_size() const {
  return arf32data_.size();
}
inline int MCompass_t::arf32data_size() const {
  return _internal_arf32data_size();
}
inline void MCompass_t::clear_arf32data() {
  arf32data_.Clear();
}
inline float MCompass_t::_internal_arf32data(int index) const {
  return arf32data_.Get(index);
}
inline float MCompass_t::arf32data(int index) const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.MCompass_t.arf32Data)
  return _internal_arf32data(index);
}
inline void MCompass_t::set_arf32data(int index, float value) {
  arf32data_.Set(index, value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.MCompass_t.arf32Data)
}
inline void MCompass_t::_internal_add_arf32data(float value) {
  arf32data_.Add(value);
}
inline void MCompass_t::add_arf32data(float value) {
  _internal_add_arf32data(value);
  // @@protoc_insertion_point(field_add:vpdata.sensors.MCompass_t.arf32Data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MCompass_t::_internal_arf32data() const {
  return arf32data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MCompass_t::arf32data() const {
  // @@protoc_insertion_point(field_list:vpdata.sensors.MCompass_t.arf32Data)
  return _internal_arf32data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MCompass_t::_internal_mutable_arf32data() {
  return &arf32data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MCompass_t::mutable_arf32data() {
  // @@protoc_insertion_point(field_mutable_list:vpdata.sensors.MCompass_t.arf32Data)
  return _internal_mutable_arf32data();
}

// -------------------------------------------------------------------

// GPSLocationInfo_t

// uint64 u64TSCapture = 1;
inline void GPSLocationInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPSLocationInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GPSLocationInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GPSLocationInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void GPSLocationInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void GPSLocationInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GPSLocationInfo_t.u64TSCapture)
}

// double f64Longitude = 2;
inline void GPSLocationInfo_t::clear_f64longitude() {
  f64longitude_ = 0;
}
inline double GPSLocationInfo_t::_internal_f64longitude() const {
  return f64longitude_;
}
inline double GPSLocationInfo_t::f64longitude() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GPSLocationInfo_t.f64Longitude)
  return _internal_f64longitude();
}
inline void GPSLocationInfo_t::_internal_set_f64longitude(double value) {
  
  f64longitude_ = value;
}
inline void GPSLocationInfo_t::set_f64longitude(double value) {
  _internal_set_f64longitude(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GPSLocationInfo_t.f64Longitude)
}

// double f64Latitude = 3;
inline void GPSLocationInfo_t::clear_f64latitude() {
  f64latitude_ = 0;
}
inline double GPSLocationInfo_t::_internal_f64latitude() const {
  return f64latitude_;
}
inline double GPSLocationInfo_t::f64latitude() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GPSLocationInfo_t.f64Latitude)
  return _internal_f64latitude();
}
inline void GPSLocationInfo_t::_internal_set_f64latitude(double value) {
  
  f64latitude_ = value;
}
inline void GPSLocationInfo_t::set_f64latitude(double value) {
  _internal_set_f64latitude(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GPSLocationInfo_t.f64Latitude)
}

// double f64Altitude = 4;
inline void GPSLocationInfo_t::clear_f64altitude() {
  f64altitude_ = 0;
}
inline double GPSLocationInfo_t::_internal_f64altitude() const {
  return f64altitude_;
}
inline double GPSLocationInfo_t::f64altitude() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GPSLocationInfo_t.f64Altitude)
  return _internal_f64altitude();
}
inline void GPSLocationInfo_t::_internal_set_f64altitude(double value) {
  
  f64altitude_ = value;
}
inline void GPSLocationInfo_t::set_f64altitude(double value) {
  _internal_set_f64altitude(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GPSLocationInfo_t.f64Altitude)
}

// -------------------------------------------------------------------

// AccelerometerInfo_t

// uint64 u64TSCapture = 1;
inline void AccelerometerInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccelerometerInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AccelerometerInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.AccelerometerInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void AccelerometerInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void AccelerometerInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.AccelerometerInfo_t.u64TSCapture)
}

// float f32ax = 2;
inline void AccelerometerInfo_t::clear_f32ax() {
  f32ax_ = 0;
}
inline float AccelerometerInfo_t::_internal_f32ax() const {
  return f32ax_;
}
inline float AccelerometerInfo_t::f32ax() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.AccelerometerInfo_t.f32ax)
  return _internal_f32ax();
}
inline void AccelerometerInfo_t::_internal_set_f32ax(float value) {
  
  f32ax_ = value;
}
inline void AccelerometerInfo_t::set_f32ax(float value) {
  _internal_set_f32ax(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.AccelerometerInfo_t.f32ax)
}

// float f32ay = 3;
inline void AccelerometerInfo_t::clear_f32ay() {
  f32ay_ = 0;
}
inline float AccelerometerInfo_t::_internal_f32ay() const {
  return f32ay_;
}
inline float AccelerometerInfo_t::f32ay() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.AccelerometerInfo_t.f32ay)
  return _internal_f32ay();
}
inline void AccelerometerInfo_t::_internal_set_f32ay(float value) {
  
  f32ay_ = value;
}
inline void AccelerometerInfo_t::set_f32ay(float value) {
  _internal_set_f32ay(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.AccelerometerInfo_t.f32ay)
}

// float f32az = 4;
inline void AccelerometerInfo_t::clear_f32az() {
  f32az_ = 0;
}
inline float AccelerometerInfo_t::_internal_f32az() const {
  return f32az_;
}
inline float AccelerometerInfo_t::f32az() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.AccelerometerInfo_t.f32az)
  return _internal_f32az();
}
inline void AccelerometerInfo_t::_internal_set_f32az(float value) {
  
  f32az_ = value;
}
inline void AccelerometerInfo_t::set_f32az(float value) {
  _internal_set_f32az(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.AccelerometerInfo_t.f32az)
}

// -------------------------------------------------------------------

// GyroscopeInfo_t

// uint64 u64TSCapture = 1;
inline void GyroscopeInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GyroscopeInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GyroscopeInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GyroscopeInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void GyroscopeInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void GyroscopeInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GyroscopeInfo_t.u64TSCapture)
}

// float f32gx = 2;
inline void GyroscopeInfo_t::clear_f32gx() {
  f32gx_ = 0;
}
inline float GyroscopeInfo_t::_internal_f32gx() const {
  return f32gx_;
}
inline float GyroscopeInfo_t::f32gx() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GyroscopeInfo_t.f32gx)
  return _internal_f32gx();
}
inline void GyroscopeInfo_t::_internal_set_f32gx(float value) {
  
  f32gx_ = value;
}
inline void GyroscopeInfo_t::set_f32gx(float value) {
  _internal_set_f32gx(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GyroscopeInfo_t.f32gx)
}

// float f32gy = 3;
inline void GyroscopeInfo_t::clear_f32gy() {
  f32gy_ = 0;
}
inline float GyroscopeInfo_t::_internal_f32gy() const {
  return f32gy_;
}
inline float GyroscopeInfo_t::f32gy() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GyroscopeInfo_t.f32gy)
  return _internal_f32gy();
}
inline void GyroscopeInfo_t::_internal_set_f32gy(float value) {
  
  f32gy_ = value;
}
inline void GyroscopeInfo_t::set_f32gy(float value) {
  _internal_set_f32gy(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GyroscopeInfo_t.f32gy)
}

// float f32gz = 4;
inline void GyroscopeInfo_t::clear_f32gz() {
  f32gz_ = 0;
}
inline float GyroscopeInfo_t::_internal_f32gz() const {
  return f32gz_;
}
inline float GyroscopeInfo_t::f32gz() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.GyroscopeInfo_t.f32gz)
  return _internal_f32gz();
}
inline void GyroscopeInfo_t::_internal_set_f32gz(float value) {
  
  f32gz_ = value;
}
inline void GyroscopeInfo_t::set_f32gz(float value) {
  _internal_set_f32gz(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.GyroscopeInfo_t.f32gz)
}

// -------------------------------------------------------------------

// RotationVectorInfo_t

// uint64 u64TSCapture = 1;
inline void RotationVectorInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RotationVectorInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RotationVectorInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.RotationVectorInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void RotationVectorInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void RotationVectorInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.RotationVectorInfo_t.u64TSCapture)
}

// float f32qx = 2;
inline void RotationVectorInfo_t::clear_f32qx() {
  f32qx_ = 0;
}
inline float RotationVectorInfo_t::_internal_f32qx() const {
  return f32qx_;
}
inline float RotationVectorInfo_t::f32qx() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.RotationVectorInfo_t.f32qx)
  return _internal_f32qx();
}
inline void RotationVectorInfo_t::_internal_set_f32qx(float value) {
  
  f32qx_ = value;
}
inline void RotationVectorInfo_t::set_f32qx(float value) {
  _internal_set_f32qx(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.RotationVectorInfo_t.f32qx)
}

// float f32qy = 3;
inline void RotationVectorInfo_t::clear_f32qy() {
  f32qy_ = 0;
}
inline float RotationVectorInfo_t::_internal_f32qy() const {
  return f32qy_;
}
inline float RotationVectorInfo_t::f32qy() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.RotationVectorInfo_t.f32qy)
  return _internal_f32qy();
}
inline void RotationVectorInfo_t::_internal_set_f32qy(float value) {
  
  f32qy_ = value;
}
inline void RotationVectorInfo_t::set_f32qy(float value) {
  _internal_set_f32qy(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.RotationVectorInfo_t.f32qy)
}

// float f32qz = 4;
inline void RotationVectorInfo_t::clear_f32qz() {
  f32qz_ = 0;
}
inline float RotationVectorInfo_t::_internal_f32qz() const {
  return f32qz_;
}
inline float RotationVectorInfo_t::f32qz() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.RotationVectorInfo_t.f32qz)
  return _internal_f32qz();
}
inline void RotationVectorInfo_t::_internal_set_f32qz(float value) {
  
  f32qz_ = value;
}
inline void RotationVectorInfo_t::set_f32qz(float value) {
  _internal_set_f32qz(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.RotationVectorInfo_t.f32qz)
}

// float f32qw = 5;
inline void RotationVectorInfo_t::clear_f32qw() {
  f32qw_ = 0;
}
inline float RotationVectorInfo_t::_internal_f32qw() const {
  return f32qw_;
}
inline float RotationVectorInfo_t::f32qw() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.RotationVectorInfo_t.f32qw)
  return _internal_f32qw();
}
inline void RotationVectorInfo_t::_internal_set_f32qw(float value) {
  
  f32qw_ = value;
}
inline void RotationVectorInfo_t::set_f32qw(float value) {
  _internal_set_f32qw(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.RotationVectorInfo_t.f32qw)
}

// -------------------------------------------------------------------

// StepCounterInfo_t

// uint64 u64TSCapture = 1;
inline void StepCounterInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StepCounterInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StepCounterInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.StepCounterInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void StepCounterInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void StepCounterInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.StepCounterInfo_t.u64TSCapture)
}

// uint32 u32StepCounter = 2;
inline void StepCounterInfo_t::clear_u32stepcounter() {
  u32stepcounter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StepCounterInfo_t::_internal_u32stepcounter() const {
  return u32stepcounter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StepCounterInfo_t::u32stepcounter() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.StepCounterInfo_t.u32StepCounter)
  return _internal_u32stepcounter();
}
inline void StepCounterInfo_t::_internal_set_u32stepcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  u32stepcounter_ = value;
}
inline void StepCounterInfo_t::set_u32stepcounter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_u32stepcounter(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.StepCounterInfo_t.u32StepCounter)
}

// -------------------------------------------------------------------

// StepDetectorInfo_t

// uint64 u64TSCapture = 1;
inline void StepDetectorInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StepDetectorInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 StepDetectorInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.StepDetectorInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void StepDetectorInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void StepDetectorInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.StepDetectorInfo_t.u64TSCapture)
}

// bool u32StepDetector = 2;
inline void StepDetectorInfo_t::clear_u32stepdetector() {
  u32stepdetector_ = false;
}
inline bool StepDetectorInfo_t::_internal_u32stepdetector() const {
  return u32stepdetector_;
}
inline bool StepDetectorInfo_t::u32stepdetector() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.StepDetectorInfo_t.u32StepDetector)
  return _internal_u32stepdetector();
}
inline void StepDetectorInfo_t::_internal_set_u32stepdetector(bool value) {
  
  u32stepdetector_ = value;
}
inline void StepDetectorInfo_t::set_u32stepdetector(bool value) {
  _internal_set_u32stepdetector(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.StepDetectorInfo_t.u32StepDetector)
}

// -------------------------------------------------------------------

// MagneticFieldInfo_t

// uint64 u64TSCapture = 1;
inline void MagneticFieldInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MagneticFieldInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MagneticFieldInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.MagneticFieldInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void MagneticFieldInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void MagneticFieldInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.MagneticFieldInfo_t.u64TSCapture)
}

// float f32mx = 2;
inline void MagneticFieldInfo_t::clear_f32mx() {
  f32mx_ = 0;
}
inline float MagneticFieldInfo_t::_internal_f32mx() const {
  return f32mx_;
}
inline float MagneticFieldInfo_t::f32mx() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.MagneticFieldInfo_t.f32mx)
  return _internal_f32mx();
}
inline void MagneticFieldInfo_t::_internal_set_f32mx(float value) {
  
  f32mx_ = value;
}
inline void MagneticFieldInfo_t::set_f32mx(float value) {
  _internal_set_f32mx(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.MagneticFieldInfo_t.f32mx)
}

// float f32my = 3;
inline void MagneticFieldInfo_t::clear_f32my() {
  f32my_ = 0;
}
inline float MagneticFieldInfo_t::_internal_f32my() const {
  return f32my_;
}
inline float MagneticFieldInfo_t::f32my() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.MagneticFieldInfo_t.f32my)
  return _internal_f32my();
}
inline void MagneticFieldInfo_t::_internal_set_f32my(float value) {
  
  f32my_ = value;
}
inline void MagneticFieldInfo_t::set_f32my(float value) {
  _internal_set_f32my(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.MagneticFieldInfo_t.f32my)
}

// float f32mz = 4;
inline void MagneticFieldInfo_t::clear_f32mz() {
  f32mz_ = 0;
}
inline float MagneticFieldInfo_t::_internal_f32mz() const {
  return f32mz_;
}
inline float MagneticFieldInfo_t::f32mz() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.MagneticFieldInfo_t.f32mz)
  return _internal_f32mz();
}
inline void MagneticFieldInfo_t::_internal_set_f32mz(float value) {
  
  f32mz_ = value;
}
inline void MagneticFieldInfo_t::set_f32mz(float value) {
  _internal_set_f32mz(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.MagneticFieldInfo_t.f32mz)
}

// -------------------------------------------------------------------

// PressureInfo_t

// uint64 u64TSCapture = 1;
inline void PressureInfo_t::clear_u64tscapture() {
  u64tscapture_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PressureInfo_t::_internal_u64tscapture() const {
  return u64tscapture_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PressureInfo_t::u64tscapture() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.PressureInfo_t.u64TSCapture)
  return _internal_u64tscapture();
}
inline void PressureInfo_t::_internal_set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  u64tscapture_ = value;
}
inline void PressureInfo_t::set_u64tscapture(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_u64tscapture(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.PressureInfo_t.u64TSCapture)
}

// float f32Pressure = 2;
inline void PressureInfo_t::clear_f32pressure() {
  f32pressure_ = 0;
}
inline float PressureInfo_t::_internal_f32pressure() const {
  return f32pressure_;
}
inline float PressureInfo_t::f32pressure() const {
  // @@protoc_insertion_point(field_get:vpdata.sensors.PressureInfo_t.f32Pressure)
  return _internal_f32pressure();
}
inline void PressureInfo_t::_internal_set_f32pressure(float value) {
  
  f32pressure_ = value;
}
inline void PressureInfo_t::set_f32pressure(float value) {
  _internal_set_f32pressure(value);
  // @@protoc_insertion_point(field_set:vpdata.sensors.PressureInfo_t.f32Pressure)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sensors
}  // namespace vpdata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vp_5fsensors_2eproto
