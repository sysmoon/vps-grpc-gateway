// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ltdb_qr.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ltdb_5fqr_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ltdb_5fqr_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "vgeodb_common.pb.h"
#include "placevector.pb.h"
#include "localfeature.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ltdb_5fqr_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ltdb_5fqr_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ltdb_5fqr_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_ltdb_5fqr_2eproto_metadata_getter(int index);
namespace VgeoDB {
namespace QR {
class LocalFeatureQuery;
struct LocalFeatureQueryDefaultTypeInternal;
extern LocalFeatureQueryDefaultTypeInternal _LocalFeatureQuery_default_instance_;
class LocalFeatureReturn;
struct LocalFeatureReturnDefaultTypeInternal;
extern LocalFeatureReturnDefaultTypeInternal _LocalFeatureReturn_default_instance_;
class LocalFeatureReturnUnit;
struct LocalFeatureReturnUnitDefaultTypeInternal;
extern LocalFeatureReturnUnitDefaultTypeInternal _LocalFeatureReturnUnit_default_instance_;
class LocationQueryType_t;
struct LocationQueryType_tDefaultTypeInternal;
extern LocationQueryType_tDefaultTypeInternal _LocationQueryType_t_default_instance_;
class PlaceVectorQuery;
struct PlaceVectorQueryDefaultTypeInternal;
extern PlaceVectorQueryDefaultTypeInternal _PlaceVectorQuery_default_instance_;
class PlaceVectorReturn;
struct PlaceVectorReturnDefaultTypeInternal;
extern PlaceVectorReturnDefaultTypeInternal _PlaceVectorReturn_default_instance_;
class QueryType_t;
struct QueryType_tDefaultTypeInternal;
extern QueryType_tDefaultTypeInternal _QueryType_t_default_instance_;
}  // namespace QR
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> ::VgeoDB::QR::LocalFeatureQuery* Arena::CreateMaybeMessage<::VgeoDB::QR::LocalFeatureQuery>(Arena*);
template<> ::VgeoDB::QR::LocalFeatureReturn* Arena::CreateMaybeMessage<::VgeoDB::QR::LocalFeatureReturn>(Arena*);
template<> ::VgeoDB::QR::LocalFeatureReturnUnit* Arena::CreateMaybeMessage<::VgeoDB::QR::LocalFeatureReturnUnit>(Arena*);
template<> ::VgeoDB::QR::LocationQueryType_t* Arena::CreateMaybeMessage<::VgeoDB::QR::LocationQueryType_t>(Arena*);
template<> ::VgeoDB::QR::PlaceVectorQuery* Arena::CreateMaybeMessage<::VgeoDB::QR::PlaceVectorQuery>(Arena*);
template<> ::VgeoDB::QR::PlaceVectorReturn* Arena::CreateMaybeMessage<::VgeoDB::QR::PlaceVectorReturn>(Arena*);
template<> ::VgeoDB::QR::QueryType_t* Arena::CreateMaybeMessage<::VgeoDB::QR::QueryType_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VgeoDB {
namespace QR {

// ===================================================================

class LocationQueryType_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.LocationQueryType_t) */ {
 public:
  inline LocationQueryType_t() : LocationQueryType_t(nullptr) {}
  virtual ~LocationQueryType_t();
  explicit constexpr LocationQueryType_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocationQueryType_t(const LocationQueryType_t& from);
  LocationQueryType_t(LocationQueryType_t&& from) noexcept
    : LocationQueryType_t() {
    *this = ::std::move(from);
  }

  inline LocationQueryType_t& operator=(const LocationQueryType_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationQueryType_t& operator=(LocationQueryType_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationQueryType_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocationQueryType_t* internal_default_instance() {
    return reinterpret_cast<const LocationQueryType_t*>(
               &_LocationQueryType_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocationQueryType_t& a, LocationQueryType_t& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationQueryType_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationQueryType_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationQueryType_t* New() const final {
    return CreateMaybeMessage<LocationQueryType_t>(nullptr);
  }

  LocationQueryType_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationQueryType_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationQueryType_t& from);
  void MergeFrom(const LocationQueryType_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationQueryType_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.LocationQueryType_t";
  }
  protected:
  explicit LocationQueryType_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStLocationFieldNumber = 1,
    kFRadiusFieldNumber = 2,
  };
  // .VgeoDB.common.XYZ64_t stLocation = 1;
  bool has_stlocation() const;
  private:
  bool _internal_has_stlocation() const;
  public:
  void clear_stlocation();
  const ::VgeoDB::common::XYZ64_t& stlocation() const;
  ::VgeoDB::common::XYZ64_t* release_stlocation();
  ::VgeoDB::common::XYZ64_t* mutable_stlocation();
  void set_allocated_stlocation(::VgeoDB::common::XYZ64_t* stlocation);
  private:
  const ::VgeoDB::common::XYZ64_t& _internal_stlocation() const;
  ::VgeoDB::common::XYZ64_t* _internal_mutable_stlocation();
  public:
  void unsafe_arena_set_allocated_stlocation(
      ::VgeoDB::common::XYZ64_t* stlocation);
  ::VgeoDB::common::XYZ64_t* unsafe_arena_release_stlocation();

  // float fRadius = 2;
  void clear_fradius();
  float fradius() const;
  void set_fradius(float value);
  private:
  float _internal_fradius() const;
  void _internal_set_fradius(float value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.QR.LocationQueryType_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::VgeoDB::common::XYZ64_t* stlocation_;
  float fradius_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// -------------------------------------------------------------------

class QueryType_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.QueryType_t) */ {
 public:
  inline QueryType_t() : QueryType_t(nullptr) {}
  virtual ~QueryType_t();
  explicit constexpr QueryType_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryType_t(const QueryType_t& from);
  QueryType_t(QueryType_t&& from) noexcept
    : QueryType_t() {
    *this = ::std::move(from);
  }

  inline QueryType_t& operator=(const QueryType_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryType_t& operator=(QueryType_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryType_t& default_instance() {
    return *internal_default_instance();
  }
  enum UQueryTypeCase {
    kStLocation = 1,
    kUn64UniqueIDList = 2,
    kUn64GroupIDList = 3,
    UQUERYTYPE_NOT_SET = 0,
  };

  static inline const QueryType_t* internal_default_instance() {
    return reinterpret_cast<const QueryType_t*>(
               &_QueryType_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueryType_t& a, QueryType_t& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryType_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryType_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryType_t* New() const final {
    return CreateMaybeMessage<QueryType_t>(nullptr);
  }

  QueryType_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryType_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryType_t& from);
  void MergeFrom(const QueryType_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryType_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.QueryType_t";
  }
  protected:
  explicit QueryType_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStLocationFieldNumber = 1,
    kUn64UniqueIDListFieldNumber = 2,
    kUn64GroupIDListFieldNumber = 3,
  };
  // .VgeoDB.QR.LocationQueryType_t stLocation = 1;
  bool has_stlocation() const;
  private:
  bool _internal_has_stlocation() const;
  public:
  void clear_stlocation();
  const ::VgeoDB::QR::LocationQueryType_t& stlocation() const;
  ::VgeoDB::QR::LocationQueryType_t* release_stlocation();
  ::VgeoDB::QR::LocationQueryType_t* mutable_stlocation();
  void set_allocated_stlocation(::VgeoDB::QR::LocationQueryType_t* stlocation);
  private:
  const ::VgeoDB::QR::LocationQueryType_t& _internal_stlocation() const;
  ::VgeoDB::QR::LocationQueryType_t* _internal_mutable_stlocation();
  public:
  void unsafe_arena_set_allocated_stlocation(
      ::VgeoDB::QR::LocationQueryType_t* stlocation);
  ::VgeoDB::QR::LocationQueryType_t* unsafe_arena_release_stlocation();

  // uint64 un64UniqueIDList = 2;
  bool has_un64uniqueidlist() const;
  private:
  bool _internal_has_un64uniqueidlist() const;
  public:
  void clear_un64uniqueidlist();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64uniqueidlist() const;
  void set_un64uniqueidlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64uniqueidlist() const;
  void _internal_set_un64uniqueidlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64GroupIDList = 3;
  bool has_un64groupidlist() const;
  private:
  bool _internal_has_un64groupidlist() const;
  public:
  void clear_un64groupidlist();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64groupidlist() const;
  void set_un64groupidlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64groupidlist() const;
  void _internal_set_un64groupidlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  void clear_uQueryType();
  UQueryTypeCase uQueryType_case() const;
  // @@protoc_insertion_point(class_scope:VgeoDB.QR.QueryType_t)
 private:
  class _Internal;
  void set_has_stlocation();
  void set_has_un64uniqueidlist();
  void set_has_un64groupidlist();

  inline bool has_uQueryType() const;
  inline void clear_has_uQueryType();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UQueryTypeUnion {
    constexpr UQueryTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::VgeoDB::QR::LocationQueryType_t* stlocation_;
    ::PROTOBUF_NAMESPACE_ID::uint64 un64uniqueidlist_;
    ::PROTOBUF_NAMESPACE_ID::uint64 un64groupidlist_;
  } uQueryType_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// -------------------------------------------------------------------

class PlaceVectorQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.PlaceVectorQuery) */ {
 public:
  inline PlaceVectorQuery() : PlaceVectorQuery(nullptr) {}
  virtual ~PlaceVectorQuery();
  explicit constexpr PlaceVectorQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVectorQuery(const PlaceVectorQuery& from);
  PlaceVectorQuery(PlaceVectorQuery&& from) noexcept
    : PlaceVectorQuery() {
    *this = ::std::move(from);
  }

  inline PlaceVectorQuery& operator=(const PlaceVectorQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVectorQuery& operator=(PlaceVectorQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVectorQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceVectorQuery* internal_default_instance() {
    return reinterpret_cast<const PlaceVectorQuery*>(
               &_PlaceVectorQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlaceVectorQuery& a, PlaceVectorQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVectorQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVectorQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVectorQuery* New() const final {
    return CreateMaybeMessage<PlaceVectorQuery>(nullptr);
  }

  PlaceVectorQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVectorQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVectorQuery& from);
  void MergeFrom(const PlaceVectorQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVectorQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.PlaceVectorQuery";
  }
  protected:
  explicit PlaceVectorQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStQueryTypeFieldNumber = 1,
    kUDescriptorFieldNumber = 2,
    kNNearestMaxFieldNumber = 4,
    kNDistanceTypeFieldNumber = 5,
  };
  // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
  int stquerytype_size() const;
  private:
  int _internal_stquerytype_size() const;
  public:
  void clear_stquerytype();
  ::VgeoDB::QR::QueryType_t* mutable_stquerytype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >*
      mutable_stquerytype();
  private:
  const ::VgeoDB::QR::QueryType_t& _internal_stquerytype(int index) const;
  ::VgeoDB::QR::QueryType_t* _internal_add_stquerytype();
  public:
  const ::VgeoDB::QR::QueryType_t& stquerytype(int index) const;
  ::VgeoDB::QR::QueryType_t* add_stquerytype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >&
      stquerytype() const;

  // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
  bool has_udescriptor() const;
  private:
  bool _internal_has_udescriptor() const;
  public:
  void clear_udescriptor();
  const ::VgeoDB::PlaceVectorDesc& udescriptor() const;
  ::VgeoDB::PlaceVectorDesc* release_udescriptor();
  ::VgeoDB::PlaceVectorDesc* mutable_udescriptor();
  void set_allocated_udescriptor(::VgeoDB::PlaceVectorDesc* udescriptor);
  private:
  const ::VgeoDB::PlaceVectorDesc& _internal_udescriptor() const;
  ::VgeoDB::PlaceVectorDesc* _internal_mutable_udescriptor();
  public:
  void unsafe_arena_set_allocated_udescriptor(
      ::VgeoDB::PlaceVectorDesc* udescriptor);
  ::VgeoDB::PlaceVectorDesc* unsafe_arena_release_udescriptor();

  // int32 nNearestMax = 4;
  void clear_nnearestmax();
  ::PROTOBUF_NAMESPACE_ID::int32 nnearestmax() const;
  void set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nnearestmax() const;
  void _internal_set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nDistanceType = 5;
  void clear_ndistancetype();
  ::PROTOBUF_NAMESPACE_ID::int32 ndistancetype() const;
  void set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ndistancetype() const;
  void _internal_set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.QR.PlaceVectorQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t > stquerytype_;
  ::VgeoDB::PlaceVectorDesc* udescriptor_;
  ::PROTOBUF_NAMESPACE_ID::int32 nnearestmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 ndistancetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// -------------------------------------------------------------------

class PlaceVectorReturn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.PlaceVectorReturn) */ {
 public:
  inline PlaceVectorReturn() : PlaceVectorReturn(nullptr) {}
  virtual ~PlaceVectorReturn();
  explicit constexpr PlaceVectorReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVectorReturn(const PlaceVectorReturn& from);
  PlaceVectorReturn(PlaceVectorReturn&& from) noexcept
    : PlaceVectorReturn() {
    *this = ::std::move(from);
  }

  inline PlaceVectorReturn& operator=(const PlaceVectorReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVectorReturn& operator=(PlaceVectorReturn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVectorReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceVectorReturn* internal_default_instance() {
    return reinterpret_cast<const PlaceVectorReturn*>(
               &_PlaceVectorReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlaceVectorReturn& a, PlaceVectorReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVectorReturn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVectorReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVectorReturn* New() const final {
    return CreateMaybeMessage<PlaceVectorReturn>(nullptr);
  }

  PlaceVectorReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVectorReturn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVectorReturn& from);
  void MergeFrom(const PlaceVectorReturn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVectorReturn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.PlaceVectorReturn";
  }
  protected:
  explicit PlaceVectorReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstPlaceVectorRFieldNumber = 1,
  };
  // repeated .VgeoDB.PlaceVectorMeta_t arstPlaceVectorR = 1;
  int arstplacevectorr_size() const;
  private:
  int _internal_arstplacevectorr_size() const;
  public:
  void clear_arstplacevectorr();
  ::VgeoDB::PlaceVectorMeta_t* mutable_arstplacevectorr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVectorMeta_t >*
      mutable_arstplacevectorr();
  private:
  const ::VgeoDB::PlaceVectorMeta_t& _internal_arstplacevectorr(int index) const;
  ::VgeoDB::PlaceVectorMeta_t* _internal_add_arstplacevectorr();
  public:
  const ::VgeoDB::PlaceVectorMeta_t& arstplacevectorr(int index) const;
  ::VgeoDB::PlaceVectorMeta_t* add_arstplacevectorr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVectorMeta_t >&
      arstplacevectorr() const;

  // @@protoc_insertion_point(class_scope:VgeoDB.QR.PlaceVectorReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVectorMeta_t > arstplacevectorr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatureQuery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.LocalFeatureQuery) */ {
 public:
  inline LocalFeatureQuery() : LocalFeatureQuery(nullptr) {}
  virtual ~LocalFeatureQuery();
  explicit constexpr LocalFeatureQuery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatureQuery(const LocalFeatureQuery& from);
  LocalFeatureQuery(LocalFeatureQuery&& from) noexcept
    : LocalFeatureQuery() {
    *this = ::std::move(from);
  }

  inline LocalFeatureQuery& operator=(const LocalFeatureQuery& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatureQuery& operator=(LocalFeatureQuery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatureQuery& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeatureQuery* internal_default_instance() {
    return reinterpret_cast<const LocalFeatureQuery*>(
               &_LocalFeatureQuery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LocalFeatureQuery& a, LocalFeatureQuery& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatureQuery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatureQuery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatureQuery* New() const final {
    return CreateMaybeMessage<LocalFeatureQuery>(nullptr);
  }

  LocalFeatureQuery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatureQuery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatureQuery& from);
  void MergeFrom(const LocalFeatureQuery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatureQuery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.LocalFeatureQuery";
  }
  protected:
  explicit LocalFeatureQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStQueryTypeFieldNumber = 1,
    kUn64KeypointIndexListFieldNumber = 4,
    kUDescriptorFieldNumber = 5,
    kStKeypointFieldNumber = 8,
    kNNearestMaxFieldNumber = 6,
    kNDistanceTypeFieldNumber = 7,
  };
  // repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
  int stquerytype_size() const;
  private:
  int _internal_stquerytype_size() const;
  public:
  void clear_stquerytype();
  ::VgeoDB::QR::QueryType_t* mutable_stquerytype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >*
      mutable_stquerytype();
  private:
  const ::VgeoDB::QR::QueryType_t& _internal_stquerytype(int index) const;
  ::VgeoDB::QR::QueryType_t* _internal_add_stquerytype();
  public:
  const ::VgeoDB::QR::QueryType_t& stquerytype(int index) const;
  ::VgeoDB::QR::QueryType_t* add_stquerytype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >&
      stquerytype() const;

  // repeated uint64 un64KeypointIndexList = 4;
  int un64keypointindexlist_size() const;
  private:
  int _internal_un64keypointindexlist_size() const;
  public:
  void clear_un64keypointindexlist();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64keypointindexlist(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_un64keypointindexlist() const;
  void _internal_add_un64keypointindexlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_un64keypointindexlist();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 un64keypointindexlist(int index) const;
  void set_un64keypointindexlist(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_un64keypointindexlist(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      un64keypointindexlist() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_un64keypointindexlist();

  // repeated .VgeoDB.LocalFeatureDesc uDescriptor = 5;
  int udescriptor_size() const;
  private:
  int _internal_udescriptor_size() const;
  public:
  void clear_udescriptor();
  ::VgeoDB::LocalFeatureDesc* mutable_udescriptor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeatureDesc >*
      mutable_udescriptor();
  private:
  const ::VgeoDB::LocalFeatureDesc& _internal_udescriptor(int index) const;
  ::VgeoDB::LocalFeatureDesc* _internal_add_udescriptor();
  public:
  const ::VgeoDB::LocalFeatureDesc& udescriptor(int index) const;
  ::VgeoDB::LocalFeatureDesc* add_udescriptor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeatureDesc >&
      udescriptor() const;

  // repeated .VgeoDB.KeyPoint_t stKeypoint = 8;
  int stkeypoint_size() const;
  private:
  int _internal_stkeypoint_size() const;
  public:
  void clear_stkeypoint();
  ::VgeoDB::KeyPoint_t* mutable_stkeypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >*
      mutable_stkeypoint();
  private:
  const ::VgeoDB::KeyPoint_t& _internal_stkeypoint(int index) const;
  ::VgeoDB::KeyPoint_t* _internal_add_stkeypoint();
  public:
  const ::VgeoDB::KeyPoint_t& stkeypoint(int index) const;
  ::VgeoDB::KeyPoint_t* add_stkeypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >&
      stkeypoint() const;

  // int32 nNearestMax = 6;
  void clear_nnearestmax();
  ::PROTOBUF_NAMESPACE_ID::int32 nnearestmax() const;
  void set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nnearestmax() const;
  void _internal_set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 nDistanceType = 7;
  void clear_ndistancetype();
  ::PROTOBUF_NAMESPACE_ID::int32 ndistancetype() const;
  void set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ndistancetype() const;
  void _internal_set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.QR.LocalFeatureQuery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t > stquerytype_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > un64keypointindexlist_;
  mutable std::atomic<int> _un64keypointindexlist_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeatureDesc > udescriptor_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t > stkeypoint_;
  ::PROTOBUF_NAMESPACE_ID::int32 nnearestmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 ndistancetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatureReturnUnit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.LocalFeatureReturnUnit) */ {
 public:
  inline LocalFeatureReturnUnit() : LocalFeatureReturnUnit(nullptr) {}
  virtual ~LocalFeatureReturnUnit();
  explicit constexpr LocalFeatureReturnUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatureReturnUnit(const LocalFeatureReturnUnit& from);
  LocalFeatureReturnUnit(LocalFeatureReturnUnit&& from) noexcept
    : LocalFeatureReturnUnit() {
    *this = ::std::move(from);
  }

  inline LocalFeatureReturnUnit& operator=(const LocalFeatureReturnUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatureReturnUnit& operator=(LocalFeatureReturnUnit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatureReturnUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeatureReturnUnit* internal_default_instance() {
    return reinterpret_cast<const LocalFeatureReturnUnit*>(
               &_LocalFeatureReturnUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LocalFeatureReturnUnit& a, LocalFeatureReturnUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatureReturnUnit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatureReturnUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatureReturnUnit* New() const final {
    return CreateMaybeMessage<LocalFeatureReturnUnit>(nullptr);
  }

  LocalFeatureReturnUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatureReturnUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatureReturnUnit& from);
  void MergeFrom(const LocalFeatureReturnUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatureReturnUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.LocalFeatureReturnUnit";
  }
  protected:
  explicit LocalFeatureReturnUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstMatchedFeatureFieldNumber = 2,
    kUn64MatchedKeypointIndexFieldNumber = 1,
  };
  // repeated .VgeoDB.LocalFeature arstMatchedFeature = 2;
  int arstmatchedfeature_size() const;
  private:
  int _internal_arstmatchedfeature_size() const;
  public:
  void clear_arstmatchedfeature();
  ::VgeoDB::LocalFeature* mutable_arstmatchedfeature(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >*
      mutable_arstmatchedfeature();
  private:
  const ::VgeoDB::LocalFeature& _internal_arstmatchedfeature(int index) const;
  ::VgeoDB::LocalFeature* _internal_add_arstmatchedfeature();
  public:
  const ::VgeoDB::LocalFeature& arstmatchedfeature(int index) const;
  ::VgeoDB::LocalFeature* add_arstmatchedfeature();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >&
      arstmatchedfeature() const;

  // uint64 un64MatchedKeypointIndex = 1;
  void clear_un64matchedkeypointindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64matchedkeypointindex() const;
  void set_un64matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64matchedkeypointindex() const;
  void _internal_set_un64matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.QR.LocalFeatureReturnUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature > arstmatchedfeature_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64matchedkeypointindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// -------------------------------------------------------------------

class LocalFeatureReturn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.QR.LocalFeatureReturn) */ {
 public:
  inline LocalFeatureReturn() : LocalFeatureReturn(nullptr) {}
  virtual ~LocalFeatureReturn();
  explicit constexpr LocalFeatureReturn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFeatureReturn(const LocalFeatureReturn& from);
  LocalFeatureReturn(LocalFeatureReturn&& from) noexcept
    : LocalFeatureReturn() {
    *this = ::std::move(from);
  }

  inline LocalFeatureReturn& operator=(const LocalFeatureReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFeatureReturn& operator=(LocalFeatureReturn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalFeatureReturn& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFeatureReturn* internal_default_instance() {
    return reinterpret_cast<const LocalFeatureReturn*>(
               &_LocalFeatureReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LocalFeatureReturn& a, LocalFeatureReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalFeatureReturn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFeatureReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalFeatureReturn* New() const final {
    return CreateMaybeMessage<LocalFeatureReturn>(nullptr);
  }

  LocalFeatureReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalFeatureReturn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalFeatureReturn& from);
  void MergeFrom(const LocalFeatureReturn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalFeatureReturn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.QR.LocalFeatureReturn";
  }
  protected:
  explicit LocalFeatureReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_ltdb_5fqr_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstLocalFeatureRFieldNumber = 1,
  };
  // repeated .VgeoDB.QR.LocalFeatureReturnUnit arstLocalFeatureR = 1;
  int arstlocalfeaturer_size() const;
  private:
  int _internal_arstlocalfeaturer_size() const;
  public:
  void clear_arstlocalfeaturer();
  ::VgeoDB::QR::LocalFeatureReturnUnit* mutable_arstlocalfeaturer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::LocalFeatureReturnUnit >*
      mutable_arstlocalfeaturer();
  private:
  const ::VgeoDB::QR::LocalFeatureReturnUnit& _internal_arstlocalfeaturer(int index) const;
  ::VgeoDB::QR::LocalFeatureReturnUnit* _internal_add_arstlocalfeaturer();
  public:
  const ::VgeoDB::QR::LocalFeatureReturnUnit& arstlocalfeaturer(int index) const;
  ::VgeoDB::QR::LocalFeatureReturnUnit* add_arstlocalfeaturer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::LocalFeatureReturnUnit >&
      arstlocalfeaturer() const;

  // @@protoc_insertion_point(class_scope:VgeoDB.QR.LocalFeatureReturn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::LocalFeatureReturnUnit > arstlocalfeaturer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ltdb_5fqr_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocationQueryType_t

// .VgeoDB.common.XYZ64_t stLocation = 1;
inline bool LocationQueryType_t::_internal_has_stlocation() const {
  return this != internal_default_instance() && stlocation_ != nullptr;
}
inline bool LocationQueryType_t::has_stlocation() const {
  return _internal_has_stlocation();
}
inline const ::VgeoDB::common::XYZ64_t& LocationQueryType_t::_internal_stlocation() const {
  const ::VgeoDB::common::XYZ64_t* p = stlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::XYZ64_t&>(
      ::VgeoDB::common::_XYZ64_t_default_instance_);
}
inline const ::VgeoDB::common::XYZ64_t& LocationQueryType_t::stlocation() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocationQueryType_t.stLocation)
  return _internal_stlocation();
}
inline void LocationQueryType_t::unsafe_arena_set_allocated_stlocation(
    ::VgeoDB::common::XYZ64_t* stlocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation_);
  }
  stlocation_ = stlocation;
  if (stlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.QR.LocationQueryType_t.stLocation)
}
inline ::VgeoDB::common::XYZ64_t* LocationQueryType_t::release_stlocation() {
  
  ::VgeoDB::common::XYZ64_t* temp = stlocation_;
  stlocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::common::XYZ64_t* LocationQueryType_t::unsafe_arena_release_stlocation() {
  // @@protoc_insertion_point(field_release:VgeoDB.QR.LocationQueryType_t.stLocation)
  
  ::VgeoDB::common::XYZ64_t* temp = stlocation_;
  stlocation_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::XYZ64_t* LocationQueryType_t::_internal_mutable_stlocation() {
  
  if (stlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::XYZ64_t>(GetArena());
    stlocation_ = p;
  }
  return stlocation_;
}
inline ::VgeoDB::common::XYZ64_t* LocationQueryType_t::mutable_stlocation() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.LocationQueryType_t.stLocation)
  return _internal_mutable_stlocation();
}
inline void LocationQueryType_t::set_allocated_stlocation(::VgeoDB::common::XYZ64_t* stlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation_);
  }
  if (stlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation)->GetArena();
    if (message_arena != submessage_arena) {
      stlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stlocation, submessage_arena);
    }
    
  } else {
    
  }
  stlocation_ = stlocation;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.QR.LocationQueryType_t.stLocation)
}

// float fRadius = 2;
inline void LocationQueryType_t::clear_fradius() {
  fradius_ = 0;
}
inline float LocationQueryType_t::_internal_fradius() const {
  return fradius_;
}
inline float LocationQueryType_t::fradius() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocationQueryType_t.fRadius)
  return _internal_fradius();
}
inline void LocationQueryType_t::_internal_set_fradius(float value) {
  
  fradius_ = value;
}
inline void LocationQueryType_t::set_fradius(float value) {
  _internal_set_fradius(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.LocationQueryType_t.fRadius)
}

// -------------------------------------------------------------------

// QueryType_t

// .VgeoDB.QR.LocationQueryType_t stLocation = 1;
inline bool QueryType_t::_internal_has_stlocation() const {
  return uQueryType_case() == kStLocation;
}
inline bool QueryType_t::has_stlocation() const {
  return _internal_has_stlocation();
}
inline void QueryType_t::set_has_stlocation() {
  _oneof_case_[0] = kStLocation;
}
inline void QueryType_t::clear_stlocation() {
  if (_internal_has_stlocation()) {
    if (GetArena() == nullptr) {
      delete uQueryType_.stlocation_;
    }
    clear_has_uQueryType();
  }
}
inline ::VgeoDB::QR::LocationQueryType_t* QueryType_t::release_stlocation() {
  // @@protoc_insertion_point(field_release:VgeoDB.QR.QueryType_t.stLocation)
  if (_internal_has_stlocation()) {
    clear_has_uQueryType();
      ::VgeoDB::QR::LocationQueryType_t* temp = uQueryType_.stlocation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uQueryType_.stlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::QR::LocationQueryType_t& QueryType_t::_internal_stlocation() const {
  return _internal_has_stlocation()
      ? *uQueryType_.stlocation_
      : reinterpret_cast< ::VgeoDB::QR::LocationQueryType_t&>(::VgeoDB::QR::_LocationQueryType_t_default_instance_);
}
inline const ::VgeoDB::QR::LocationQueryType_t& QueryType_t::stlocation() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.QueryType_t.stLocation)
  return _internal_stlocation();
}
inline ::VgeoDB::QR::LocationQueryType_t* QueryType_t::unsafe_arena_release_stlocation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.QR.QueryType_t.stLocation)
  if (_internal_has_stlocation()) {
    clear_has_uQueryType();
    ::VgeoDB::QR::LocationQueryType_t* temp = uQueryType_.stlocation_;
    uQueryType_.stlocation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QueryType_t::unsafe_arena_set_allocated_stlocation(::VgeoDB::QR::LocationQueryType_t* stlocation) {
  clear_uQueryType();
  if (stlocation) {
    set_has_stlocation();
    uQueryType_.stlocation_ = stlocation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.QR.QueryType_t.stLocation)
}
inline ::VgeoDB::QR::LocationQueryType_t* QueryType_t::_internal_mutable_stlocation() {
  if (!_internal_has_stlocation()) {
    clear_uQueryType();
    set_has_stlocation();
    uQueryType_.stlocation_ = CreateMaybeMessage< ::VgeoDB::QR::LocationQueryType_t >(GetArena());
  }
  return uQueryType_.stlocation_;
}
inline ::VgeoDB::QR::LocationQueryType_t* QueryType_t::mutable_stlocation() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.QueryType_t.stLocation)
  return _internal_mutable_stlocation();
}

// uint64 un64UniqueIDList = 2;
inline bool QueryType_t::_internal_has_un64uniqueidlist() const {
  return uQueryType_case() == kUn64UniqueIDList;
}
inline bool QueryType_t::has_un64uniqueidlist() const {
  return _internal_has_un64uniqueidlist();
}
inline void QueryType_t::set_has_un64uniqueidlist() {
  _oneof_case_[0] = kUn64UniqueIDList;
}
inline void QueryType_t::clear_un64uniqueidlist() {
  if (_internal_has_un64uniqueidlist()) {
    uQueryType_.un64uniqueidlist_ = PROTOBUF_ULONGLONG(0);
    clear_has_uQueryType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryType_t::_internal_un64uniqueidlist() const {
  if (_internal_has_un64uniqueidlist()) {
    return uQueryType_.un64uniqueidlist_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void QueryType_t::_internal_set_un64uniqueidlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_un64uniqueidlist()) {
    clear_uQueryType();
    set_has_un64uniqueidlist();
  }
  uQueryType_.un64uniqueidlist_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryType_t::un64uniqueidlist() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.QueryType_t.un64UniqueIDList)
  return _internal_un64uniqueidlist();
}
inline void QueryType_t::set_un64uniqueidlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64uniqueidlist(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.QueryType_t.un64UniqueIDList)
}

// uint64 un64GroupIDList = 3;
inline bool QueryType_t::_internal_has_un64groupidlist() const {
  return uQueryType_case() == kUn64GroupIDList;
}
inline bool QueryType_t::has_un64groupidlist() const {
  return _internal_has_un64groupidlist();
}
inline void QueryType_t::set_has_un64groupidlist() {
  _oneof_case_[0] = kUn64GroupIDList;
}
inline void QueryType_t::clear_un64groupidlist() {
  if (_internal_has_un64groupidlist()) {
    uQueryType_.un64groupidlist_ = PROTOBUF_ULONGLONG(0);
    clear_has_uQueryType();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryType_t::_internal_un64groupidlist() const {
  if (_internal_has_un64groupidlist()) {
    return uQueryType_.un64groupidlist_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void QueryType_t::_internal_set_un64groupidlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_un64groupidlist()) {
    clear_uQueryType();
    set_has_un64groupidlist();
  }
  uQueryType_.un64groupidlist_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryType_t::un64groupidlist() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.QueryType_t.un64GroupIDList)
  return _internal_un64groupidlist();
}
inline void QueryType_t::set_un64groupidlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64groupidlist(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.QueryType_t.un64GroupIDList)
}

inline bool QueryType_t::has_uQueryType() const {
  return uQueryType_case() != UQUERYTYPE_NOT_SET;
}
inline void QueryType_t::clear_has_uQueryType() {
  _oneof_case_[0] = UQUERYTYPE_NOT_SET;
}
inline QueryType_t::UQueryTypeCase QueryType_t::uQueryType_case() const {
  return QueryType_t::UQueryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlaceVectorQuery

// repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
inline int PlaceVectorQuery::_internal_stquerytype_size() const {
  return stquerytype_.size();
}
inline int PlaceVectorQuery::stquerytype_size() const {
  return _internal_stquerytype_size();
}
inline void PlaceVectorQuery::clear_stquerytype() {
  stquerytype_.Clear();
}
inline ::VgeoDB::QR::QueryType_t* PlaceVectorQuery::mutable_stquerytype(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.PlaceVectorQuery.stQueryType)
  return stquerytype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >*
PlaceVectorQuery::mutable_stquerytype() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.PlaceVectorQuery.stQueryType)
  return &stquerytype_;
}
inline const ::VgeoDB::QR::QueryType_t& PlaceVectorQuery::_internal_stquerytype(int index) const {
  return stquerytype_.Get(index);
}
inline const ::VgeoDB::QR::QueryType_t& PlaceVectorQuery::stquerytype(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.PlaceVectorQuery.stQueryType)
  return _internal_stquerytype(index);
}
inline ::VgeoDB::QR::QueryType_t* PlaceVectorQuery::_internal_add_stquerytype() {
  return stquerytype_.Add();
}
inline ::VgeoDB::QR::QueryType_t* PlaceVectorQuery::add_stquerytype() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.PlaceVectorQuery.stQueryType)
  return _internal_add_stquerytype();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >&
PlaceVectorQuery::stquerytype() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.PlaceVectorQuery.stQueryType)
  return stquerytype_;
}

// .VgeoDB.PlaceVectorDesc uDescriptor = 2;
inline bool PlaceVectorQuery::_internal_has_udescriptor() const {
  return this != internal_default_instance() && udescriptor_ != nullptr;
}
inline bool PlaceVectorQuery::has_udescriptor() const {
  return _internal_has_udescriptor();
}
inline const ::VgeoDB::PlaceVectorDesc& PlaceVectorQuery::_internal_udescriptor() const {
  const ::VgeoDB::PlaceVectorDesc* p = udescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::PlaceVectorDesc&>(
      ::VgeoDB::_PlaceVectorDesc_default_instance_);
}
inline const ::VgeoDB::PlaceVectorDesc& PlaceVectorQuery::udescriptor() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.PlaceVectorQuery.uDescriptor)
  return _internal_udescriptor();
}
inline void PlaceVectorQuery::unsafe_arena_set_allocated_udescriptor(
    ::VgeoDB::PlaceVectorDesc* udescriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udescriptor_);
  }
  udescriptor_ = udescriptor;
  if (udescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.QR.PlaceVectorQuery.uDescriptor)
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVectorQuery::release_udescriptor() {
  
  ::VgeoDB::PlaceVectorDesc* temp = udescriptor_;
  udescriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVectorQuery::unsafe_arena_release_udescriptor() {
  // @@protoc_insertion_point(field_release:VgeoDB.QR.PlaceVectorQuery.uDescriptor)
  
  ::VgeoDB::PlaceVectorDesc* temp = udescriptor_;
  udescriptor_ = nullptr;
  return temp;
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVectorQuery::_internal_mutable_udescriptor() {
  
  if (udescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::PlaceVectorDesc>(GetArena());
    udescriptor_ = p;
  }
  return udescriptor_;
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVectorQuery::mutable_udescriptor() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.PlaceVectorQuery.uDescriptor)
  return _internal_mutable_udescriptor();
}
inline void PlaceVectorQuery::set_allocated_udescriptor(::VgeoDB::PlaceVectorDesc* udescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(udescriptor_);
  }
  if (udescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udescriptor)->GetArena();
    if (message_arena != submessage_arena) {
      udescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udescriptor, submessage_arena);
    }
    
  } else {
    
  }
  udescriptor_ = udescriptor;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.QR.PlaceVectorQuery.uDescriptor)
}

// int32 nNearestMax = 4;
inline void PlaceVectorQuery::clear_nnearestmax() {
  nnearestmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceVectorQuery::_internal_nnearestmax() const {
  return nnearestmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceVectorQuery::nnearestmax() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.PlaceVectorQuery.nNearestMax)
  return _internal_nnearestmax();
}
inline void PlaceVectorQuery::_internal_set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nnearestmax_ = value;
}
inline void PlaceVectorQuery::set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nnearestmax(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.PlaceVectorQuery.nNearestMax)
}

// int32 nDistanceType = 5;
inline void PlaceVectorQuery::clear_ndistancetype() {
  ndistancetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceVectorQuery::_internal_ndistancetype() const {
  return ndistancetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceVectorQuery::ndistancetype() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.PlaceVectorQuery.nDistanceType)
  return _internal_ndistancetype();
}
inline void PlaceVectorQuery::_internal_set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ndistancetype_ = value;
}
inline void PlaceVectorQuery::set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ndistancetype(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.PlaceVectorQuery.nDistanceType)
}

// -------------------------------------------------------------------

// PlaceVectorReturn

// repeated .VgeoDB.PlaceVectorMeta_t arstPlaceVectorR = 1;
inline int PlaceVectorReturn::_internal_arstplacevectorr_size() const {
  return arstplacevectorr_.size();
}
inline int PlaceVectorReturn::arstplacevectorr_size() const {
  return _internal_arstplacevectorr_size();
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVectorReturn::mutable_arstplacevectorr(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.PlaceVectorReturn.arstPlaceVectorR)
  return arstplacevectorr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVectorMeta_t >*
PlaceVectorReturn::mutable_arstplacevectorr() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.PlaceVectorReturn.arstPlaceVectorR)
  return &arstplacevectorr_;
}
inline const ::VgeoDB::PlaceVectorMeta_t& PlaceVectorReturn::_internal_arstplacevectorr(int index) const {
  return arstplacevectorr_.Get(index);
}
inline const ::VgeoDB::PlaceVectorMeta_t& PlaceVectorReturn::arstplacevectorr(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.PlaceVectorReturn.arstPlaceVectorR)
  return _internal_arstplacevectorr(index);
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVectorReturn::_internal_add_arstplacevectorr() {
  return arstplacevectorr_.Add();
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVectorReturn::add_arstplacevectorr() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.PlaceVectorReturn.arstPlaceVectorR)
  return _internal_add_arstplacevectorr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVectorMeta_t >&
PlaceVectorReturn::arstplacevectorr() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.PlaceVectorReturn.arstPlaceVectorR)
  return arstplacevectorr_;
}

// -------------------------------------------------------------------

// LocalFeatureQuery

// repeated .VgeoDB.QR.QueryType_t stQueryType = 1;
inline int LocalFeatureQuery::_internal_stquerytype_size() const {
  return stquerytype_.size();
}
inline int LocalFeatureQuery::stquerytype_size() const {
  return _internal_stquerytype_size();
}
inline void LocalFeatureQuery::clear_stquerytype() {
  stquerytype_.Clear();
}
inline ::VgeoDB::QR::QueryType_t* LocalFeatureQuery::mutable_stquerytype(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.LocalFeatureQuery.stQueryType)
  return stquerytype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >*
LocalFeatureQuery::mutable_stquerytype() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.LocalFeatureQuery.stQueryType)
  return &stquerytype_;
}
inline const ::VgeoDB::QR::QueryType_t& LocalFeatureQuery::_internal_stquerytype(int index) const {
  return stquerytype_.Get(index);
}
inline const ::VgeoDB::QR::QueryType_t& LocalFeatureQuery::stquerytype(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureQuery.stQueryType)
  return _internal_stquerytype(index);
}
inline ::VgeoDB::QR::QueryType_t* LocalFeatureQuery::_internal_add_stquerytype() {
  return stquerytype_.Add();
}
inline ::VgeoDB::QR::QueryType_t* LocalFeatureQuery::add_stquerytype() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.LocalFeatureQuery.stQueryType)
  return _internal_add_stquerytype();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::QueryType_t >&
LocalFeatureQuery::stquerytype() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.LocalFeatureQuery.stQueryType)
  return stquerytype_;
}

// repeated uint64 un64KeypointIndexList = 4;
inline int LocalFeatureQuery::_internal_un64keypointindexlist_size() const {
  return un64keypointindexlist_.size();
}
inline int LocalFeatureQuery::un64keypointindexlist_size() const {
  return _internal_un64keypointindexlist_size();
}
inline void LocalFeatureQuery::clear_un64keypointindexlist() {
  un64keypointindexlist_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatureQuery::_internal_un64keypointindexlist(int index) const {
  return un64keypointindexlist_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatureQuery::un64keypointindexlist(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureQuery.un64KeypointIndexList)
  return _internal_un64keypointindexlist(index);
}
inline void LocalFeatureQuery::set_un64keypointindexlist(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  un64keypointindexlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.LocalFeatureQuery.un64KeypointIndexList)
}
inline void LocalFeatureQuery::_internal_add_un64keypointindexlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  un64keypointindexlist_.Add(value);
}
inline void LocalFeatureQuery::add_un64keypointindexlist(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_un64keypointindexlist(value);
  // @@protoc_insertion_point(field_add:VgeoDB.QR.LocalFeatureQuery.un64KeypointIndexList)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LocalFeatureQuery::_internal_un64keypointindexlist() const {
  return un64keypointindexlist_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
LocalFeatureQuery::un64keypointindexlist() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.LocalFeatureQuery.un64KeypointIndexList)
  return _internal_un64keypointindexlist();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LocalFeatureQuery::_internal_mutable_un64keypointindexlist() {
  return &un64keypointindexlist_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
LocalFeatureQuery::mutable_un64keypointindexlist() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.LocalFeatureQuery.un64KeypointIndexList)
  return _internal_mutable_un64keypointindexlist();
}

// repeated .VgeoDB.KeyPoint_t stKeypoint = 8;
inline int LocalFeatureQuery::_internal_stkeypoint_size() const {
  return stkeypoint_.size();
}
inline int LocalFeatureQuery::stkeypoint_size() const {
  return _internal_stkeypoint_size();
}
inline ::VgeoDB::KeyPoint_t* LocalFeatureQuery::mutable_stkeypoint(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.LocalFeatureQuery.stKeypoint)
  return stkeypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >*
LocalFeatureQuery::mutable_stkeypoint() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.LocalFeatureQuery.stKeypoint)
  return &stkeypoint_;
}
inline const ::VgeoDB::KeyPoint_t& LocalFeatureQuery::_internal_stkeypoint(int index) const {
  return stkeypoint_.Get(index);
}
inline const ::VgeoDB::KeyPoint_t& LocalFeatureQuery::stkeypoint(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureQuery.stKeypoint)
  return _internal_stkeypoint(index);
}
inline ::VgeoDB::KeyPoint_t* LocalFeatureQuery::_internal_add_stkeypoint() {
  return stkeypoint_.Add();
}
inline ::VgeoDB::KeyPoint_t* LocalFeatureQuery::add_stkeypoint() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.LocalFeatureQuery.stKeypoint)
  return _internal_add_stkeypoint();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::KeyPoint_t >&
LocalFeatureQuery::stkeypoint() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.LocalFeatureQuery.stKeypoint)
  return stkeypoint_;
}

// int32 nNearestMax = 6;
inline void LocalFeatureQuery::clear_nnearestmax() {
  nnearestmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalFeatureQuery::_internal_nnearestmax() const {
  return nnearestmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalFeatureQuery::nnearestmax() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureQuery.nNearestMax)
  return _internal_nnearestmax();
}
inline void LocalFeatureQuery::_internal_set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nnearestmax_ = value;
}
inline void LocalFeatureQuery::set_nnearestmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nnearestmax(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.LocalFeatureQuery.nNearestMax)
}

// int32 nDistanceType = 7;
inline void LocalFeatureQuery::clear_ndistancetype() {
  ndistancetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalFeatureQuery::_internal_ndistancetype() const {
  return ndistancetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LocalFeatureQuery::ndistancetype() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureQuery.nDistanceType)
  return _internal_ndistancetype();
}
inline void LocalFeatureQuery::_internal_set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ndistancetype_ = value;
}
inline void LocalFeatureQuery::set_ndistancetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ndistancetype(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.LocalFeatureQuery.nDistanceType)
}

// repeated .VgeoDB.LocalFeatureDesc uDescriptor = 5;
inline int LocalFeatureQuery::_internal_udescriptor_size() const {
  return udescriptor_.size();
}
inline int LocalFeatureQuery::udescriptor_size() const {
  return _internal_udescriptor_size();
}
inline ::VgeoDB::LocalFeatureDesc* LocalFeatureQuery::mutable_udescriptor(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.LocalFeatureQuery.uDescriptor)
  return udescriptor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeatureDesc >*
LocalFeatureQuery::mutable_udescriptor() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.LocalFeatureQuery.uDescriptor)
  return &udescriptor_;
}
inline const ::VgeoDB::LocalFeatureDesc& LocalFeatureQuery::_internal_udescriptor(int index) const {
  return udescriptor_.Get(index);
}
inline const ::VgeoDB::LocalFeatureDesc& LocalFeatureQuery::udescriptor(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureQuery.uDescriptor)
  return _internal_udescriptor(index);
}
inline ::VgeoDB::LocalFeatureDesc* LocalFeatureQuery::_internal_add_udescriptor() {
  return udescriptor_.Add();
}
inline ::VgeoDB::LocalFeatureDesc* LocalFeatureQuery::add_udescriptor() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.LocalFeatureQuery.uDescriptor)
  return _internal_add_udescriptor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeatureDesc >&
LocalFeatureQuery::udescriptor() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.LocalFeatureQuery.uDescriptor)
  return udescriptor_;
}

// -------------------------------------------------------------------

// LocalFeatureReturnUnit

// uint64 un64MatchedKeypointIndex = 1;
inline void LocalFeatureReturnUnit::clear_un64matchedkeypointindex() {
  un64matchedkeypointindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatureReturnUnit::_internal_un64matchedkeypointindex() const {
  return un64matchedkeypointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LocalFeatureReturnUnit::un64matchedkeypointindex() const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureReturnUnit.un64MatchedKeypointIndex)
  return _internal_un64matchedkeypointindex();
}
inline void LocalFeatureReturnUnit::_internal_set_un64matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64matchedkeypointindex_ = value;
}
inline void LocalFeatureReturnUnit::set_un64matchedkeypointindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64matchedkeypointindex(value);
  // @@protoc_insertion_point(field_set:VgeoDB.QR.LocalFeatureReturnUnit.un64MatchedKeypointIndex)
}

// repeated .VgeoDB.LocalFeature arstMatchedFeature = 2;
inline int LocalFeatureReturnUnit::_internal_arstmatchedfeature_size() const {
  return arstmatchedfeature_.size();
}
inline int LocalFeatureReturnUnit::arstmatchedfeature_size() const {
  return _internal_arstmatchedfeature_size();
}
inline ::VgeoDB::LocalFeature* LocalFeatureReturnUnit::mutable_arstmatchedfeature(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.LocalFeatureReturnUnit.arstMatchedFeature)
  return arstmatchedfeature_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >*
LocalFeatureReturnUnit::mutable_arstmatchedfeature() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.LocalFeatureReturnUnit.arstMatchedFeature)
  return &arstmatchedfeature_;
}
inline const ::VgeoDB::LocalFeature& LocalFeatureReturnUnit::_internal_arstmatchedfeature(int index) const {
  return arstmatchedfeature_.Get(index);
}
inline const ::VgeoDB::LocalFeature& LocalFeatureReturnUnit::arstmatchedfeature(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureReturnUnit.arstMatchedFeature)
  return _internal_arstmatchedfeature(index);
}
inline ::VgeoDB::LocalFeature* LocalFeatureReturnUnit::_internal_add_arstmatchedfeature() {
  return arstmatchedfeature_.Add();
}
inline ::VgeoDB::LocalFeature* LocalFeatureReturnUnit::add_arstmatchedfeature() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.LocalFeatureReturnUnit.arstMatchedFeature)
  return _internal_add_arstmatchedfeature();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::LocalFeature >&
LocalFeatureReturnUnit::arstmatchedfeature() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.LocalFeatureReturnUnit.arstMatchedFeature)
  return arstmatchedfeature_;
}

// -------------------------------------------------------------------

// LocalFeatureReturn

// repeated .VgeoDB.QR.LocalFeatureReturnUnit arstLocalFeatureR = 1;
inline int LocalFeatureReturn::_internal_arstlocalfeaturer_size() const {
  return arstlocalfeaturer_.size();
}
inline int LocalFeatureReturn::arstlocalfeaturer_size() const {
  return _internal_arstlocalfeaturer_size();
}
inline void LocalFeatureReturn::clear_arstlocalfeaturer() {
  arstlocalfeaturer_.Clear();
}
inline ::VgeoDB::QR::LocalFeatureReturnUnit* LocalFeatureReturn::mutable_arstlocalfeaturer(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.QR.LocalFeatureReturn.arstLocalFeatureR)
  return arstlocalfeaturer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::LocalFeatureReturnUnit >*
LocalFeatureReturn::mutable_arstlocalfeaturer() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.QR.LocalFeatureReturn.arstLocalFeatureR)
  return &arstlocalfeaturer_;
}
inline const ::VgeoDB::QR::LocalFeatureReturnUnit& LocalFeatureReturn::_internal_arstlocalfeaturer(int index) const {
  return arstlocalfeaturer_.Get(index);
}
inline const ::VgeoDB::QR::LocalFeatureReturnUnit& LocalFeatureReturn::arstlocalfeaturer(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.QR.LocalFeatureReturn.arstLocalFeatureR)
  return _internal_arstlocalfeaturer(index);
}
inline ::VgeoDB::QR::LocalFeatureReturnUnit* LocalFeatureReturn::_internal_add_arstlocalfeaturer() {
  return arstlocalfeaturer_.Add();
}
inline ::VgeoDB::QR::LocalFeatureReturnUnit* LocalFeatureReturn::add_arstlocalfeaturer() {
  // @@protoc_insertion_point(field_add:VgeoDB.QR.LocalFeatureReturn.arstLocalFeatureR)
  return _internal_add_arstlocalfeaturer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::QR::LocalFeatureReturnUnit >&
LocalFeatureReturn::arstlocalfeaturer() const {
  // @@protoc_insertion_point(field_list:VgeoDB.QR.LocalFeatureReturn.arstLocalFeatureR)
  return arstlocalfeaturer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace QR
}  // namespace VgeoDB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ltdb_5fqr_2eproto
