// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: placevector.proto

#include "placevector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace VgeoDB {
constexpr PlaceVectorMeta_t::PlaceVectorMeta_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstlocationset_()
  , arun64uniqueidofkeypoint_()
  , _arun64uniqueidofkeypoint_cached_byte_size_()
  , arun64belong3dpointindex_()
  , _arun64belong3dpointindex_cached_byte_size_()
  , stavglocation_(nullptr)
  , storientaton_(nullptr)
  , stdirectionvector_(nullptr)
  , un64uniqueid_(PROTOBUF_ULONGLONG(0))
  , un64keyframeindex_(PROTOBUF_ULONGLONG(0))
  , un64groupid_(PROTOBUF_ULONGLONG(0))
  , un64timestamp_(PROTOBUF_ULONGLONG(0))
  , fsimilarity_(0){}
struct PlaceVectorMeta_tDefaultTypeInternal {
  constexpr PlaceVectorMeta_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorMeta_tDefaultTypeInternal() {}
  union {
    PlaceVectorMeta_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorMeta_tDefaultTypeInternal _PlaceVectorMeta_t_default_instance_;
constexpr NetVLADDesc_t::NetVLADDesc_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arfnetvladdescriptor_()
  , _arfnetvladdescriptor_cached_byte_size_()
  , etype_(0)
{}
struct NetVLADDesc_tDefaultTypeInternal {
  constexpr NetVLADDesc_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NetVLADDesc_tDefaultTypeInternal() {}
  union {
    NetVLADDesc_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NetVLADDesc_tDefaultTypeInternal _NetVLADDesc_t_default_instance_;
constexpr GlobFeatDesc_t::GlobFeatDesc_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arunglobfeatdescriptor_()
  , _arunglobfeatdescriptor_cached_byte_size_()
  , etype_(0)
{}
struct GlobFeatDesc_tDefaultTypeInternal {
  constexpr GlobFeatDesc_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GlobFeatDesc_tDefaultTypeInternal() {}
  union {
    GlobFeatDesc_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GlobFeatDesc_tDefaultTypeInternal _GlobFeatDesc_t_default_instance_;
constexpr PlaceVectorDesc::PlaceVectorDesc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct PlaceVectorDescDefaultTypeInternal {
  constexpr PlaceVectorDescDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorDescDefaultTypeInternal() {}
  union {
    PlaceVectorDesc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorDescDefaultTypeInternal _PlaceVectorDesc_default_instance_;
constexpr PlaceVector::PlaceVector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stmeta_(nullptr)
  , udescriptor_(nullptr){}
struct PlaceVectorDefaultTypeInternal {
  constexpr PlaceVectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorDefaultTypeInternal() {}
  union {
    PlaceVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorDefaultTypeInternal _PlaceVector_default_instance_;
constexpr PlaceVectorSet::PlaceVectorSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arstplacevector_(){}
struct PlaceVectorSetDefaultTypeInternal {
  constexpr PlaceVectorSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorSetDefaultTypeInternal() {}
  union {
    PlaceVectorSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorSetDefaultTypeInternal _PlaceVectorSet_default_instance_;
}  // namespace VgeoDB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_placevector_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_placevector_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_placevector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_placevector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, un64uniqueid_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, un64keyframeindex_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, un64groupid_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, un64timestamp_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, stavglocation_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, storientaton_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, arstlocationset_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, stdirectionvector_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, arun64uniqueidofkeypoint_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, arun64belong3dpointindex_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorMeta_t, fsimilarity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::NetVLADDesc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::NetVLADDesc_t, arfnetvladdescriptor_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::NetVLADDesc_t, etype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::GlobFeatDesc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::GlobFeatDesc_t, arunglobfeatdescriptor_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::GlobFeatDesc_t, etype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorDesc, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorDesc, uDescriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVector, stmeta_),
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVector, udescriptor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VgeoDB::PlaceVectorSet, arstplacevector_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::VgeoDB::PlaceVectorMeta_t)},
  { 16, -1, sizeof(::VgeoDB::NetVLADDesc_t)},
  { 23, -1, sizeof(::VgeoDB::GlobFeatDesc_t)},
  { 30, -1, sizeof(::VgeoDB::PlaceVectorDesc)},
  { 38, -1, sizeof(::VgeoDB::PlaceVector)},
  { 45, -1, sizeof(::VgeoDB::PlaceVectorSet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_PlaceVectorMeta_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_NetVLADDesc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_GlobFeatDesc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_PlaceVectorDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_PlaceVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::VgeoDB::_PlaceVectorSet_default_instance_),
};

const char descriptor_table_protodef_placevector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021placevector.proto\022\006VgeoDB\032\023vgeodb_comm"
  "on.proto\"\232\003\n\021PlaceVectorMeta_t\022\024\n\014un64Un"
  "iqueID\030\001 \001(\004\022\031\n\021un64KeyframeIndex\030\002 \001(\004\022"
  "\023\n\013un64GroupID\030\003 \001(\004\022\025\n\run64Timestamp\030\004 "
  "\001(\004\022-\n\rstAvgLocation\030\005 \001(\0132\026.VgeoDB.comm"
  "on.XYZ64_t\0224\n\014stOrientaton\030\006 \001(\0132\036.VgeoD"
  "B.common.Orientation32_t\022/\n\017arstLocation"
  "Set\030\007 \003(\0132\026.VgeoDB.common.XYZ64_t\0221\n\021stD"
  "irectionVector\030\010 \001(\0132\026.VgeoDB.common.XYZ"
  "32_t\022$\n\030arun64UniqueIDofKeypoint\030\t \003(\004B\002"
  "\020\001\022$\n\030arun64Belong3DPointIndex\030\n \003(\004B\002\020\001"
  "\022\023\n\013fSimilarity\030\013 \001(\002\"\200\001\n\rNetVLADDesc_t\022"
  " \n\024arfNetVLADDescriptor\030\001 \003(\002B\002\020\001\022.\n\005eTy"
  "pe\030\002 \001(\0162\037.VgeoDB.NetVLADDesc_t.eDescTyp"
  "e\"\035\n\teDescType\022\020\n\014VLAD_4096_v1\020\000\"\204\001\n\016Glo"
  "bFeatDesc_t\022\"\n\026arunGlobFeatDescriptor\030\002 "
  "\003(\rB\002\020\001\022/\n\005eType\030\003 \001(\0162 .VgeoDB.GlobFeat"
  "Desc_t.eDescType\"\035\n\teDescType\022\020\n\014GLOB_81"
  "92_v1\020\000\"\216\001\n\017PlaceVectorDesc\0224\n\023stNetVLAD"
  "Descriptor\030\001 \001(\0132\025.VgeoDB.NetVLADDesc_tH"
  "\000\0226\n\024stGlobFeatDescriptor\030\002 \001(\0132\026.VgeoDB"
  ".GlobFeatDesc_tH\000B\r\n\013uDescriptor\"f\n\013Plac"
  "eVector\022)\n\006stMeta\030\001 \001(\0132\031.VgeoDB.PlaceVe"
  "ctorMeta_t\022,\n\013uDescriptor\030\002 \001(\0132\027.VgeoDB"
  ".PlaceVectorDesc\">\n\016PlaceVectorSet\022,\n\017ar"
  "stPlaceVector\030\001 \003(\0132\023.VgeoDB.PlaceVector"
  "B\032\n\022vgeodb.placevectorB\004prdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_placevector_2eproto_deps[1] = {
  &::descriptor_table_vgeodb_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_placevector_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_placevector_2eproto = {
  false, false, 1076, descriptor_table_protodef_placevector_2eproto, "placevector.proto", 
  &descriptor_table_placevector_2eproto_once, descriptor_table_placevector_2eproto_deps, 1, 6,
  schemas, file_default_instances, TableStruct_placevector_2eproto::offsets,
  file_level_metadata_placevector_2eproto, file_level_enum_descriptors_placevector_2eproto, file_level_service_descriptors_placevector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_placevector_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_placevector_2eproto);
  return descriptor_table_placevector_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_placevector_2eproto(&descriptor_table_placevector_2eproto);
namespace VgeoDB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetVLADDesc_t_eDescType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_placevector_2eproto);
  return file_level_enum_descriptors_placevector_2eproto[0];
}
bool NetVLADDesc_t_eDescType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr NetVLADDesc_t_eDescType NetVLADDesc_t::VLAD_4096_v1;
constexpr NetVLADDesc_t_eDescType NetVLADDesc_t::eDescType_MIN;
constexpr NetVLADDesc_t_eDescType NetVLADDesc_t::eDescType_MAX;
constexpr int NetVLADDesc_t::eDescType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GlobFeatDesc_t_eDescType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_placevector_2eproto);
  return file_level_enum_descriptors_placevector_2eproto[1];
}
bool GlobFeatDesc_t_eDescType_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GlobFeatDesc_t_eDescType GlobFeatDesc_t::GLOB_8192_v1;
constexpr GlobFeatDesc_t_eDescType GlobFeatDesc_t::eDescType_MIN;
constexpr GlobFeatDesc_t_eDescType GlobFeatDesc_t::eDescType_MAX;
constexpr int GlobFeatDesc_t::eDescType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class PlaceVectorMeta_t::_Internal {
 public:
  static const ::VgeoDB::common::XYZ64_t& stavglocation(const PlaceVectorMeta_t* msg);
  static const ::VgeoDB::common::Orientation32_t& storientaton(const PlaceVectorMeta_t* msg);
  static const ::VgeoDB::common::XYZ32_t& stdirectionvector(const PlaceVectorMeta_t* msg);
};

const ::VgeoDB::common::XYZ64_t&
PlaceVectorMeta_t::_Internal::stavglocation(const PlaceVectorMeta_t* msg) {
  return *msg->stavglocation_;
}
const ::VgeoDB::common::Orientation32_t&
PlaceVectorMeta_t::_Internal::storientaton(const PlaceVectorMeta_t* msg) {
  return *msg->storientaton_;
}
const ::VgeoDB::common::XYZ32_t&
PlaceVectorMeta_t::_Internal::stdirectionvector(const PlaceVectorMeta_t* msg) {
  return *msg->stdirectionvector_;
}
void PlaceVectorMeta_t::clear_stavglocation() {
  if (GetArena() == nullptr && stavglocation_ != nullptr) {
    delete stavglocation_;
  }
  stavglocation_ = nullptr;
}
void PlaceVectorMeta_t::clear_storientaton() {
  if (GetArena() == nullptr && storientaton_ != nullptr) {
    delete storientaton_;
  }
  storientaton_ = nullptr;
}
void PlaceVectorMeta_t::clear_arstlocationset() {
  arstlocationset_.Clear();
}
void PlaceVectorMeta_t::clear_stdirectionvector() {
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
}
PlaceVectorMeta_t::PlaceVectorMeta_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstlocationset_(arena),
  arun64uniqueidofkeypoint_(arena),
  arun64belong3dpointindex_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.PlaceVectorMeta_t)
}
PlaceVectorMeta_t::PlaceVectorMeta_t(const PlaceVectorMeta_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstlocationset_(from.arstlocationset_),
      arun64uniqueidofkeypoint_(from.arun64uniqueidofkeypoint_),
      arun64belong3dpointindex_(from.arun64belong3dpointindex_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stavglocation()) {
    stavglocation_ = new ::VgeoDB::common::XYZ64_t(*from.stavglocation_);
  } else {
    stavglocation_ = nullptr;
  }
  if (from._internal_has_storientaton()) {
    storientaton_ = new ::VgeoDB::common::Orientation32_t(*from.storientaton_);
  } else {
    storientaton_ = nullptr;
  }
  if (from._internal_has_stdirectionvector()) {
    stdirectionvector_ = new ::VgeoDB::common::XYZ32_t(*from.stdirectionvector_);
  } else {
    stdirectionvector_ = nullptr;
  }
  ::memcpy(&un64uniqueid_, &from.un64uniqueid_,
    static_cast<size_t>(reinterpret_cast<char*>(&fsimilarity_) -
    reinterpret_cast<char*>(&un64uniqueid_)) + sizeof(fsimilarity_));
  // @@protoc_insertion_point(copy_constructor:VgeoDB.PlaceVectorMeta_t)
}

void PlaceVectorMeta_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stavglocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fsimilarity_) -
    reinterpret_cast<char*>(&stavglocation_)) + sizeof(fsimilarity_));
}

PlaceVectorMeta_t::~PlaceVectorMeta_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.PlaceVectorMeta_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorMeta_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stavglocation_;
  if (this != internal_default_instance()) delete storientaton_;
  if (this != internal_default_instance()) delete stdirectionvector_;
}

void PlaceVectorMeta_t::ArenaDtor(void* object) {
  PlaceVectorMeta_t* _this = reinterpret_cast< PlaceVectorMeta_t* >(object);
  (void)_this;
}
void PlaceVectorMeta_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorMeta_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorMeta_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.PlaceVectorMeta_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstlocationset_.Clear();
  arun64uniqueidofkeypoint_.Clear();
  arun64belong3dpointindex_.Clear();
  if (GetArena() == nullptr && stavglocation_ != nullptr) {
    delete stavglocation_;
  }
  stavglocation_ = nullptr;
  if (GetArena() == nullptr && storientaton_ != nullptr) {
    delete storientaton_;
  }
  storientaton_ = nullptr;
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
  ::memset(&un64uniqueid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fsimilarity_) -
      reinterpret_cast<char*>(&un64uniqueid_)) + sizeof(fsimilarity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorMeta_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 un64UniqueID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          un64uniqueid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64KeyframeIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          un64keyframeindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64GroupID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          un64groupid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 un64Timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          un64timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.XYZ64_t stAvgLocation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stavglocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.Orientation32_t stOrientaton = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_storientaton(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .VgeoDB.common.XYZ64_t arstLocationSet = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstlocationset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.XYZ32_t stDirectionVector = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdirectionvector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 arun64UniqueIDofKeypoint = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_arun64uniqueidofkeypoint(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_arun64uniqueidofkeypoint(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 arun64Belong3DPointIndex = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_arun64belong3dpointindex(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_arun64belong3dpointindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float fSimilarity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          fsimilarity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorMeta_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.PlaceVectorMeta_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 un64UniqueID = 1;
  if (this->un64uniqueid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_un64uniqueid(), target);
  }

  // uint64 un64KeyframeIndex = 2;
  if (this->un64keyframeindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_un64keyframeindex(), target);
  }

  // uint64 un64GroupID = 3;
  if (this->un64groupid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_un64groupid(), target);
  }

  // uint64 un64Timestamp = 4;
  if (this->un64timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_un64timestamp(), target);
  }

  // .VgeoDB.common.XYZ64_t stAvgLocation = 5;
  if (this->has_stavglocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stavglocation(this), target, stream);
  }

  // .VgeoDB.common.Orientation32_t stOrientaton = 6;
  if (this->has_storientaton()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::storientaton(this), target, stream);
  }

  // repeated .VgeoDB.common.XYZ64_t arstLocationSet = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstlocationset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_arstlocationset(i), target, stream);
  }

  // .VgeoDB.common.XYZ32_t stDirectionVector = 8;
  if (this->has_stdirectionvector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stdirectionvector(this), target, stream);
  }

  // repeated uint64 arun64UniqueIDofKeypoint = 9 [packed = true];
  {
    int byte_size = _arun64uniqueidofkeypoint_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          9, _internal_arun64uniqueidofkeypoint(), byte_size, target);
    }
  }

  // repeated uint64 arun64Belong3DPointIndex = 10 [packed = true];
  {
    int byte_size = _arun64belong3dpointindex_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          10, _internal_arun64belong3dpointindex(), byte_size, target);
    }
  }

  // float fSimilarity = 11;
  if (!(this->fsimilarity() <= 0 && this->fsimilarity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_fsimilarity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.PlaceVectorMeta_t)
  return target;
}

size_t PlaceVectorMeta_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.PlaceVectorMeta_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.common.XYZ64_t arstLocationSet = 7;
  total_size += 1UL * this->_internal_arstlocationset_size();
  for (const auto& msg : this->arstlocationset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 arun64UniqueIDofKeypoint = 9 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->arun64uniqueidofkeypoint_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arun64uniqueidofkeypoint_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 arun64Belong3DPointIndex = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->arun64belong3dpointindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arun64belong3dpointindex_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .VgeoDB.common.XYZ64_t stAvgLocation = 5;
  if (this->has_stavglocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stavglocation_);
  }

  // .VgeoDB.common.Orientation32_t stOrientaton = 6;
  if (this->has_storientaton()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *storientaton_);
  }

  // .VgeoDB.common.XYZ32_t stDirectionVector = 8;
  if (this->has_stdirectionvector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdirectionvector_);
  }

  // uint64 un64UniqueID = 1;
  if (this->un64uniqueid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64uniqueid());
  }

  // uint64 un64KeyframeIndex = 2;
  if (this->un64keyframeindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64keyframeindex());
  }

  // uint64 un64GroupID = 3;
  if (this->un64groupid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64groupid());
  }

  // uint64 un64Timestamp = 4;
  if (this->un64timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_un64timestamp());
  }

  // float fSimilarity = 11;
  if (!(this->fsimilarity() <= 0 && this->fsimilarity() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorMeta_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.PlaceVectorMeta_t)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorMeta_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorMeta_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.PlaceVectorMeta_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.PlaceVectorMeta_t)
    MergeFrom(*source);
  }
}

void PlaceVectorMeta_t::MergeFrom(const PlaceVectorMeta_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.PlaceVectorMeta_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstlocationset_.MergeFrom(from.arstlocationset_);
  arun64uniqueidofkeypoint_.MergeFrom(from.arun64uniqueidofkeypoint_);
  arun64belong3dpointindex_.MergeFrom(from.arun64belong3dpointindex_);
  if (from.has_stavglocation()) {
    _internal_mutable_stavglocation()->::VgeoDB::common::XYZ64_t::MergeFrom(from._internal_stavglocation());
  }
  if (from.has_storientaton()) {
    _internal_mutable_storientaton()->::VgeoDB::common::Orientation32_t::MergeFrom(from._internal_storientaton());
  }
  if (from.has_stdirectionvector()) {
    _internal_mutable_stdirectionvector()->::VgeoDB::common::XYZ32_t::MergeFrom(from._internal_stdirectionvector());
  }
  if (from.un64uniqueid() != 0) {
    _internal_set_un64uniqueid(from._internal_un64uniqueid());
  }
  if (from.un64keyframeindex() != 0) {
    _internal_set_un64keyframeindex(from._internal_un64keyframeindex());
  }
  if (from.un64groupid() != 0) {
    _internal_set_un64groupid(from._internal_un64groupid());
  }
  if (from.un64timestamp() != 0) {
    _internal_set_un64timestamp(from._internal_un64timestamp());
  }
  if (!(from.fsimilarity() <= 0 && from.fsimilarity() >= 0)) {
    _internal_set_fsimilarity(from._internal_fsimilarity());
  }
}

void PlaceVectorMeta_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.PlaceVectorMeta_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorMeta_t::CopyFrom(const PlaceVectorMeta_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.PlaceVectorMeta_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorMeta_t::IsInitialized() const {
  return true;
}

void PlaceVectorMeta_t::InternalSwap(PlaceVectorMeta_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstlocationset_.InternalSwap(&other->arstlocationset_);
  arun64uniqueidofkeypoint_.InternalSwap(&other->arun64uniqueidofkeypoint_);
  arun64belong3dpointindex_.InternalSwap(&other->arun64belong3dpointindex_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceVectorMeta_t, fsimilarity_)
      + sizeof(PlaceVectorMeta_t::fsimilarity_)
      - PROTOBUF_FIELD_OFFSET(PlaceVectorMeta_t, stavglocation_)>(
          reinterpret_cast<char*>(&stavglocation_),
          reinterpret_cast<char*>(&other->stavglocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorMeta_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NetVLADDesc_t::_Internal {
 public:
};

NetVLADDesc_t::NetVLADDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arfnetvladdescriptor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.NetVLADDesc_t)
}
NetVLADDesc_t::NetVLADDesc_t(const NetVLADDesc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arfnetvladdescriptor_(from.arfnetvladdescriptor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  etype_ = from.etype_;
  // @@protoc_insertion_point(copy_constructor:VgeoDB.NetVLADDesc_t)
}

void NetVLADDesc_t::SharedCtor() {
etype_ = 0;
}

NetVLADDesc_t::~NetVLADDesc_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.NetVLADDesc_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetVLADDesc_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetVLADDesc_t::ArenaDtor(void* object) {
  NetVLADDesc_t* _this = reinterpret_cast< NetVLADDesc_t* >(object);
  (void)_this;
}
void NetVLADDesc_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetVLADDesc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetVLADDesc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.NetVLADDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arfnetvladdescriptor_.Clear();
  etype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetVLADDesc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float arfNetVLADDescriptor = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arfnetvladdescriptor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_arfnetvladdescriptor(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.NetVLADDesc_t.eDescType eType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_etype(static_cast<::VgeoDB::NetVLADDesc_t_eDescType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetVLADDesc_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.NetVLADDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float arfNetVLADDescriptor = 1 [packed = true];
  if (this->_internal_arfnetvladdescriptor_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_arfnetvladdescriptor(), target);
  }

  // .VgeoDB.NetVLADDesc_t.eDescType eType = 2;
  if (this->etype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_etype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.NetVLADDesc_t)
  return target;
}

size_t NetVLADDesc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.NetVLADDesc_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float arfNetVLADDescriptor = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arfnetvladdescriptor_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arfnetvladdescriptor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .VgeoDB.NetVLADDesc_t.eDescType eType = 2;
  if (this->etype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetVLADDesc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.NetVLADDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const NetVLADDesc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetVLADDesc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.NetVLADDesc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.NetVLADDesc_t)
    MergeFrom(*source);
  }
}

void NetVLADDesc_t::MergeFrom(const NetVLADDesc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.NetVLADDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arfnetvladdescriptor_.MergeFrom(from.arfnetvladdescriptor_);
  if (from.etype() != 0) {
    _internal_set_etype(from._internal_etype());
  }
}

void NetVLADDesc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.NetVLADDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetVLADDesc_t::CopyFrom(const NetVLADDesc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.NetVLADDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetVLADDesc_t::IsInitialized() const {
  return true;
}

void NetVLADDesc_t::InternalSwap(NetVLADDesc_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arfnetvladdescriptor_.InternalSwap(&other->arfnetvladdescriptor_);
  swap(etype_, other->etype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetVLADDesc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GlobFeatDesc_t::_Internal {
 public:
};

GlobFeatDesc_t::GlobFeatDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arunglobfeatdescriptor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.GlobFeatDesc_t)
}
GlobFeatDesc_t::GlobFeatDesc_t(const GlobFeatDesc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arunglobfeatdescriptor_(from.arunglobfeatdescriptor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  etype_ = from.etype_;
  // @@protoc_insertion_point(copy_constructor:VgeoDB.GlobFeatDesc_t)
}

void GlobFeatDesc_t::SharedCtor() {
etype_ = 0;
}

GlobFeatDesc_t::~GlobFeatDesc_t() {
  // @@protoc_insertion_point(destructor:VgeoDB.GlobFeatDesc_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GlobFeatDesc_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GlobFeatDesc_t::ArenaDtor(void* object) {
  GlobFeatDesc_t* _this = reinterpret_cast< GlobFeatDesc_t* >(object);
  (void)_this;
}
void GlobFeatDesc_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GlobFeatDesc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GlobFeatDesc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.GlobFeatDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arunglobfeatdescriptor_.Clear();
  etype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GlobFeatDesc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 arunGlobFeatDescriptor = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_arunglobfeatdescriptor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_arunglobfeatdescriptor(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.GlobFeatDesc_t.eDescType eType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_etype(static_cast<::VgeoDB::GlobFeatDesc_t_eDescType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GlobFeatDesc_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.GlobFeatDesc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 arunGlobFeatDescriptor = 2 [packed = true];
  {
    int byte_size = _arunglobfeatdescriptor_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_arunglobfeatdescriptor(), byte_size, target);
    }
  }

  // .VgeoDB.GlobFeatDesc_t.eDescType eType = 3;
  if (this->etype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_etype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.GlobFeatDesc_t)
  return target;
}

size_t GlobFeatDesc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.GlobFeatDesc_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 arunGlobFeatDescriptor = 2 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->arunglobfeatdescriptor_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arunglobfeatdescriptor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .VgeoDB.GlobFeatDesc_t.eDescType eType = 3;
  if (this->etype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_etype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GlobFeatDesc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.GlobFeatDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobFeatDesc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GlobFeatDesc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.GlobFeatDesc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.GlobFeatDesc_t)
    MergeFrom(*source);
  }
}

void GlobFeatDesc_t::MergeFrom(const GlobFeatDesc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.GlobFeatDesc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arunglobfeatdescriptor_.MergeFrom(from.arunglobfeatdescriptor_);
  if (from.etype() != 0) {
    _internal_set_etype(from._internal_etype());
  }
}

void GlobFeatDesc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.GlobFeatDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobFeatDesc_t::CopyFrom(const GlobFeatDesc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.GlobFeatDesc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobFeatDesc_t::IsInitialized() const {
  return true;
}

void GlobFeatDesc_t::InternalSwap(GlobFeatDesc_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arunglobfeatdescriptor_.InternalSwap(&other->arunglobfeatdescriptor_);
  swap(etype_, other->etype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GlobFeatDesc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceVectorDesc::_Internal {
 public:
  static const ::VgeoDB::NetVLADDesc_t& stnetvladdescriptor(const PlaceVectorDesc* msg);
  static const ::VgeoDB::GlobFeatDesc_t& stglobfeatdescriptor(const PlaceVectorDesc* msg);
};

const ::VgeoDB::NetVLADDesc_t&
PlaceVectorDesc::_Internal::stnetvladdescriptor(const PlaceVectorDesc* msg) {
  return *msg->uDescriptor_.stnetvladdescriptor_;
}
const ::VgeoDB::GlobFeatDesc_t&
PlaceVectorDesc::_Internal::stglobfeatdescriptor(const PlaceVectorDesc* msg) {
  return *msg->uDescriptor_.stglobfeatdescriptor_;
}
void PlaceVectorDesc::set_allocated_stnetvladdescriptor(::VgeoDB::NetVLADDesc_t* stnetvladdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_uDescriptor();
  if (stnetvladdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stnetvladdescriptor);
    if (message_arena != submessage_arena) {
      stnetvladdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stnetvladdescriptor, submessage_arena);
    }
    set_has_stnetvladdescriptor();
    uDescriptor_.stnetvladdescriptor_ = stnetvladdescriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVectorDesc.stNetVLADDescriptor)
}
void PlaceVectorDesc::set_allocated_stglobfeatdescriptor(::VgeoDB::GlobFeatDesc_t* stglobfeatdescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_uDescriptor();
  if (stglobfeatdescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stglobfeatdescriptor);
    if (message_arena != submessage_arena) {
      stglobfeatdescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stglobfeatdescriptor, submessage_arena);
    }
    set_has_stglobfeatdescriptor();
    uDescriptor_.stglobfeatdescriptor_ = stglobfeatdescriptor;
  }
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVectorDesc.stGlobFeatDescriptor)
}
PlaceVectorDesc::PlaceVectorDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.PlaceVectorDesc)
}
PlaceVectorDesc::PlaceVectorDesc(const PlaceVectorDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_uDescriptor();
  switch (from.uDescriptor_case()) {
    case kStNetVLADDescriptor: {
      _internal_mutable_stnetvladdescriptor()->::VgeoDB::NetVLADDesc_t::MergeFrom(from._internal_stnetvladdescriptor());
      break;
    }
    case kStGlobFeatDescriptor: {
      _internal_mutable_stglobfeatdescriptor()->::VgeoDB::GlobFeatDesc_t::MergeFrom(from._internal_stglobfeatdescriptor());
      break;
    }
    case UDESCRIPTOR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.PlaceVectorDesc)
}

void PlaceVectorDesc::SharedCtor() {
clear_has_uDescriptor();
}

PlaceVectorDesc::~PlaceVectorDesc() {
  // @@protoc_insertion_point(destructor:VgeoDB.PlaceVectorDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_uDescriptor()) {
    clear_uDescriptor();
  }
}

void PlaceVectorDesc::ArenaDtor(void* object) {
  PlaceVectorDesc* _this = reinterpret_cast< PlaceVectorDesc* >(object);
  (void)_this;
}
void PlaceVectorDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorDesc::clear_uDescriptor() {
// @@protoc_insertion_point(one_of_clear_start:VgeoDB.PlaceVectorDesc)
  switch (uDescriptor_case()) {
    case kStNetVLADDescriptor: {
      if (GetArena() == nullptr) {
        delete uDescriptor_.stnetvladdescriptor_;
      }
      break;
    }
    case kStGlobFeatDescriptor: {
      if (GetArena() == nullptr) {
        delete uDescriptor_.stglobfeatdescriptor_;
      }
      break;
    }
    case UDESCRIPTOR_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UDESCRIPTOR_NOT_SET;
}


void PlaceVectorDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.PlaceVectorDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_uDescriptor();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.NetVLADDesc_t stNetVLADDescriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stnetvladdescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.GlobFeatDesc_t stGlobFeatDescriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stglobfeatdescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.PlaceVectorDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.NetVLADDesc_t stNetVLADDescriptor = 1;
  if (_internal_has_stnetvladdescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stnetvladdescriptor(this), target, stream);
  }

  // .VgeoDB.GlobFeatDesc_t stGlobFeatDescriptor = 2;
  if (_internal_has_stglobfeatdescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stglobfeatdescriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.PlaceVectorDesc)
  return target;
}

size_t PlaceVectorDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.PlaceVectorDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (uDescriptor_case()) {
    // .VgeoDB.NetVLADDesc_t stNetVLADDescriptor = 1;
    case kStNetVLADDescriptor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uDescriptor_.stnetvladdescriptor_);
      break;
    }
    // .VgeoDB.GlobFeatDesc_t stGlobFeatDescriptor = 2;
    case kStGlobFeatDescriptor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *uDescriptor_.stglobfeatdescriptor_);
      break;
    }
    case UDESCRIPTOR_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.PlaceVectorDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.PlaceVectorDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.PlaceVectorDesc)
    MergeFrom(*source);
  }
}

void PlaceVectorDesc::MergeFrom(const PlaceVectorDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.PlaceVectorDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.uDescriptor_case()) {
    case kStNetVLADDescriptor: {
      _internal_mutable_stnetvladdescriptor()->::VgeoDB::NetVLADDesc_t::MergeFrom(from._internal_stnetvladdescriptor());
      break;
    }
    case kStGlobFeatDescriptor: {
      _internal_mutable_stglobfeatdescriptor()->::VgeoDB::GlobFeatDesc_t::MergeFrom(from._internal_stglobfeatdescriptor());
      break;
    }
    case UDESCRIPTOR_NOT_SET: {
      break;
    }
  }
}

void PlaceVectorDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.PlaceVectorDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorDesc::CopyFrom(const PlaceVectorDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.PlaceVectorDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorDesc::IsInitialized() const {
  return true;
}

void PlaceVectorDesc::InternalSwap(PlaceVectorDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(uDescriptor_, other->uDescriptor_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceVector::_Internal {
 public:
  static const ::VgeoDB::PlaceVectorMeta_t& stmeta(const PlaceVector* msg);
  static const ::VgeoDB::PlaceVectorDesc& udescriptor(const PlaceVector* msg);
};

const ::VgeoDB::PlaceVectorMeta_t&
PlaceVector::_Internal::stmeta(const PlaceVector* msg) {
  return *msg->stmeta_;
}
const ::VgeoDB::PlaceVectorDesc&
PlaceVector::_Internal::udescriptor(const PlaceVector* msg) {
  return *msg->udescriptor_;
}
PlaceVector::PlaceVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.PlaceVector)
}
PlaceVector::PlaceVector(const PlaceVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stmeta()) {
    stmeta_ = new ::VgeoDB::PlaceVectorMeta_t(*from.stmeta_);
  } else {
    stmeta_ = nullptr;
  }
  if (from._internal_has_udescriptor()) {
    udescriptor_ = new ::VgeoDB::PlaceVectorDesc(*from.udescriptor_);
  } else {
    udescriptor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:VgeoDB.PlaceVector)
}

void PlaceVector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stmeta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&udescriptor_) -
    reinterpret_cast<char*>(&stmeta_)) + sizeof(udescriptor_));
}

PlaceVector::~PlaceVector() {
  // @@protoc_insertion_point(destructor:VgeoDB.PlaceVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stmeta_;
  if (this != internal_default_instance()) delete udescriptor_;
}

void PlaceVector::ArenaDtor(void* object) {
  PlaceVector* _this = reinterpret_cast< PlaceVector* >(object);
  (void)_this;
}
void PlaceVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVector::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.PlaceVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stmeta_ != nullptr) {
    delete stmeta_;
  }
  stmeta_ = nullptr;
  if (GetArena() == nullptr && udescriptor_ != nullptr) {
    delete udescriptor_;
  }
  udescriptor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .VgeoDB.PlaceVectorMeta_t stMeta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stmeta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_udescriptor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.PlaceVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .VgeoDB.PlaceVectorMeta_t stMeta = 1;
  if (this->has_stmeta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stmeta(this), target, stream);
  }

  // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
  if (this->has_udescriptor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::udescriptor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.PlaceVector)
  return target;
}

size_t PlaceVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.PlaceVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .VgeoDB.PlaceVectorMeta_t stMeta = 1;
  if (this->has_stmeta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stmeta_);
  }

  // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
  if (this->has_udescriptor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *udescriptor_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.PlaceVector)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.PlaceVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.PlaceVector)
    MergeFrom(*source);
  }
}

void PlaceVector::MergeFrom(const PlaceVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.PlaceVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stmeta()) {
    _internal_mutable_stmeta()->::VgeoDB::PlaceVectorMeta_t::MergeFrom(from._internal_stmeta());
  }
  if (from.has_udescriptor()) {
    _internal_mutable_udescriptor()->::VgeoDB::PlaceVectorDesc::MergeFrom(from._internal_udescriptor());
  }
}

void PlaceVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.PlaceVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVector::CopyFrom(const PlaceVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.PlaceVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVector::IsInitialized() const {
  return true;
}

void PlaceVector::InternalSwap(PlaceVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceVector, udescriptor_)
      + sizeof(PlaceVector::udescriptor_)
      - PROTOBUF_FIELD_OFFSET(PlaceVector, stmeta_)>(
          reinterpret_cast<char*>(&stmeta_),
          reinterpret_cast<char*>(&other->stmeta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlaceVectorSet::_Internal {
 public:
};

PlaceVectorSet::PlaceVectorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arstplacevector_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:VgeoDB.PlaceVectorSet)
}
PlaceVectorSet::PlaceVectorSet(const PlaceVectorSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arstplacevector_(from.arstplacevector_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:VgeoDB.PlaceVectorSet)
}

void PlaceVectorSet::SharedCtor() {
}

PlaceVectorSet::~PlaceVectorSet() {
  // @@protoc_insertion_point(destructor:VgeoDB.PlaceVectorSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorSet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlaceVectorSet::ArenaDtor(void* object) {
  PlaceVectorSet* _this = reinterpret_cast< PlaceVectorSet* >(object);
  (void)_this;
}
void PlaceVectorSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorSet::Clear() {
// @@protoc_insertion_point(message_clear_start:VgeoDB.PlaceVectorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arstplacevector_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .VgeoDB.PlaceVector arstPlaceVector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arstplacevector(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VgeoDB.PlaceVectorSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .VgeoDB.PlaceVector arstPlaceVector = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arstplacevector_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_arstplacevector(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VgeoDB.PlaceVectorSet)
  return target;
}

size_t PlaceVectorSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VgeoDB.PlaceVectorSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .VgeoDB.PlaceVector arstPlaceVector = 1;
  total_size += 1UL * this->_internal_arstplacevector_size();
  for (const auto& msg : this->arstplacevector_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VgeoDB.PlaceVectorSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VgeoDB.PlaceVectorSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VgeoDB.PlaceVectorSet)
    MergeFrom(*source);
  }
}

void PlaceVectorSet::MergeFrom(const PlaceVectorSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VgeoDB.PlaceVectorSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arstplacevector_.MergeFrom(from.arstplacevector_);
}

void PlaceVectorSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VgeoDB.PlaceVectorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorSet::CopyFrom(const PlaceVectorSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VgeoDB.PlaceVectorSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorSet::IsInitialized() const {
  return true;
}

void PlaceVectorSet::InternalSwap(PlaceVectorSet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arstplacevector_.InternalSwap(&other->arstplacevector_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorSet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VgeoDB::PlaceVectorMeta_t* Arena::CreateMaybeMessage< ::VgeoDB::PlaceVectorMeta_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::PlaceVectorMeta_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::NetVLADDesc_t* Arena::CreateMaybeMessage< ::VgeoDB::NetVLADDesc_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::NetVLADDesc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::GlobFeatDesc_t* Arena::CreateMaybeMessage< ::VgeoDB::GlobFeatDesc_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::GlobFeatDesc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::PlaceVectorDesc* Arena::CreateMaybeMessage< ::VgeoDB::PlaceVectorDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::PlaceVectorDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::PlaceVector* Arena::CreateMaybeMessage< ::VgeoDB::PlaceVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::PlaceVector >(arena);
}
template<> PROTOBUF_NOINLINE ::VgeoDB::PlaceVectorSet* Arena::CreateMaybeMessage< ::VgeoDB::PlaceVectorSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::VgeoDB::PlaceVectorSet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
