// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_camera.proto

#include "vp_camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vpdata {
namespace camera {
constexpr Camera_t::Camera_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imgdata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stextrinsic_(nullptr)
  , u64tscapture_(PROTOBUF_ULONGLONG(0))
  , ecameratype_(0)

  , ecodec_(0)

  , u16width_(0u)
  , u16height_(0u)
  , epixelformat_(0)
{}
struct Camera_tDefaultTypeInternal {
  constexpr Camera_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Camera_tDefaultTypeInternal() {}
  union {
    Camera_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Camera_tDefaultTypeInternal _Camera_t_default_instance_;
}  // namespace camera
}  // namespace vpdata
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vp_5fcamera_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vp_5fcamera_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vp_5fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vp_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, u64tscapture_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, ecameratype_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, ecodec_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, u16width_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, u16height_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, epixelformat_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, imgdata_),
  PROTOBUF_FIELD_OFFSET(::vpdata::camera::Camera_t, stextrinsic_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vpdata::camera::Camera_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::camera::_Camera_t_default_instance_),
};

const char descriptor_table_protodef_vp_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017vp_camera.proto\022\rvpdata.camera\032\023vgeodb"
  "_common.proto\"\204\007\n\010Camera_t\022\024\n\014u64TSCaptu"
  "re\030\001 \001(\004\0227\n\013eCameraType\030\002 \001(\0162\".vpdata.c"
  "amera.Camera_t.CameraType\022-\n\006eCodec\030\003 \001("
  "\0162\035.vpdata.camera.Camera_t.Codec\022\020\n\010u16W"
  "idth\030\004 \001(\r\022\021\n\tu16Height\030\005 \001(\r\0229\n\014ePixelF"
  "ormat\030\006 \001(\0162#.vpdata.camera.Camera_t.Pix"
  "elFormat\022\017\n\007imgData\030\007 \001(\014\022/\n\013stExtrinsic"
  "\030\013 \001(\0132\032.VgeoDB.common.Extrinsic_t\"\252\001\n\nC"
  "ameraType\022\020\n\014eCameraStart\020\000\022\014\n\010eFront_1\020"
  "\001\022\014\n\010eFront_2\020\002\022\016\n\neFront_End\020\004\022\013\n\007eBack"
  "_1\020\010\022\013\n\007eBack_2\020\020\022\013\n\007eBack_3\020 \022\013\n\007eBack_"
  "4\020@\022\014\n\007eBack_5\020\200\001\022\014\n\007eBack_6\020\200\002\022\016\n\teBack"
  "_End\020\200\004\"B\n\005Codec\022\022\n\016eUNKNOWN_CODEC\020\000\022\021\n\r"
  "eUNCOMPRESSED\020\001\022\010\n\004eJPG\020\002\022\010\n\004ePNG\020\003\"\346\002\n\013"
  "PixelFormat\022\023\n\017eUNKNOWN_FORMAT\020\000\022\t\n\005e8BI"
  "T\020\n\022\n\n\006eGRAY8\020\013\022\t\n\005eRGB8\020\014\022\t\n\005eBGR8\020\r\022\n\n"
  "\006e16BIT\020\024\022\013\n\007eGRAY12\020\025\022\013\n\007eGRAY14\020\026\022\013\n\007e"
  "GRAY16\020\027\022\n\n\006eRGB12\020\030\022\n\n\006eBGR12\020\031\022\n\n\006eRGB"
  "14\020\032\022\n\n\006eBGR14\020\033\022\n\n\006eRGB16\020\034\022\n\n\006eBGR16\020\035"
  "\022\n\n\006e32BIT\020\036\022\014\n\010eGRAY32U\020\037\022\013\n\007eRGB32U\020 \022"
  "\013\n\007eBGR32U\020!\022\014\n\010eGRAY32F\020\"\022\013\n\007eRGB32F\020#\022"
  "\013\n\007eBGR32F\020$\022\017\n\013eCOMPRESSED\0202\022\r\n\teYUV420"
  "P8\0203\022\016\n\neYUYV422I8\0204\022\016\n\neUYVY422I8\0205B\025\n\023"
  "msgmanager.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vp_5fcamera_2eproto_deps[1] = {
  &::descriptor_table_vgeodb_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vp_5fcamera_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fcamera_2eproto = {
  false, false, 987, descriptor_table_protodef_vp_5fcamera_2eproto, "vp_camera.proto", 
  &descriptor_table_vp_5fcamera_2eproto_once, descriptor_table_vp_5fcamera_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_vp_5fcamera_2eproto::offsets,
  file_level_metadata_vp_5fcamera_2eproto, file_level_enum_descriptors_vp_5fcamera_2eproto, file_level_service_descriptors_vp_5fcamera_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vp_5fcamera_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fcamera_2eproto);
  return descriptor_table_vp_5fcamera_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vp_5fcamera_2eproto(&descriptor_table_vp_5fcamera_2eproto);
namespace vpdata {
namespace camera {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camera_t_CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fcamera_2eproto);
  return file_level_enum_descriptors_vp_5fcamera_2eproto[0];
}
bool Camera_t_CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Camera_t_CameraType Camera_t::eCameraStart;
constexpr Camera_t_CameraType Camera_t::eFront_1;
constexpr Camera_t_CameraType Camera_t::eFront_2;
constexpr Camera_t_CameraType Camera_t::eFront_End;
constexpr Camera_t_CameraType Camera_t::eBack_1;
constexpr Camera_t_CameraType Camera_t::eBack_2;
constexpr Camera_t_CameraType Camera_t::eBack_3;
constexpr Camera_t_CameraType Camera_t::eBack_4;
constexpr Camera_t_CameraType Camera_t::eBack_5;
constexpr Camera_t_CameraType Camera_t::eBack_6;
constexpr Camera_t_CameraType Camera_t::eBack_End;
constexpr Camera_t_CameraType Camera_t::CameraType_MIN;
constexpr Camera_t_CameraType Camera_t::CameraType_MAX;
constexpr int Camera_t::CameraType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camera_t_Codec_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fcamera_2eproto);
  return file_level_enum_descriptors_vp_5fcamera_2eproto[1];
}
bool Camera_t_Codec_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Camera_t_Codec Camera_t::eUNKNOWN_CODEC;
constexpr Camera_t_Codec Camera_t::eUNCOMPRESSED;
constexpr Camera_t_Codec Camera_t::eJPG;
constexpr Camera_t_Codec Camera_t::ePNG;
constexpr Camera_t_Codec Camera_t::Codec_MIN;
constexpr Camera_t_Codec Camera_t::Codec_MAX;
constexpr int Camera_t::Codec_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Camera_t_PixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fcamera_2eproto);
  return file_level_enum_descriptors_vp_5fcamera_2eproto[2];
}
bool Camera_t_PixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 11:
    case 12:
    case 13:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 50:
    case 51:
    case 52:
    case 53:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Camera_t_PixelFormat Camera_t::eUNKNOWN_FORMAT;
constexpr Camera_t_PixelFormat Camera_t::e8BIT;
constexpr Camera_t_PixelFormat Camera_t::eGRAY8;
constexpr Camera_t_PixelFormat Camera_t::eRGB8;
constexpr Camera_t_PixelFormat Camera_t::eBGR8;
constexpr Camera_t_PixelFormat Camera_t::e16BIT;
constexpr Camera_t_PixelFormat Camera_t::eGRAY12;
constexpr Camera_t_PixelFormat Camera_t::eGRAY14;
constexpr Camera_t_PixelFormat Camera_t::eGRAY16;
constexpr Camera_t_PixelFormat Camera_t::eRGB12;
constexpr Camera_t_PixelFormat Camera_t::eBGR12;
constexpr Camera_t_PixelFormat Camera_t::eRGB14;
constexpr Camera_t_PixelFormat Camera_t::eBGR14;
constexpr Camera_t_PixelFormat Camera_t::eRGB16;
constexpr Camera_t_PixelFormat Camera_t::eBGR16;
constexpr Camera_t_PixelFormat Camera_t::e32BIT;
constexpr Camera_t_PixelFormat Camera_t::eGRAY32U;
constexpr Camera_t_PixelFormat Camera_t::eRGB32U;
constexpr Camera_t_PixelFormat Camera_t::eBGR32U;
constexpr Camera_t_PixelFormat Camera_t::eGRAY32F;
constexpr Camera_t_PixelFormat Camera_t::eRGB32F;
constexpr Camera_t_PixelFormat Camera_t::eBGR32F;
constexpr Camera_t_PixelFormat Camera_t::eCOMPRESSED;
constexpr Camera_t_PixelFormat Camera_t::eYUV420P8;
constexpr Camera_t_PixelFormat Camera_t::eYUYV422I8;
constexpr Camera_t_PixelFormat Camera_t::eUYVY422I8;
constexpr Camera_t_PixelFormat Camera_t::PixelFormat_MIN;
constexpr Camera_t_PixelFormat Camera_t::PixelFormat_MAX;
constexpr int Camera_t::PixelFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Camera_t::_Internal {
 public:
  static const ::VgeoDB::common::Extrinsic_t& stextrinsic(const Camera_t* msg);
};

const ::VgeoDB::common::Extrinsic_t&
Camera_t::_Internal::stextrinsic(const Camera_t* msg) {
  return *msg->stextrinsic_;
}
void Camera_t::clear_stextrinsic() {
  if (GetArena() == nullptr && stextrinsic_ != nullptr) {
    delete stextrinsic_;
  }
  stextrinsic_ = nullptr;
}
Camera_t::Camera_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.camera.Camera_t)
}
Camera_t::Camera_t(const Camera_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_imgdata().empty()) {
    imgdata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_imgdata(), 
      GetArena());
  }
  if (from._internal_has_stextrinsic()) {
    stextrinsic_ = new ::VgeoDB::common::Extrinsic_t(*from.stextrinsic_);
  } else {
    stextrinsic_ = nullptr;
  }
  ::memcpy(&u64tscapture_, &from.u64tscapture_,
    static_cast<size_t>(reinterpret_cast<char*>(&epixelformat_) -
    reinterpret_cast<char*>(&u64tscapture_)) + sizeof(epixelformat_));
  // @@protoc_insertion_point(copy_constructor:vpdata.camera.Camera_t)
}

void Camera_t::SharedCtor() {
imgdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stextrinsic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epixelformat_) -
    reinterpret_cast<char*>(&stextrinsic_)) + sizeof(epixelformat_));
}

Camera_t::~Camera_t() {
  // @@protoc_insertion_point(destructor:vpdata.camera.Camera_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Camera_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  imgdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete stextrinsic_;
}

void Camera_t::ArenaDtor(void* object) {
  Camera_t* _this = reinterpret_cast< Camera_t* >(object);
  (void)_this;
}
void Camera_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Camera_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Camera_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.camera.Camera_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imgdata_.ClearToEmpty();
  if (GetArena() == nullptr && stextrinsic_ != nullptr) {
    delete stextrinsic_;
  }
  stextrinsic_ = nullptr;
  ::memset(&u64tscapture_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epixelformat_) -
      reinterpret_cast<char*>(&u64tscapture_)) + sizeof(epixelformat_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Camera_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 u64TSCapture = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          u64tscapture_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vpdata.camera.Camera_t.CameraType eCameraType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecameratype(static_cast<::vpdata::camera::Camera_t_CameraType>(val));
        } else goto handle_unusual;
        continue;
      // .vpdata.camera.Camera_t.Codec eCodec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ecodec(static_cast<::vpdata::camera::Camera_t_Codec>(val));
        } else goto handle_unusual;
        continue;
      // uint32 u16Width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          u16width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 u16Height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          u16height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vpdata.camera.Camera_t.PixelFormat ePixelFormat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_epixelformat(static_cast<::vpdata::camera::Camera_t_PixelFormat>(val));
        } else goto handle_unusual;
        continue;
      // bytes imgData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_imgdata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .VgeoDB.common.Extrinsic_t stExtrinsic = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_stextrinsic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Camera_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.camera.Camera_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_u64tscapture(), target);
  }

  // .vpdata.camera.Camera_t.CameraType eCameraType = 2;
  if (this->ecameratype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ecameratype(), target);
  }

  // .vpdata.camera.Camera_t.Codec eCodec = 3;
  if (this->ecodec() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_ecodec(), target);
  }

  // uint32 u16Width = 4;
  if (this->u16width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_u16width(), target);
  }

  // uint32 u16Height = 5;
  if (this->u16height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_u16height(), target);
  }

  // .vpdata.camera.Camera_t.PixelFormat ePixelFormat = 6;
  if (this->epixelformat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_epixelformat(), target);
  }

  // bytes imgData = 7;
  if (this->imgdata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_imgdata(), target);
  }

  // .VgeoDB.common.Extrinsic_t stExtrinsic = 11;
  if (this->has_stextrinsic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::stextrinsic(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.camera.Camera_t)
  return target;
}

size_t Camera_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.camera.Camera_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes imgData = 7;
  if (this->imgdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imgdata());
  }

  // .VgeoDB.common.Extrinsic_t stExtrinsic = 11;
  if (this->has_stextrinsic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stextrinsic_);
  }

  // uint64 u64TSCapture = 1;
  if (this->u64tscapture() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tscapture());
  }

  // .vpdata.camera.Camera_t.CameraType eCameraType = 2;
  if (this->ecameratype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecameratype());
  }

  // .vpdata.camera.Camera_t.Codec eCodec = 3;
  if (this->ecodec() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecodec());
  }

  // uint32 u16Width = 4;
  if (this->u16width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u16width());
  }

  // uint32 u16Height = 5;
  if (this->u16height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u16height());
  }

  // .vpdata.camera.Camera_t.PixelFormat ePixelFormat = 6;
  if (this->epixelformat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_epixelformat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Camera_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.camera.Camera_t)
  GOOGLE_DCHECK_NE(&from, this);
  const Camera_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Camera_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.camera.Camera_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.camera.Camera_t)
    MergeFrom(*source);
  }
}

void Camera_t::MergeFrom(const Camera_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.camera.Camera_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.imgdata().size() > 0) {
    _internal_set_imgdata(from._internal_imgdata());
  }
  if (from.has_stextrinsic()) {
    _internal_mutable_stextrinsic()->::VgeoDB::common::Extrinsic_t::MergeFrom(from._internal_stextrinsic());
  }
  if (from.u64tscapture() != 0) {
    _internal_set_u64tscapture(from._internal_u64tscapture());
  }
  if (from.ecameratype() != 0) {
    _internal_set_ecameratype(from._internal_ecameratype());
  }
  if (from.ecodec() != 0) {
    _internal_set_ecodec(from._internal_ecodec());
  }
  if (from.u16width() != 0) {
    _internal_set_u16width(from._internal_u16width());
  }
  if (from.u16height() != 0) {
    _internal_set_u16height(from._internal_u16height());
  }
  if (from.epixelformat() != 0) {
    _internal_set_epixelformat(from._internal_epixelformat());
  }
}

void Camera_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.camera.Camera_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Camera_t::CopyFrom(const Camera_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.camera.Camera_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Camera_t::IsInitialized() const {
  return true;
}

void Camera_t::InternalSwap(Camera_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  imgdata_.Swap(&other->imgdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Camera_t, epixelformat_)
      + sizeof(Camera_t::epixelformat_)
      - PROTOBUF_FIELD_OFFSET(Camera_t, stextrinsic_)>(
          reinterpret_cast<char*>(&stextrinsic_),
          reinterpret_cast<char*>(&other->stextrinsic_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Camera_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace camera
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vpdata::camera::Camera_t* Arena::CreateMaybeMessage< ::vpdata::camera::Camera_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::camera::Camera_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
