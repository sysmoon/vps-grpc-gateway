// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: placevector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_placevector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_placevector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "vgeodb_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_placevector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_placevector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_placevector_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_placevector_2eproto_metadata_getter(int index);
namespace VgeoDB {
class GlobFeatDesc_t;
struct GlobFeatDesc_tDefaultTypeInternal;
extern GlobFeatDesc_tDefaultTypeInternal _GlobFeatDesc_t_default_instance_;
class NetVLADDesc_t;
struct NetVLADDesc_tDefaultTypeInternal;
extern NetVLADDesc_tDefaultTypeInternal _NetVLADDesc_t_default_instance_;
class PlaceVector;
struct PlaceVectorDefaultTypeInternal;
extern PlaceVectorDefaultTypeInternal _PlaceVector_default_instance_;
class PlaceVectorDesc;
struct PlaceVectorDescDefaultTypeInternal;
extern PlaceVectorDescDefaultTypeInternal _PlaceVectorDesc_default_instance_;
class PlaceVectorMeta_t;
struct PlaceVectorMeta_tDefaultTypeInternal;
extern PlaceVectorMeta_tDefaultTypeInternal _PlaceVectorMeta_t_default_instance_;
class PlaceVectorSet;
struct PlaceVectorSetDefaultTypeInternal;
extern PlaceVectorSetDefaultTypeInternal _PlaceVectorSet_default_instance_;
}  // namespace VgeoDB
PROTOBUF_NAMESPACE_OPEN
template<> ::VgeoDB::GlobFeatDesc_t* Arena::CreateMaybeMessage<::VgeoDB::GlobFeatDesc_t>(Arena*);
template<> ::VgeoDB::NetVLADDesc_t* Arena::CreateMaybeMessage<::VgeoDB::NetVLADDesc_t>(Arena*);
template<> ::VgeoDB::PlaceVector* Arena::CreateMaybeMessage<::VgeoDB::PlaceVector>(Arena*);
template<> ::VgeoDB::PlaceVectorDesc* Arena::CreateMaybeMessage<::VgeoDB::PlaceVectorDesc>(Arena*);
template<> ::VgeoDB::PlaceVectorMeta_t* Arena::CreateMaybeMessage<::VgeoDB::PlaceVectorMeta_t>(Arena*);
template<> ::VgeoDB::PlaceVectorSet* Arena::CreateMaybeMessage<::VgeoDB::PlaceVectorSet>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace VgeoDB {

enum NetVLADDesc_t_eDescType : int {
  NetVLADDesc_t_eDescType_VLAD_4096_v1 = 0,
  NetVLADDesc_t_eDescType_NetVLADDesc_t_eDescType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NetVLADDesc_t_eDescType_NetVLADDesc_t_eDescType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NetVLADDesc_t_eDescType_IsValid(int value);
constexpr NetVLADDesc_t_eDescType NetVLADDesc_t_eDescType_eDescType_MIN = NetVLADDesc_t_eDescType_VLAD_4096_v1;
constexpr NetVLADDesc_t_eDescType NetVLADDesc_t_eDescType_eDescType_MAX = NetVLADDesc_t_eDescType_VLAD_4096_v1;
constexpr int NetVLADDesc_t_eDescType_eDescType_ARRAYSIZE = NetVLADDesc_t_eDescType_eDescType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetVLADDesc_t_eDescType_descriptor();
template<typename T>
inline const std::string& NetVLADDesc_t_eDescType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetVLADDesc_t_eDescType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetVLADDesc_t_eDescType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetVLADDesc_t_eDescType_descriptor(), enum_t_value);
}
inline bool NetVLADDesc_t_eDescType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NetVLADDesc_t_eDescType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetVLADDesc_t_eDescType>(
    NetVLADDesc_t_eDescType_descriptor(), name, value);
}
enum GlobFeatDesc_t_eDescType : int {
  GlobFeatDesc_t_eDescType_GLOB_8192_v1 = 0,
  GlobFeatDesc_t_eDescType_GlobFeatDesc_t_eDescType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GlobFeatDesc_t_eDescType_GlobFeatDesc_t_eDescType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GlobFeatDesc_t_eDescType_IsValid(int value);
constexpr GlobFeatDesc_t_eDescType GlobFeatDesc_t_eDescType_eDescType_MIN = GlobFeatDesc_t_eDescType_GLOB_8192_v1;
constexpr GlobFeatDesc_t_eDescType GlobFeatDesc_t_eDescType_eDescType_MAX = GlobFeatDesc_t_eDescType_GLOB_8192_v1;
constexpr int GlobFeatDesc_t_eDescType_eDescType_ARRAYSIZE = GlobFeatDesc_t_eDescType_eDescType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GlobFeatDesc_t_eDescType_descriptor();
template<typename T>
inline const std::string& GlobFeatDesc_t_eDescType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GlobFeatDesc_t_eDescType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GlobFeatDesc_t_eDescType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GlobFeatDesc_t_eDescType_descriptor(), enum_t_value);
}
inline bool GlobFeatDesc_t_eDescType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GlobFeatDesc_t_eDescType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GlobFeatDesc_t_eDescType>(
    GlobFeatDesc_t_eDescType_descriptor(), name, value);
}
// ===================================================================

class PlaceVectorMeta_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.PlaceVectorMeta_t) */ {
 public:
  inline PlaceVectorMeta_t() : PlaceVectorMeta_t(nullptr) {}
  virtual ~PlaceVectorMeta_t();
  explicit constexpr PlaceVectorMeta_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVectorMeta_t(const PlaceVectorMeta_t& from);
  PlaceVectorMeta_t(PlaceVectorMeta_t&& from) noexcept
    : PlaceVectorMeta_t() {
    *this = ::std::move(from);
  }

  inline PlaceVectorMeta_t& operator=(const PlaceVectorMeta_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVectorMeta_t& operator=(PlaceVectorMeta_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVectorMeta_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceVectorMeta_t* internal_default_instance() {
    return reinterpret_cast<const PlaceVectorMeta_t*>(
               &_PlaceVectorMeta_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlaceVectorMeta_t& a, PlaceVectorMeta_t& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVectorMeta_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVectorMeta_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVectorMeta_t* New() const final {
    return CreateMaybeMessage<PlaceVectorMeta_t>(nullptr);
  }

  PlaceVectorMeta_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVectorMeta_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVectorMeta_t& from);
  void MergeFrom(const PlaceVectorMeta_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVectorMeta_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.PlaceVectorMeta_t";
  }
  protected:
  explicit PlaceVectorMeta_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_placevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstLocationSetFieldNumber = 7,
    kArun64UniqueIDofKeypointFieldNumber = 9,
    kArun64Belong3DPointIndexFieldNumber = 10,
    kStAvgLocationFieldNumber = 5,
    kStOrientatonFieldNumber = 6,
    kStDirectionVectorFieldNumber = 8,
    kUn64UniqueIDFieldNumber = 1,
    kUn64KeyframeIndexFieldNumber = 2,
    kUn64GroupIDFieldNumber = 3,
    kUn64TimestampFieldNumber = 4,
    kFSimilarityFieldNumber = 11,
  };
  // repeated .VgeoDB.common.XYZ64_t arstLocationSet = 7;
  int arstlocationset_size() const;
  private:
  int _internal_arstlocationset_size() const;
  public:
  void clear_arstlocationset();
  ::VgeoDB::common::XYZ64_t* mutable_arstlocationset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::XYZ64_t >*
      mutable_arstlocationset();
  private:
  const ::VgeoDB::common::XYZ64_t& _internal_arstlocationset(int index) const;
  ::VgeoDB::common::XYZ64_t* _internal_add_arstlocationset();
  public:
  const ::VgeoDB::common::XYZ64_t& arstlocationset(int index) const;
  ::VgeoDB::common::XYZ64_t* add_arstlocationset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::XYZ64_t >&
      arstlocationset() const;

  // repeated uint64 arun64UniqueIDofKeypoint = 9 [packed = true];
  int arun64uniqueidofkeypoint_size() const;
  private:
  int _internal_arun64uniqueidofkeypoint_size() const;
  public:
  void clear_arun64uniqueidofkeypoint();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_arun64uniqueidofkeypoint(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_arun64uniqueidofkeypoint() const;
  void _internal_add_arun64uniqueidofkeypoint(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_arun64uniqueidofkeypoint();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 arun64uniqueidofkeypoint(int index) const;
  void set_arun64uniqueidofkeypoint(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_arun64uniqueidofkeypoint(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      arun64uniqueidofkeypoint() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_arun64uniqueidofkeypoint();

  // repeated uint64 arun64Belong3DPointIndex = 10 [packed = true];
  int arun64belong3dpointindex_size() const;
  private:
  int _internal_arun64belong3dpointindex_size() const;
  public:
  void clear_arun64belong3dpointindex();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_arun64belong3dpointindex(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_arun64belong3dpointindex() const;
  void _internal_add_arun64belong3dpointindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_arun64belong3dpointindex();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 arun64belong3dpointindex(int index) const;
  void set_arun64belong3dpointindex(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_arun64belong3dpointindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      arun64belong3dpointindex() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_arun64belong3dpointindex();

  // .VgeoDB.common.XYZ64_t stAvgLocation = 5;
  bool has_stavglocation() const;
  private:
  bool _internal_has_stavglocation() const;
  public:
  void clear_stavglocation();
  const ::VgeoDB::common::XYZ64_t& stavglocation() const;
  ::VgeoDB::common::XYZ64_t* release_stavglocation();
  ::VgeoDB::common::XYZ64_t* mutable_stavglocation();
  void set_allocated_stavglocation(::VgeoDB::common::XYZ64_t* stavglocation);
  private:
  const ::VgeoDB::common::XYZ64_t& _internal_stavglocation() const;
  ::VgeoDB::common::XYZ64_t* _internal_mutable_stavglocation();
  public:
  void unsafe_arena_set_allocated_stavglocation(
      ::VgeoDB::common::XYZ64_t* stavglocation);
  ::VgeoDB::common::XYZ64_t* unsafe_arena_release_stavglocation();

  // .VgeoDB.common.Orientation32_t stOrientaton = 6;
  bool has_storientaton() const;
  private:
  bool _internal_has_storientaton() const;
  public:
  void clear_storientaton();
  const ::VgeoDB::common::Orientation32_t& storientaton() const;
  ::VgeoDB::common::Orientation32_t* release_storientaton();
  ::VgeoDB::common::Orientation32_t* mutable_storientaton();
  void set_allocated_storientaton(::VgeoDB::common::Orientation32_t* storientaton);
  private:
  const ::VgeoDB::common::Orientation32_t& _internal_storientaton() const;
  ::VgeoDB::common::Orientation32_t* _internal_mutable_storientaton();
  public:
  void unsafe_arena_set_allocated_storientaton(
      ::VgeoDB::common::Orientation32_t* storientaton);
  ::VgeoDB::common::Orientation32_t* unsafe_arena_release_storientaton();

  // .VgeoDB.common.XYZ32_t stDirectionVector = 8;
  bool has_stdirectionvector() const;
  private:
  bool _internal_has_stdirectionvector() const;
  public:
  void clear_stdirectionvector();
  const ::VgeoDB::common::XYZ32_t& stdirectionvector() const;
  ::VgeoDB::common::XYZ32_t* release_stdirectionvector();
  ::VgeoDB::common::XYZ32_t* mutable_stdirectionvector();
  void set_allocated_stdirectionvector(::VgeoDB::common::XYZ32_t* stdirectionvector);
  private:
  const ::VgeoDB::common::XYZ32_t& _internal_stdirectionvector() const;
  ::VgeoDB::common::XYZ32_t* _internal_mutable_stdirectionvector();
  public:
  void unsafe_arena_set_allocated_stdirectionvector(
      ::VgeoDB::common::XYZ32_t* stdirectionvector);
  ::VgeoDB::common::XYZ32_t* unsafe_arena_release_stdirectionvector();

  // uint64 un64UniqueID = 1;
  void clear_un64uniqueid();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64uniqueid() const;
  void set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64uniqueid() const;
  void _internal_set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64KeyframeIndex = 2;
  void clear_un64keyframeindex();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64keyframeindex() const;
  void set_un64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64keyframeindex() const;
  void _internal_set_un64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64GroupID = 3;
  void clear_un64groupid();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64groupid() const;
  void set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64groupid() const;
  void _internal_set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 un64Timestamp = 4;
  void clear_un64timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 un64timestamp() const;
  void set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_un64timestamp() const;
  void _internal_set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float fSimilarity = 11;
  void clear_fsimilarity();
  float fsimilarity() const;
  void set_fsimilarity(float value);
  private:
  float _internal_fsimilarity() const;
  void _internal_set_fsimilarity(float value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.PlaceVectorMeta_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::XYZ64_t > arstlocationset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > arun64uniqueidofkeypoint_;
  mutable std::atomic<int> _arun64uniqueidofkeypoint_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > arun64belong3dpointindex_;
  mutable std::atomic<int> _arun64belong3dpointindex_cached_byte_size_;
  ::VgeoDB::common::XYZ64_t* stavglocation_;
  ::VgeoDB::common::Orientation32_t* storientaton_;
  ::VgeoDB::common::XYZ32_t* stdirectionvector_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64keyframeindex_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64groupid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 un64timestamp_;
  float fsimilarity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_placevector_2eproto;
};
// -------------------------------------------------------------------

class NetVLADDesc_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.NetVLADDesc_t) */ {
 public:
  inline NetVLADDesc_t() : NetVLADDesc_t(nullptr) {}
  virtual ~NetVLADDesc_t();
  explicit constexpr NetVLADDesc_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetVLADDesc_t(const NetVLADDesc_t& from);
  NetVLADDesc_t(NetVLADDesc_t&& from) noexcept
    : NetVLADDesc_t() {
    *this = ::std::move(from);
  }

  inline NetVLADDesc_t& operator=(const NetVLADDesc_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetVLADDesc_t& operator=(NetVLADDesc_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetVLADDesc_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetVLADDesc_t* internal_default_instance() {
    return reinterpret_cast<const NetVLADDesc_t*>(
               &_NetVLADDesc_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetVLADDesc_t& a, NetVLADDesc_t& b) {
    a.Swap(&b);
  }
  inline void Swap(NetVLADDesc_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetVLADDesc_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetVLADDesc_t* New() const final {
    return CreateMaybeMessage<NetVLADDesc_t>(nullptr);
  }

  NetVLADDesc_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetVLADDesc_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetVLADDesc_t& from);
  void MergeFrom(const NetVLADDesc_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetVLADDesc_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.NetVLADDesc_t";
  }
  protected:
  explicit NetVLADDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_placevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef NetVLADDesc_t_eDescType eDescType;
  static constexpr eDescType VLAD_4096_v1 =
    NetVLADDesc_t_eDescType_VLAD_4096_v1;
  static inline bool eDescType_IsValid(int value) {
    return NetVLADDesc_t_eDescType_IsValid(value);
  }
  static constexpr eDescType eDescType_MIN =
    NetVLADDesc_t_eDescType_eDescType_MIN;
  static constexpr eDescType eDescType_MAX =
    NetVLADDesc_t_eDescType_eDescType_MAX;
  static constexpr int eDescType_ARRAYSIZE =
    NetVLADDesc_t_eDescType_eDescType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eDescType_descriptor() {
    return NetVLADDesc_t_eDescType_descriptor();
  }
  template<typename T>
  static inline const std::string& eDescType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eDescType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eDescType_Name.");
    return NetVLADDesc_t_eDescType_Name(enum_t_value);
  }
  static inline bool eDescType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eDescType* value) {
    return NetVLADDesc_t_eDescType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArfNetVLADDescriptorFieldNumber = 1,
    kETypeFieldNumber = 2,
  };
  // repeated float arfNetVLADDescriptor = 1 [packed = true];
  int arfnetvladdescriptor_size() const;
  private:
  int _internal_arfnetvladdescriptor_size() const;
  public:
  void clear_arfnetvladdescriptor();
  private:
  float _internal_arfnetvladdescriptor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arfnetvladdescriptor() const;
  void _internal_add_arfnetvladdescriptor(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arfnetvladdescriptor();
  public:
  float arfnetvladdescriptor(int index) const;
  void set_arfnetvladdescriptor(int index, float value);
  void add_arfnetvladdescriptor(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arfnetvladdescriptor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arfnetvladdescriptor();

  // .VgeoDB.NetVLADDesc_t.eDescType eType = 2;
  void clear_etype();
  ::VgeoDB::NetVLADDesc_t_eDescType etype() const;
  void set_etype(::VgeoDB::NetVLADDesc_t_eDescType value);
  private:
  ::VgeoDB::NetVLADDesc_t_eDescType _internal_etype() const;
  void _internal_set_etype(::VgeoDB::NetVLADDesc_t_eDescType value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.NetVLADDesc_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arfnetvladdescriptor_;
  mutable std::atomic<int> _arfnetvladdescriptor_cached_byte_size_;
  int etype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_placevector_2eproto;
};
// -------------------------------------------------------------------

class GlobFeatDesc_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.GlobFeatDesc_t) */ {
 public:
  inline GlobFeatDesc_t() : GlobFeatDesc_t(nullptr) {}
  virtual ~GlobFeatDesc_t();
  explicit constexpr GlobFeatDesc_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GlobFeatDesc_t(const GlobFeatDesc_t& from);
  GlobFeatDesc_t(GlobFeatDesc_t&& from) noexcept
    : GlobFeatDesc_t() {
    *this = ::std::move(from);
  }

  inline GlobFeatDesc_t& operator=(const GlobFeatDesc_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline GlobFeatDesc_t& operator=(GlobFeatDesc_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GlobFeatDesc_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const GlobFeatDesc_t* internal_default_instance() {
    return reinterpret_cast<const GlobFeatDesc_t*>(
               &_GlobFeatDesc_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GlobFeatDesc_t& a, GlobFeatDesc_t& b) {
    a.Swap(&b);
  }
  inline void Swap(GlobFeatDesc_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GlobFeatDesc_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GlobFeatDesc_t* New() const final {
    return CreateMaybeMessage<GlobFeatDesc_t>(nullptr);
  }

  GlobFeatDesc_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GlobFeatDesc_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GlobFeatDesc_t& from);
  void MergeFrom(const GlobFeatDesc_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GlobFeatDesc_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.GlobFeatDesc_t";
  }
  protected:
  explicit GlobFeatDesc_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_placevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef GlobFeatDesc_t_eDescType eDescType;
  static constexpr eDescType GLOB_8192_v1 =
    GlobFeatDesc_t_eDescType_GLOB_8192_v1;
  static inline bool eDescType_IsValid(int value) {
    return GlobFeatDesc_t_eDescType_IsValid(value);
  }
  static constexpr eDescType eDescType_MIN =
    GlobFeatDesc_t_eDescType_eDescType_MIN;
  static constexpr eDescType eDescType_MAX =
    GlobFeatDesc_t_eDescType_eDescType_MAX;
  static constexpr int eDescType_ARRAYSIZE =
    GlobFeatDesc_t_eDescType_eDescType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  eDescType_descriptor() {
    return GlobFeatDesc_t_eDescType_descriptor();
  }
  template<typename T>
  static inline const std::string& eDescType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, eDescType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function eDescType_Name.");
    return GlobFeatDesc_t_eDescType_Name(enum_t_value);
  }
  static inline bool eDescType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      eDescType* value) {
    return GlobFeatDesc_t_eDescType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArunGlobFeatDescriptorFieldNumber = 2,
    kETypeFieldNumber = 3,
  };
  // repeated uint32 arunGlobFeatDescriptor = 2 [packed = true];
  int arunglobfeatdescriptor_size() const;
  private:
  int _internal_arunglobfeatdescriptor_size() const;
  public:
  void clear_arunglobfeatdescriptor();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_arunglobfeatdescriptor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_arunglobfeatdescriptor() const;
  void _internal_add_arunglobfeatdescriptor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_arunglobfeatdescriptor();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 arunglobfeatdescriptor(int index) const;
  void set_arunglobfeatdescriptor(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_arunglobfeatdescriptor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      arunglobfeatdescriptor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_arunglobfeatdescriptor();

  // .VgeoDB.GlobFeatDesc_t.eDescType eType = 3;
  void clear_etype();
  ::VgeoDB::GlobFeatDesc_t_eDescType etype() const;
  void set_etype(::VgeoDB::GlobFeatDesc_t_eDescType value);
  private:
  ::VgeoDB::GlobFeatDesc_t_eDescType _internal_etype() const;
  void _internal_set_etype(::VgeoDB::GlobFeatDesc_t_eDescType value);
  public:

  // @@protoc_insertion_point(class_scope:VgeoDB.GlobFeatDesc_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > arunglobfeatdescriptor_;
  mutable std::atomic<int> _arunglobfeatdescriptor_cached_byte_size_;
  int etype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_placevector_2eproto;
};
// -------------------------------------------------------------------

class PlaceVectorDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.PlaceVectorDesc) */ {
 public:
  inline PlaceVectorDesc() : PlaceVectorDesc(nullptr) {}
  virtual ~PlaceVectorDesc();
  explicit constexpr PlaceVectorDesc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVectorDesc(const PlaceVectorDesc& from);
  PlaceVectorDesc(PlaceVectorDesc&& from) noexcept
    : PlaceVectorDesc() {
    *this = ::std::move(from);
  }

  inline PlaceVectorDesc& operator=(const PlaceVectorDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVectorDesc& operator=(PlaceVectorDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVectorDesc& default_instance() {
    return *internal_default_instance();
  }
  enum UDescriptorCase {
    kStNetVLADDescriptor = 1,
    kStGlobFeatDescriptor = 2,
    UDESCRIPTOR_NOT_SET = 0,
  };

  static inline const PlaceVectorDesc* internal_default_instance() {
    return reinterpret_cast<const PlaceVectorDesc*>(
               &_PlaceVectorDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlaceVectorDesc& a, PlaceVectorDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVectorDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVectorDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVectorDesc* New() const final {
    return CreateMaybeMessage<PlaceVectorDesc>(nullptr);
  }

  PlaceVectorDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVectorDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVectorDesc& from);
  void MergeFrom(const PlaceVectorDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVectorDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.PlaceVectorDesc";
  }
  protected:
  explicit PlaceVectorDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_placevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStNetVLADDescriptorFieldNumber = 1,
    kStGlobFeatDescriptorFieldNumber = 2,
  };
  // .VgeoDB.NetVLADDesc_t stNetVLADDescriptor = 1;
  bool has_stnetvladdescriptor() const;
  private:
  bool _internal_has_stnetvladdescriptor() const;
  public:
  void clear_stnetvladdescriptor();
  const ::VgeoDB::NetVLADDesc_t& stnetvladdescriptor() const;
  ::VgeoDB::NetVLADDesc_t* release_stnetvladdescriptor();
  ::VgeoDB::NetVLADDesc_t* mutable_stnetvladdescriptor();
  void set_allocated_stnetvladdescriptor(::VgeoDB::NetVLADDesc_t* stnetvladdescriptor);
  private:
  const ::VgeoDB::NetVLADDesc_t& _internal_stnetvladdescriptor() const;
  ::VgeoDB::NetVLADDesc_t* _internal_mutable_stnetvladdescriptor();
  public:
  void unsafe_arena_set_allocated_stnetvladdescriptor(
      ::VgeoDB::NetVLADDesc_t* stnetvladdescriptor);
  ::VgeoDB::NetVLADDesc_t* unsafe_arena_release_stnetvladdescriptor();

  // .VgeoDB.GlobFeatDesc_t stGlobFeatDescriptor = 2;
  bool has_stglobfeatdescriptor() const;
  private:
  bool _internal_has_stglobfeatdescriptor() const;
  public:
  void clear_stglobfeatdescriptor();
  const ::VgeoDB::GlobFeatDesc_t& stglobfeatdescriptor() const;
  ::VgeoDB::GlobFeatDesc_t* release_stglobfeatdescriptor();
  ::VgeoDB::GlobFeatDesc_t* mutable_stglobfeatdescriptor();
  void set_allocated_stglobfeatdescriptor(::VgeoDB::GlobFeatDesc_t* stglobfeatdescriptor);
  private:
  const ::VgeoDB::GlobFeatDesc_t& _internal_stglobfeatdescriptor() const;
  ::VgeoDB::GlobFeatDesc_t* _internal_mutable_stglobfeatdescriptor();
  public:
  void unsafe_arena_set_allocated_stglobfeatdescriptor(
      ::VgeoDB::GlobFeatDesc_t* stglobfeatdescriptor);
  ::VgeoDB::GlobFeatDesc_t* unsafe_arena_release_stglobfeatdescriptor();

  void clear_uDescriptor();
  UDescriptorCase uDescriptor_case() const;
  // @@protoc_insertion_point(class_scope:VgeoDB.PlaceVectorDesc)
 private:
  class _Internal;
  void set_has_stnetvladdescriptor();
  void set_has_stglobfeatdescriptor();

  inline bool has_uDescriptor() const;
  inline void clear_has_uDescriptor();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union UDescriptorUnion {
    constexpr UDescriptorUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::VgeoDB::NetVLADDesc_t* stnetvladdescriptor_;
    ::VgeoDB::GlobFeatDesc_t* stglobfeatdescriptor_;
  } uDescriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_placevector_2eproto;
};
// -------------------------------------------------------------------

class PlaceVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.PlaceVector) */ {
 public:
  inline PlaceVector() : PlaceVector(nullptr) {}
  virtual ~PlaceVector();
  explicit constexpr PlaceVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVector(const PlaceVector& from);
  PlaceVector(PlaceVector&& from) noexcept
    : PlaceVector() {
    *this = ::std::move(from);
  }

  inline PlaceVector& operator=(const PlaceVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVector& operator=(PlaceVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceVector* internal_default_instance() {
    return reinterpret_cast<const PlaceVector*>(
               &_PlaceVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlaceVector& a, PlaceVector& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVector* New() const final {
    return CreateMaybeMessage<PlaceVector>(nullptr);
  }

  PlaceVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVector& from);
  void MergeFrom(const PlaceVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.PlaceVector";
  }
  protected:
  explicit PlaceVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_placevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStMetaFieldNumber = 1,
    kUDescriptorFieldNumber = 2,
  };
  // .VgeoDB.PlaceVectorMeta_t stMeta = 1;
  bool has_stmeta() const;
  private:
  bool _internal_has_stmeta() const;
  public:
  void clear_stmeta();
  const ::VgeoDB::PlaceVectorMeta_t& stmeta() const;
  ::VgeoDB::PlaceVectorMeta_t* release_stmeta();
  ::VgeoDB::PlaceVectorMeta_t* mutable_stmeta();
  void set_allocated_stmeta(::VgeoDB::PlaceVectorMeta_t* stmeta);
  private:
  const ::VgeoDB::PlaceVectorMeta_t& _internal_stmeta() const;
  ::VgeoDB::PlaceVectorMeta_t* _internal_mutable_stmeta();
  public:
  void unsafe_arena_set_allocated_stmeta(
      ::VgeoDB::PlaceVectorMeta_t* stmeta);
  ::VgeoDB::PlaceVectorMeta_t* unsafe_arena_release_stmeta();

  // .VgeoDB.PlaceVectorDesc uDescriptor = 2;
  bool has_udescriptor() const;
  private:
  bool _internal_has_udescriptor() const;
  public:
  void clear_udescriptor();
  const ::VgeoDB::PlaceVectorDesc& udescriptor() const;
  ::VgeoDB::PlaceVectorDesc* release_udescriptor();
  ::VgeoDB::PlaceVectorDesc* mutable_udescriptor();
  void set_allocated_udescriptor(::VgeoDB::PlaceVectorDesc* udescriptor);
  private:
  const ::VgeoDB::PlaceVectorDesc& _internal_udescriptor() const;
  ::VgeoDB::PlaceVectorDesc* _internal_mutable_udescriptor();
  public:
  void unsafe_arena_set_allocated_udescriptor(
      ::VgeoDB::PlaceVectorDesc* udescriptor);
  ::VgeoDB::PlaceVectorDesc* unsafe_arena_release_udescriptor();

  // @@protoc_insertion_point(class_scope:VgeoDB.PlaceVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::VgeoDB::PlaceVectorMeta_t* stmeta_;
  ::VgeoDB::PlaceVectorDesc* udescriptor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_placevector_2eproto;
};
// -------------------------------------------------------------------

class PlaceVectorSet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VgeoDB.PlaceVectorSet) */ {
 public:
  inline PlaceVectorSet() : PlaceVectorSet(nullptr) {}
  virtual ~PlaceVectorSet();
  explicit constexpr PlaceVectorSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlaceVectorSet(const PlaceVectorSet& from);
  PlaceVectorSet(PlaceVectorSet&& from) noexcept
    : PlaceVectorSet() {
    *this = ::std::move(from);
  }

  inline PlaceVectorSet& operator=(const PlaceVectorSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceVectorSet& operator=(PlaceVectorSet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceVectorSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlaceVectorSet* internal_default_instance() {
    return reinterpret_cast<const PlaceVectorSet*>(
               &_PlaceVectorSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlaceVectorSet& a, PlaceVectorSet& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceVectorSet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceVectorSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceVectorSet* New() const final {
    return CreateMaybeMessage<PlaceVectorSet>(nullptr);
  }

  PlaceVectorSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceVectorSet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceVectorSet& from);
  void MergeFrom(const PlaceVectorSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceVectorSet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VgeoDB.PlaceVectorSet";
  }
  protected:
  explicit PlaceVectorSet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_placevector_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArstPlaceVectorFieldNumber = 1,
  };
  // repeated .VgeoDB.PlaceVector arstPlaceVector = 1;
  int arstplacevector_size() const;
  private:
  int _internal_arstplacevector_size() const;
  public:
  void clear_arstplacevector();
  ::VgeoDB::PlaceVector* mutable_arstplacevector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVector >*
      mutable_arstplacevector();
  private:
  const ::VgeoDB::PlaceVector& _internal_arstplacevector(int index) const;
  ::VgeoDB::PlaceVector* _internal_add_arstplacevector();
  public:
  const ::VgeoDB::PlaceVector& arstplacevector(int index) const;
  ::VgeoDB::PlaceVector* add_arstplacevector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVector >&
      arstplacevector() const;

  // @@protoc_insertion_point(class_scope:VgeoDB.PlaceVectorSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVector > arstplacevector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_placevector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaceVectorMeta_t

// uint64 un64UniqueID = 1;
inline void PlaceVectorMeta_t::clear_un64uniqueid() {
  un64uniqueid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::_internal_un64uniqueid() const {
  return un64uniqueid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::un64uniqueid() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.un64UniqueID)
  return _internal_un64uniqueid();
}
inline void PlaceVectorMeta_t::_internal_set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64uniqueid_ = value;
}
inline void PlaceVectorMeta_t::set_un64uniqueid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64uniqueid(value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.un64UniqueID)
}

// uint64 un64KeyframeIndex = 2;
inline void PlaceVectorMeta_t::clear_un64keyframeindex() {
  un64keyframeindex_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::_internal_un64keyframeindex() const {
  return un64keyframeindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::un64keyframeindex() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.un64KeyframeIndex)
  return _internal_un64keyframeindex();
}
inline void PlaceVectorMeta_t::_internal_set_un64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64keyframeindex_ = value;
}
inline void PlaceVectorMeta_t::set_un64keyframeindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64keyframeindex(value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.un64KeyframeIndex)
}

// uint64 un64GroupID = 3;
inline void PlaceVectorMeta_t::clear_un64groupid() {
  un64groupid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::_internal_un64groupid() const {
  return un64groupid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::un64groupid() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.un64GroupID)
  return _internal_un64groupid();
}
inline void PlaceVectorMeta_t::_internal_set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64groupid_ = value;
}
inline void PlaceVectorMeta_t::set_un64groupid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64groupid(value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.un64GroupID)
}

// uint64 un64Timestamp = 4;
inline void PlaceVectorMeta_t::clear_un64timestamp() {
  un64timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::_internal_un64timestamp() const {
  return un64timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::un64timestamp() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.un64Timestamp)
  return _internal_un64timestamp();
}
inline void PlaceVectorMeta_t::_internal_set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  un64timestamp_ = value;
}
inline void PlaceVectorMeta_t::set_un64timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_un64timestamp(value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.un64Timestamp)
}

// .VgeoDB.common.XYZ64_t stAvgLocation = 5;
inline bool PlaceVectorMeta_t::_internal_has_stavglocation() const {
  return this != internal_default_instance() && stavglocation_ != nullptr;
}
inline bool PlaceVectorMeta_t::has_stavglocation() const {
  return _internal_has_stavglocation();
}
inline const ::VgeoDB::common::XYZ64_t& PlaceVectorMeta_t::_internal_stavglocation() const {
  const ::VgeoDB::common::XYZ64_t* p = stavglocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::XYZ64_t&>(
      ::VgeoDB::common::_XYZ64_t_default_instance_);
}
inline const ::VgeoDB::common::XYZ64_t& PlaceVectorMeta_t::stavglocation() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.stAvgLocation)
  return _internal_stavglocation();
}
inline void PlaceVectorMeta_t::unsafe_arena_set_allocated_stavglocation(
    ::VgeoDB::common::XYZ64_t* stavglocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stavglocation_);
  }
  stavglocation_ = stavglocation;
  if (stavglocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVectorMeta_t.stAvgLocation)
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::release_stavglocation() {
  
  ::VgeoDB::common::XYZ64_t* temp = stavglocation_;
  stavglocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::unsafe_arena_release_stavglocation() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVectorMeta_t.stAvgLocation)
  
  ::VgeoDB::common::XYZ64_t* temp = stavglocation_;
  stavglocation_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::_internal_mutable_stavglocation() {
  
  if (stavglocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::XYZ64_t>(GetArena());
    stavglocation_ = p;
  }
  return stavglocation_;
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::mutable_stavglocation() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorMeta_t.stAvgLocation)
  return _internal_mutable_stavglocation();
}
inline void PlaceVectorMeta_t::set_allocated_stavglocation(::VgeoDB::common::XYZ64_t* stavglocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stavglocation_);
  }
  if (stavglocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stavglocation)->GetArena();
    if (message_arena != submessage_arena) {
      stavglocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stavglocation, submessage_arena);
    }
    
  } else {
    
  }
  stavglocation_ = stavglocation;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVectorMeta_t.stAvgLocation)
}

// .VgeoDB.common.Orientation32_t stOrientaton = 6;
inline bool PlaceVectorMeta_t::_internal_has_storientaton() const {
  return this != internal_default_instance() && storientaton_ != nullptr;
}
inline bool PlaceVectorMeta_t::has_storientaton() const {
  return _internal_has_storientaton();
}
inline const ::VgeoDB::common::Orientation32_t& PlaceVectorMeta_t::_internal_storientaton() const {
  const ::VgeoDB::common::Orientation32_t* p = storientaton_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::Orientation32_t&>(
      ::VgeoDB::common::_Orientation32_t_default_instance_);
}
inline const ::VgeoDB::common::Orientation32_t& PlaceVectorMeta_t::storientaton() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.stOrientaton)
  return _internal_storientaton();
}
inline void PlaceVectorMeta_t::unsafe_arena_set_allocated_storientaton(
    ::VgeoDB::common::Orientation32_t* storientaton) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storientaton_);
  }
  storientaton_ = storientaton;
  if (storientaton) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVectorMeta_t.stOrientaton)
}
inline ::VgeoDB::common::Orientation32_t* PlaceVectorMeta_t::release_storientaton() {
  
  ::VgeoDB::common::Orientation32_t* temp = storientaton_;
  storientaton_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::common::Orientation32_t* PlaceVectorMeta_t::unsafe_arena_release_storientaton() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVectorMeta_t.stOrientaton)
  
  ::VgeoDB::common::Orientation32_t* temp = storientaton_;
  storientaton_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::Orientation32_t* PlaceVectorMeta_t::_internal_mutable_storientaton() {
  
  if (storientaton_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::Orientation32_t>(GetArena());
    storientaton_ = p;
  }
  return storientaton_;
}
inline ::VgeoDB::common::Orientation32_t* PlaceVectorMeta_t::mutable_storientaton() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorMeta_t.stOrientaton)
  return _internal_mutable_storientaton();
}
inline void PlaceVectorMeta_t::set_allocated_storientaton(::VgeoDB::common::Orientation32_t* storientaton) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(storientaton_);
  }
  if (storientaton) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storientaton)->GetArena();
    if (message_arena != submessage_arena) {
      storientaton = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storientaton, submessage_arena);
    }
    
  } else {
    
  }
  storientaton_ = storientaton;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVectorMeta_t.stOrientaton)
}

// repeated .VgeoDB.common.XYZ64_t arstLocationSet = 7;
inline int PlaceVectorMeta_t::_internal_arstlocationset_size() const {
  return arstlocationset_.size();
}
inline int PlaceVectorMeta_t::arstlocationset_size() const {
  return _internal_arstlocationset_size();
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::mutable_arstlocationset(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorMeta_t.arstLocationSet)
  return arstlocationset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::XYZ64_t >*
PlaceVectorMeta_t::mutable_arstlocationset() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.PlaceVectorMeta_t.arstLocationSet)
  return &arstlocationset_;
}
inline const ::VgeoDB::common::XYZ64_t& PlaceVectorMeta_t::_internal_arstlocationset(int index) const {
  return arstlocationset_.Get(index);
}
inline const ::VgeoDB::common::XYZ64_t& PlaceVectorMeta_t::arstlocationset(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.arstLocationSet)
  return _internal_arstlocationset(index);
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::_internal_add_arstlocationset() {
  return arstlocationset_.Add();
}
inline ::VgeoDB::common::XYZ64_t* PlaceVectorMeta_t::add_arstlocationset() {
  // @@protoc_insertion_point(field_add:VgeoDB.PlaceVectorMeta_t.arstLocationSet)
  return _internal_add_arstlocationset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::common::XYZ64_t >&
PlaceVectorMeta_t::arstlocationset() const {
  // @@protoc_insertion_point(field_list:VgeoDB.PlaceVectorMeta_t.arstLocationSet)
  return arstlocationset_;
}

// .VgeoDB.common.XYZ32_t stDirectionVector = 8;
inline bool PlaceVectorMeta_t::_internal_has_stdirectionvector() const {
  return this != internal_default_instance() && stdirectionvector_ != nullptr;
}
inline bool PlaceVectorMeta_t::has_stdirectionvector() const {
  return _internal_has_stdirectionvector();
}
inline const ::VgeoDB::common::XYZ32_t& PlaceVectorMeta_t::_internal_stdirectionvector() const {
  const ::VgeoDB::common::XYZ32_t* p = stdirectionvector_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::common::XYZ32_t&>(
      ::VgeoDB::common::_XYZ32_t_default_instance_);
}
inline const ::VgeoDB::common::XYZ32_t& PlaceVectorMeta_t::stdirectionvector() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.stDirectionVector)
  return _internal_stdirectionvector();
}
inline void PlaceVectorMeta_t::unsafe_arena_set_allocated_stdirectionvector(
    ::VgeoDB::common::XYZ32_t* stdirectionvector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector_);
  }
  stdirectionvector_ = stdirectionvector;
  if (stdirectionvector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVectorMeta_t.stDirectionVector)
}
inline ::VgeoDB::common::XYZ32_t* PlaceVectorMeta_t::release_stdirectionvector() {
  
  ::VgeoDB::common::XYZ32_t* temp = stdirectionvector_;
  stdirectionvector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::common::XYZ32_t* PlaceVectorMeta_t::unsafe_arena_release_stdirectionvector() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVectorMeta_t.stDirectionVector)
  
  ::VgeoDB::common::XYZ32_t* temp = stdirectionvector_;
  stdirectionvector_ = nullptr;
  return temp;
}
inline ::VgeoDB::common::XYZ32_t* PlaceVectorMeta_t::_internal_mutable_stdirectionvector() {
  
  if (stdirectionvector_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::common::XYZ32_t>(GetArena());
    stdirectionvector_ = p;
  }
  return stdirectionvector_;
}
inline ::VgeoDB::common::XYZ32_t* PlaceVectorMeta_t::mutable_stdirectionvector() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorMeta_t.stDirectionVector)
  return _internal_mutable_stdirectionvector();
}
inline void PlaceVectorMeta_t::set_allocated_stdirectionvector(::VgeoDB::common::XYZ32_t* stdirectionvector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector_);
  }
  if (stdirectionvector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector)->GetArena();
    if (message_arena != submessage_arena) {
      stdirectionvector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stdirectionvector, submessage_arena);
    }
    
  } else {
    
  }
  stdirectionvector_ = stdirectionvector;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVectorMeta_t.stDirectionVector)
}

// repeated uint64 arun64UniqueIDofKeypoint = 9 [packed = true];
inline int PlaceVectorMeta_t::_internal_arun64uniqueidofkeypoint_size() const {
  return arun64uniqueidofkeypoint_.size();
}
inline int PlaceVectorMeta_t::arun64uniqueidofkeypoint_size() const {
  return _internal_arun64uniqueidofkeypoint_size();
}
inline void PlaceVectorMeta_t::clear_arun64uniqueidofkeypoint() {
  arun64uniqueidofkeypoint_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::_internal_arun64uniqueidofkeypoint(int index) const {
  return arun64uniqueidofkeypoint_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::arun64uniqueidofkeypoint(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.arun64UniqueIDofKeypoint)
  return _internal_arun64uniqueidofkeypoint(index);
}
inline void PlaceVectorMeta_t::set_arun64uniqueidofkeypoint(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64uniqueidofkeypoint_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.arun64UniqueIDofKeypoint)
}
inline void PlaceVectorMeta_t::_internal_add_arun64uniqueidofkeypoint(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64uniqueidofkeypoint_.Add(value);
}
inline void PlaceVectorMeta_t::add_arun64uniqueidofkeypoint(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_arun64uniqueidofkeypoint(value);
  // @@protoc_insertion_point(field_add:VgeoDB.PlaceVectorMeta_t.arun64UniqueIDofKeypoint)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PlaceVectorMeta_t::_internal_arun64uniqueidofkeypoint() const {
  return arun64uniqueidofkeypoint_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PlaceVectorMeta_t::arun64uniqueidofkeypoint() const {
  // @@protoc_insertion_point(field_list:VgeoDB.PlaceVectorMeta_t.arun64UniqueIDofKeypoint)
  return _internal_arun64uniqueidofkeypoint();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PlaceVectorMeta_t::_internal_mutable_arun64uniqueidofkeypoint() {
  return &arun64uniqueidofkeypoint_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PlaceVectorMeta_t::mutable_arun64uniqueidofkeypoint() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.PlaceVectorMeta_t.arun64UniqueIDofKeypoint)
  return _internal_mutable_arun64uniqueidofkeypoint();
}

// repeated uint64 arun64Belong3DPointIndex = 10 [packed = true];
inline int PlaceVectorMeta_t::_internal_arun64belong3dpointindex_size() const {
  return arun64belong3dpointindex_.size();
}
inline int PlaceVectorMeta_t::arun64belong3dpointindex_size() const {
  return _internal_arun64belong3dpointindex_size();
}
inline void PlaceVectorMeta_t::clear_arun64belong3dpointindex() {
  arun64belong3dpointindex_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::_internal_arun64belong3dpointindex(int index) const {
  return arun64belong3dpointindex_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PlaceVectorMeta_t::arun64belong3dpointindex(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.arun64Belong3DPointIndex)
  return _internal_arun64belong3dpointindex(index);
}
inline void PlaceVectorMeta_t::set_arun64belong3dpointindex(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64belong3dpointindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.arun64Belong3DPointIndex)
}
inline void PlaceVectorMeta_t::_internal_add_arun64belong3dpointindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  arun64belong3dpointindex_.Add(value);
}
inline void PlaceVectorMeta_t::add_arun64belong3dpointindex(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_arun64belong3dpointindex(value);
  // @@protoc_insertion_point(field_add:VgeoDB.PlaceVectorMeta_t.arun64Belong3DPointIndex)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PlaceVectorMeta_t::_internal_arun64belong3dpointindex() const {
  return arun64belong3dpointindex_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PlaceVectorMeta_t::arun64belong3dpointindex() const {
  // @@protoc_insertion_point(field_list:VgeoDB.PlaceVectorMeta_t.arun64Belong3DPointIndex)
  return _internal_arun64belong3dpointindex();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PlaceVectorMeta_t::_internal_mutable_arun64belong3dpointindex() {
  return &arun64belong3dpointindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PlaceVectorMeta_t::mutable_arun64belong3dpointindex() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.PlaceVectorMeta_t.arun64Belong3DPointIndex)
  return _internal_mutable_arun64belong3dpointindex();
}

// float fSimilarity = 11;
inline void PlaceVectorMeta_t::clear_fsimilarity() {
  fsimilarity_ = 0;
}
inline float PlaceVectorMeta_t::_internal_fsimilarity() const {
  return fsimilarity_;
}
inline float PlaceVectorMeta_t::fsimilarity() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorMeta_t.fSimilarity)
  return _internal_fsimilarity();
}
inline void PlaceVectorMeta_t::_internal_set_fsimilarity(float value) {
  
  fsimilarity_ = value;
}
inline void PlaceVectorMeta_t::set_fsimilarity(float value) {
  _internal_set_fsimilarity(value);
  // @@protoc_insertion_point(field_set:VgeoDB.PlaceVectorMeta_t.fSimilarity)
}

// -------------------------------------------------------------------

// NetVLADDesc_t

// repeated float arfNetVLADDescriptor = 1 [packed = true];
inline int NetVLADDesc_t::_internal_arfnetvladdescriptor_size() const {
  return arfnetvladdescriptor_.size();
}
inline int NetVLADDesc_t::arfnetvladdescriptor_size() const {
  return _internal_arfnetvladdescriptor_size();
}
inline void NetVLADDesc_t::clear_arfnetvladdescriptor() {
  arfnetvladdescriptor_.Clear();
}
inline float NetVLADDesc_t::_internal_arfnetvladdescriptor(int index) const {
  return arfnetvladdescriptor_.Get(index);
}
inline float NetVLADDesc_t::arfnetvladdescriptor(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.NetVLADDesc_t.arfNetVLADDescriptor)
  return _internal_arfnetvladdescriptor(index);
}
inline void NetVLADDesc_t::set_arfnetvladdescriptor(int index, float value) {
  arfnetvladdescriptor_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.NetVLADDesc_t.arfNetVLADDescriptor)
}
inline void NetVLADDesc_t::_internal_add_arfnetvladdescriptor(float value) {
  arfnetvladdescriptor_.Add(value);
}
inline void NetVLADDesc_t::add_arfnetvladdescriptor(float value) {
  _internal_add_arfnetvladdescriptor(value);
  // @@protoc_insertion_point(field_add:VgeoDB.NetVLADDesc_t.arfNetVLADDescriptor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NetVLADDesc_t::_internal_arfnetvladdescriptor() const {
  return arfnetvladdescriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NetVLADDesc_t::arfnetvladdescriptor() const {
  // @@protoc_insertion_point(field_list:VgeoDB.NetVLADDesc_t.arfNetVLADDescriptor)
  return _internal_arfnetvladdescriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NetVLADDesc_t::_internal_mutable_arfnetvladdescriptor() {
  return &arfnetvladdescriptor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NetVLADDesc_t::mutable_arfnetvladdescriptor() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.NetVLADDesc_t.arfNetVLADDescriptor)
  return _internal_mutable_arfnetvladdescriptor();
}

// .VgeoDB.NetVLADDesc_t.eDescType eType = 2;
inline void NetVLADDesc_t::clear_etype() {
  etype_ = 0;
}
inline ::VgeoDB::NetVLADDesc_t_eDescType NetVLADDesc_t::_internal_etype() const {
  return static_cast< ::VgeoDB::NetVLADDesc_t_eDescType >(etype_);
}
inline ::VgeoDB::NetVLADDesc_t_eDescType NetVLADDesc_t::etype() const {
  // @@protoc_insertion_point(field_get:VgeoDB.NetVLADDesc_t.eType)
  return _internal_etype();
}
inline void NetVLADDesc_t::_internal_set_etype(::VgeoDB::NetVLADDesc_t_eDescType value) {
  
  etype_ = value;
}
inline void NetVLADDesc_t::set_etype(::VgeoDB::NetVLADDesc_t_eDescType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:VgeoDB.NetVLADDesc_t.eType)
}

// -------------------------------------------------------------------

// GlobFeatDesc_t

// repeated uint32 arunGlobFeatDescriptor = 2 [packed = true];
inline int GlobFeatDesc_t::_internal_arunglobfeatdescriptor_size() const {
  return arunglobfeatdescriptor_.size();
}
inline int GlobFeatDesc_t::arunglobfeatdescriptor_size() const {
  return _internal_arunglobfeatdescriptor_size();
}
inline void GlobFeatDesc_t::clear_arunglobfeatdescriptor() {
  arunglobfeatdescriptor_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobFeatDesc_t::_internal_arunglobfeatdescriptor(int index) const {
  return arunglobfeatdescriptor_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GlobFeatDesc_t::arunglobfeatdescriptor(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.GlobFeatDesc_t.arunGlobFeatDescriptor)
  return _internal_arunglobfeatdescriptor(index);
}
inline void GlobFeatDesc_t::set_arunglobfeatdescriptor(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  arunglobfeatdescriptor_.Set(index, value);
  // @@protoc_insertion_point(field_set:VgeoDB.GlobFeatDesc_t.arunGlobFeatDescriptor)
}
inline void GlobFeatDesc_t::_internal_add_arunglobfeatdescriptor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  arunglobfeatdescriptor_.Add(value);
}
inline void GlobFeatDesc_t::add_arunglobfeatdescriptor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_arunglobfeatdescriptor(value);
  // @@protoc_insertion_point(field_add:VgeoDB.GlobFeatDesc_t.arunGlobFeatDescriptor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GlobFeatDesc_t::_internal_arunglobfeatdescriptor() const {
  return arunglobfeatdescriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
GlobFeatDesc_t::arunglobfeatdescriptor() const {
  // @@protoc_insertion_point(field_list:VgeoDB.GlobFeatDesc_t.arunGlobFeatDescriptor)
  return _internal_arunglobfeatdescriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GlobFeatDesc_t::_internal_mutable_arunglobfeatdescriptor() {
  return &arunglobfeatdescriptor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
GlobFeatDesc_t::mutable_arunglobfeatdescriptor() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.GlobFeatDesc_t.arunGlobFeatDescriptor)
  return _internal_mutable_arunglobfeatdescriptor();
}

// .VgeoDB.GlobFeatDesc_t.eDescType eType = 3;
inline void GlobFeatDesc_t::clear_etype() {
  etype_ = 0;
}
inline ::VgeoDB::GlobFeatDesc_t_eDescType GlobFeatDesc_t::_internal_etype() const {
  return static_cast< ::VgeoDB::GlobFeatDesc_t_eDescType >(etype_);
}
inline ::VgeoDB::GlobFeatDesc_t_eDescType GlobFeatDesc_t::etype() const {
  // @@protoc_insertion_point(field_get:VgeoDB.GlobFeatDesc_t.eType)
  return _internal_etype();
}
inline void GlobFeatDesc_t::_internal_set_etype(::VgeoDB::GlobFeatDesc_t_eDescType value) {
  
  etype_ = value;
}
inline void GlobFeatDesc_t::set_etype(::VgeoDB::GlobFeatDesc_t_eDescType value) {
  _internal_set_etype(value);
  // @@protoc_insertion_point(field_set:VgeoDB.GlobFeatDesc_t.eType)
}

// -------------------------------------------------------------------

// PlaceVectorDesc

// .VgeoDB.NetVLADDesc_t stNetVLADDescriptor = 1;
inline bool PlaceVectorDesc::_internal_has_stnetvladdescriptor() const {
  return uDescriptor_case() == kStNetVLADDescriptor;
}
inline bool PlaceVectorDesc::has_stnetvladdescriptor() const {
  return _internal_has_stnetvladdescriptor();
}
inline void PlaceVectorDesc::set_has_stnetvladdescriptor() {
  _oneof_case_[0] = kStNetVLADDescriptor;
}
inline void PlaceVectorDesc::clear_stnetvladdescriptor() {
  if (_internal_has_stnetvladdescriptor()) {
    if (GetArena() == nullptr) {
      delete uDescriptor_.stnetvladdescriptor_;
    }
    clear_has_uDescriptor();
  }
}
inline ::VgeoDB::NetVLADDesc_t* PlaceVectorDesc::release_stnetvladdescriptor() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVectorDesc.stNetVLADDescriptor)
  if (_internal_has_stnetvladdescriptor()) {
    clear_has_uDescriptor();
      ::VgeoDB::NetVLADDesc_t* temp = uDescriptor_.stnetvladdescriptor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uDescriptor_.stnetvladdescriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::NetVLADDesc_t& PlaceVectorDesc::_internal_stnetvladdescriptor() const {
  return _internal_has_stnetvladdescriptor()
      ? *uDescriptor_.stnetvladdescriptor_
      : reinterpret_cast< ::VgeoDB::NetVLADDesc_t&>(::VgeoDB::_NetVLADDesc_t_default_instance_);
}
inline const ::VgeoDB::NetVLADDesc_t& PlaceVectorDesc::stnetvladdescriptor() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorDesc.stNetVLADDescriptor)
  return _internal_stnetvladdescriptor();
}
inline ::VgeoDB::NetVLADDesc_t* PlaceVectorDesc::unsafe_arena_release_stnetvladdescriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.PlaceVectorDesc.stNetVLADDescriptor)
  if (_internal_has_stnetvladdescriptor()) {
    clear_has_uDescriptor();
    ::VgeoDB::NetVLADDesc_t* temp = uDescriptor_.stnetvladdescriptor_;
    uDescriptor_.stnetvladdescriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlaceVectorDesc::unsafe_arena_set_allocated_stnetvladdescriptor(::VgeoDB::NetVLADDesc_t* stnetvladdescriptor) {
  clear_uDescriptor();
  if (stnetvladdescriptor) {
    set_has_stnetvladdescriptor();
    uDescriptor_.stnetvladdescriptor_ = stnetvladdescriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVectorDesc.stNetVLADDescriptor)
}
inline ::VgeoDB::NetVLADDesc_t* PlaceVectorDesc::_internal_mutable_stnetvladdescriptor() {
  if (!_internal_has_stnetvladdescriptor()) {
    clear_uDescriptor();
    set_has_stnetvladdescriptor();
    uDescriptor_.stnetvladdescriptor_ = CreateMaybeMessage< ::VgeoDB::NetVLADDesc_t >(GetArena());
  }
  return uDescriptor_.stnetvladdescriptor_;
}
inline ::VgeoDB::NetVLADDesc_t* PlaceVectorDesc::mutable_stnetvladdescriptor() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorDesc.stNetVLADDescriptor)
  return _internal_mutable_stnetvladdescriptor();
}

// .VgeoDB.GlobFeatDesc_t stGlobFeatDescriptor = 2;
inline bool PlaceVectorDesc::_internal_has_stglobfeatdescriptor() const {
  return uDescriptor_case() == kStGlobFeatDescriptor;
}
inline bool PlaceVectorDesc::has_stglobfeatdescriptor() const {
  return _internal_has_stglobfeatdescriptor();
}
inline void PlaceVectorDesc::set_has_stglobfeatdescriptor() {
  _oneof_case_[0] = kStGlobFeatDescriptor;
}
inline void PlaceVectorDesc::clear_stglobfeatdescriptor() {
  if (_internal_has_stglobfeatdescriptor()) {
    if (GetArena() == nullptr) {
      delete uDescriptor_.stglobfeatdescriptor_;
    }
    clear_has_uDescriptor();
  }
}
inline ::VgeoDB::GlobFeatDesc_t* PlaceVectorDesc::release_stglobfeatdescriptor() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVectorDesc.stGlobFeatDescriptor)
  if (_internal_has_stglobfeatdescriptor()) {
    clear_has_uDescriptor();
      ::VgeoDB::GlobFeatDesc_t* temp = uDescriptor_.stglobfeatdescriptor_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    uDescriptor_.stglobfeatdescriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::VgeoDB::GlobFeatDesc_t& PlaceVectorDesc::_internal_stglobfeatdescriptor() const {
  return _internal_has_stglobfeatdescriptor()
      ? *uDescriptor_.stglobfeatdescriptor_
      : reinterpret_cast< ::VgeoDB::GlobFeatDesc_t&>(::VgeoDB::_GlobFeatDesc_t_default_instance_);
}
inline const ::VgeoDB::GlobFeatDesc_t& PlaceVectorDesc::stglobfeatdescriptor() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorDesc.stGlobFeatDescriptor)
  return _internal_stglobfeatdescriptor();
}
inline ::VgeoDB::GlobFeatDesc_t* PlaceVectorDesc::unsafe_arena_release_stglobfeatdescriptor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:VgeoDB.PlaceVectorDesc.stGlobFeatDescriptor)
  if (_internal_has_stglobfeatdescriptor()) {
    clear_has_uDescriptor();
    ::VgeoDB::GlobFeatDesc_t* temp = uDescriptor_.stglobfeatdescriptor_;
    uDescriptor_.stglobfeatdescriptor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PlaceVectorDesc::unsafe_arena_set_allocated_stglobfeatdescriptor(::VgeoDB::GlobFeatDesc_t* stglobfeatdescriptor) {
  clear_uDescriptor();
  if (stglobfeatdescriptor) {
    set_has_stglobfeatdescriptor();
    uDescriptor_.stglobfeatdescriptor_ = stglobfeatdescriptor;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVectorDesc.stGlobFeatDescriptor)
}
inline ::VgeoDB::GlobFeatDesc_t* PlaceVectorDesc::_internal_mutable_stglobfeatdescriptor() {
  if (!_internal_has_stglobfeatdescriptor()) {
    clear_uDescriptor();
    set_has_stglobfeatdescriptor();
    uDescriptor_.stglobfeatdescriptor_ = CreateMaybeMessage< ::VgeoDB::GlobFeatDesc_t >(GetArena());
  }
  return uDescriptor_.stglobfeatdescriptor_;
}
inline ::VgeoDB::GlobFeatDesc_t* PlaceVectorDesc::mutable_stglobfeatdescriptor() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorDesc.stGlobFeatDescriptor)
  return _internal_mutable_stglobfeatdescriptor();
}

inline bool PlaceVectorDesc::has_uDescriptor() const {
  return uDescriptor_case() != UDESCRIPTOR_NOT_SET;
}
inline void PlaceVectorDesc::clear_has_uDescriptor() {
  _oneof_case_[0] = UDESCRIPTOR_NOT_SET;
}
inline PlaceVectorDesc::UDescriptorCase PlaceVectorDesc::uDescriptor_case() const {
  return PlaceVectorDesc::UDescriptorCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PlaceVector

// .VgeoDB.PlaceVectorMeta_t stMeta = 1;
inline bool PlaceVector::_internal_has_stmeta() const {
  return this != internal_default_instance() && stmeta_ != nullptr;
}
inline bool PlaceVector::has_stmeta() const {
  return _internal_has_stmeta();
}
inline void PlaceVector::clear_stmeta() {
  if (GetArena() == nullptr && stmeta_ != nullptr) {
    delete stmeta_;
  }
  stmeta_ = nullptr;
}
inline const ::VgeoDB::PlaceVectorMeta_t& PlaceVector::_internal_stmeta() const {
  const ::VgeoDB::PlaceVectorMeta_t* p = stmeta_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::PlaceVectorMeta_t&>(
      ::VgeoDB::_PlaceVectorMeta_t_default_instance_);
}
inline const ::VgeoDB::PlaceVectorMeta_t& PlaceVector::stmeta() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVector.stMeta)
  return _internal_stmeta();
}
inline void PlaceVector::unsafe_arena_set_allocated_stmeta(
    ::VgeoDB::PlaceVectorMeta_t* stmeta) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stmeta_);
  }
  stmeta_ = stmeta;
  if (stmeta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVector.stMeta)
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVector::release_stmeta() {
  
  ::VgeoDB::PlaceVectorMeta_t* temp = stmeta_;
  stmeta_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVector::unsafe_arena_release_stmeta() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVector.stMeta)
  
  ::VgeoDB::PlaceVectorMeta_t* temp = stmeta_;
  stmeta_ = nullptr;
  return temp;
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVector::_internal_mutable_stmeta() {
  
  if (stmeta_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::PlaceVectorMeta_t>(GetArena());
    stmeta_ = p;
  }
  return stmeta_;
}
inline ::VgeoDB::PlaceVectorMeta_t* PlaceVector::mutable_stmeta() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVector.stMeta)
  return _internal_mutable_stmeta();
}
inline void PlaceVector::set_allocated_stmeta(::VgeoDB::PlaceVectorMeta_t* stmeta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stmeta_;
  }
  if (stmeta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stmeta);
    if (message_arena != submessage_arena) {
      stmeta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stmeta, submessage_arena);
    }
    
  } else {
    
  }
  stmeta_ = stmeta;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVector.stMeta)
}

// .VgeoDB.PlaceVectorDesc uDescriptor = 2;
inline bool PlaceVector::_internal_has_udescriptor() const {
  return this != internal_default_instance() && udescriptor_ != nullptr;
}
inline bool PlaceVector::has_udescriptor() const {
  return _internal_has_udescriptor();
}
inline void PlaceVector::clear_udescriptor() {
  if (GetArena() == nullptr && udescriptor_ != nullptr) {
    delete udescriptor_;
  }
  udescriptor_ = nullptr;
}
inline const ::VgeoDB::PlaceVectorDesc& PlaceVector::_internal_udescriptor() const {
  const ::VgeoDB::PlaceVectorDesc* p = udescriptor_;
  return p != nullptr ? *p : reinterpret_cast<const ::VgeoDB::PlaceVectorDesc&>(
      ::VgeoDB::_PlaceVectorDesc_default_instance_);
}
inline const ::VgeoDB::PlaceVectorDesc& PlaceVector::udescriptor() const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVector.uDescriptor)
  return _internal_udescriptor();
}
inline void PlaceVector::unsafe_arena_set_allocated_udescriptor(
    ::VgeoDB::PlaceVectorDesc* udescriptor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(udescriptor_);
  }
  udescriptor_ = udescriptor;
  if (udescriptor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:VgeoDB.PlaceVector.uDescriptor)
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVector::release_udescriptor() {
  
  ::VgeoDB::PlaceVectorDesc* temp = udescriptor_;
  udescriptor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVector::unsafe_arena_release_udescriptor() {
  // @@protoc_insertion_point(field_release:VgeoDB.PlaceVector.uDescriptor)
  
  ::VgeoDB::PlaceVectorDesc* temp = udescriptor_;
  udescriptor_ = nullptr;
  return temp;
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVector::_internal_mutable_udescriptor() {
  
  if (udescriptor_ == nullptr) {
    auto* p = CreateMaybeMessage<::VgeoDB::PlaceVectorDesc>(GetArena());
    udescriptor_ = p;
  }
  return udescriptor_;
}
inline ::VgeoDB::PlaceVectorDesc* PlaceVector::mutable_udescriptor() {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVector.uDescriptor)
  return _internal_mutable_udescriptor();
}
inline void PlaceVector::set_allocated_udescriptor(::VgeoDB::PlaceVectorDesc* udescriptor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete udescriptor_;
  }
  if (udescriptor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(udescriptor);
    if (message_arena != submessage_arena) {
      udescriptor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, udescriptor, submessage_arena);
    }
    
  } else {
    
  }
  udescriptor_ = udescriptor;
  // @@protoc_insertion_point(field_set_allocated:VgeoDB.PlaceVector.uDescriptor)
}

// -------------------------------------------------------------------

// PlaceVectorSet

// repeated .VgeoDB.PlaceVector arstPlaceVector = 1;
inline int PlaceVectorSet::_internal_arstplacevector_size() const {
  return arstplacevector_.size();
}
inline int PlaceVectorSet::arstplacevector_size() const {
  return _internal_arstplacevector_size();
}
inline void PlaceVectorSet::clear_arstplacevector() {
  arstplacevector_.Clear();
}
inline ::VgeoDB::PlaceVector* PlaceVectorSet::mutable_arstplacevector(int index) {
  // @@protoc_insertion_point(field_mutable:VgeoDB.PlaceVectorSet.arstPlaceVector)
  return arstplacevector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVector >*
PlaceVectorSet::mutable_arstplacevector() {
  // @@protoc_insertion_point(field_mutable_list:VgeoDB.PlaceVectorSet.arstPlaceVector)
  return &arstplacevector_;
}
inline const ::VgeoDB::PlaceVector& PlaceVectorSet::_internal_arstplacevector(int index) const {
  return arstplacevector_.Get(index);
}
inline const ::VgeoDB::PlaceVector& PlaceVectorSet::arstplacevector(int index) const {
  // @@protoc_insertion_point(field_get:VgeoDB.PlaceVectorSet.arstPlaceVector)
  return _internal_arstplacevector(index);
}
inline ::VgeoDB::PlaceVector* PlaceVectorSet::_internal_add_arstplacevector() {
  return arstplacevector_.Add();
}
inline ::VgeoDB::PlaceVector* PlaceVectorSet::add_arstplacevector() {
  // @@protoc_insertion_point(field_add:VgeoDB.PlaceVectorSet.arstPlaceVector)
  return _internal_add_arstplacevector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::VgeoDB::PlaceVector >&
PlaceVectorSet::arstplacevector() const {
  // @@protoc_insertion_point(field_list:VgeoDB.PlaceVectorSet.arstPlaceVector)
  return arstplacevector_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace VgeoDB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::VgeoDB::NetVLADDesc_t_eDescType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VgeoDB::NetVLADDesc_t_eDescType>() {
  return ::VgeoDB::NetVLADDesc_t_eDescType_descriptor();
}
template <> struct is_proto_enum< ::VgeoDB::GlobFeatDesc_t_eDescType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::VgeoDB::GlobFeatDesc_t_eDescType>() {
  return ::VgeoDB::GlobFeatDesc_t_eDescType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_placevector_2eproto
