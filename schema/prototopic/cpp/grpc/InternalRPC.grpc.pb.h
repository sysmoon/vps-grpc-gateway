// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: InternalRPC.proto
#ifndef GRPC_InternalRPC_2eproto__INCLUDED
#define GRPC_InternalRPC_2eproto__INCLUDED

#include "InternalRPC.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace vlam {
namespace internal {

class Positioning final {
 public:
  static constexpr char const* service_full_name() {
    return "vlam.internal.Positioning";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::vpresult::VPService_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>> AsyncdoVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>>(AsyncdoVisualPositioningRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>> PrepareAsyncdoVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>>(PrepareAsyncdoVisualPositioningRaw(context, request, cq));
    }
    virtual ::grpc::Status doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::vpresult::VPService_t* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>> AsyncdoPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>>(AsyncdoPoseEstimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>> PrepareAsyncdoPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>>(PrepareAsyncdoPoseEstimationRaw(context, request, cq));
    }
    virtual ::grpc::Status unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::vlam::pe::PoseEstimationIn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::pe::PoseEstimationIn>> AsyncunitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::pe::PoseEstimationIn>>(AsyncunitTest_SAModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::pe::PoseEstimationIn>> PrepareAsyncunitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::pe::PoseEstimationIn>>(PrepareAsyncunitTest_SAModuleRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>* AsyncdoVisualPositioningRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>* PrepareAsyncdoVisualPositioningRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>* AsyncdoPoseEstimationRaw(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vpresult::VPService_t>* PrepareAsyncdoPoseEstimationRaw(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vlam::pe::PoseEstimationIn>* AsyncunitTest_SAModuleRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vlam::pe::PoseEstimationIn>* PrepareAsyncunitTest_SAModuleRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::vpresult::VPService_t* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>> AsyncdoVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>>(AsyncdoVisualPositioningRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>> PrepareAsyncdoVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>>(PrepareAsyncdoVisualPositioningRaw(context, request, cq));
    }
    ::grpc::Status doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::vpresult::VPService_t* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>> AsyncdoPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>>(AsyncdoPoseEstimationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>> PrepareAsyncdoPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>>(PrepareAsyncdoPoseEstimationRaw(context, request, cq));
    }
    ::grpc::Status unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::vlam::pe::PoseEstimationIn* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>> AsyncunitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>>(AsyncunitTest_SAModuleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>> PrepareAsyncunitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>>(PrepareAsyncunitTest_SAModuleRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* AsyncdoVisualPositioningRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* PrepareAsyncdoVisualPositioningRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* AsyncdoPoseEstimationRaw(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* PrepareAsyncdoPoseEstimationRaw(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>* AsyncunitTest_SAModuleRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>* PrepareAsyncunitTest_SAModuleRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_doVisualPositioning_;
    const ::grpc::internal::RpcMethod rpcmethod_doPoseEstimation_;
    const ::grpc::internal::RpcMethod rpcmethod_unitTest_SAModule_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status doVisualPositioning(::grpc::ServerContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response);
    virtual ::grpc::Status doPoseEstimation(::grpc::ServerContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response);
    virtual ::grpc::Status unitTest_SAModule(::grpc::ServerContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_doVisualPositioning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doVisualPositioning() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_doVisualPositioning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doVisualPositioning(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoVisualPositioning(::grpc::ServerContext* context, ::vlam::sa::ImageEnhancementIn* request, ::grpc::ServerAsyncResponseWriter< ::vpresult::VPService_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_doPoseEstimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_doPoseEstimation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_doPoseEstimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doPoseEstimation(::grpc::ServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoPoseEstimation(::grpc::ServerContext* context, ::vlam::pe::PoseEstimationIn* request, ::grpc::ServerAsyncResponseWriter< ::vpresult::VPService_t>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unitTest_SAModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unitTest_SAModule() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_unitTest_SAModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unitTest_SAModule(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunitTest_SAModule(::grpc::ServerContext* context, ::vlam::sa::ImageEnhancementIn* request, ::grpc::ServerAsyncResponseWriter< ::vlam::pe::PoseEstimationIn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_doVisualPositioning<WithAsyncMethod_doPoseEstimation<WithAsyncMethod_unitTest_SAModule<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doVisualPositioning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doVisualPositioning() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response) { return this->doVisualPositioning(context, request, response); }));}
    void SetMessageAllocatorFor_doVisualPositioning(
        ::grpc::experimental::MessageAllocator< ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doVisualPositioning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doVisualPositioning(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doVisualPositioning(
      ::grpc::CallbackServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doVisualPositioning(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_doPoseEstimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_doPoseEstimation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response) { return this->doPoseEstimation(context, request, response); }));}
    void SetMessageAllocatorFor_doPoseEstimation(
        ::grpc::experimental::MessageAllocator< ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_doPoseEstimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doPoseEstimation(::grpc::ServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doPoseEstimation(
      ::grpc::CallbackServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doPoseEstimation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_unitTest_SAModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_unitTest_SAModule() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response) { return this->unitTest_SAModule(context, request, response); }));}
    void SetMessageAllocatorFor_unitTest_SAModule(
        ::grpc::experimental::MessageAllocator< ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_unitTest_SAModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unitTest_SAModule(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* unitTest_SAModule(
      ::grpc::CallbackServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* unitTest_SAModule(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_doVisualPositioning<ExperimentalWithCallbackMethod_doPoseEstimation<ExperimentalWithCallbackMethod_unitTest_SAModule<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_doVisualPositioning<ExperimentalWithCallbackMethod_doPoseEstimation<ExperimentalWithCallbackMethod_unitTest_SAModule<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_doVisualPositioning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doVisualPositioning() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_doVisualPositioning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doVisualPositioning(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_doPoseEstimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_doPoseEstimation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_doPoseEstimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doPoseEstimation(::grpc::ServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unitTest_SAModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unitTest_SAModule() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_unitTest_SAModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unitTest_SAModule(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_doVisualPositioning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doVisualPositioning() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_doVisualPositioning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doVisualPositioning(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoVisualPositioning(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_doPoseEstimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_doPoseEstimation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_doPoseEstimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doPoseEstimation(::grpc::ServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdoPoseEstimation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unitTest_SAModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unitTest_SAModule() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_unitTest_SAModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unitTest_SAModule(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunitTest_SAModule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doVisualPositioning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doVisualPositioning() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doVisualPositioning(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doVisualPositioning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doVisualPositioning(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doVisualPositioning(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doVisualPositioning(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_doPoseEstimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_doPoseEstimation() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->doPoseEstimation(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_doPoseEstimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status doPoseEstimation(::grpc::ServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* doPoseEstimation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* doPoseEstimation(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_unitTest_SAModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_unitTest_SAModule() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unitTest_SAModule(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_unitTest_SAModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unitTest_SAModule(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* unitTest_SAModule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* unitTest_SAModule(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doVisualPositioning : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doVisualPositioning() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t>* streamer) {
                       return this->StreameddoVisualPositioning(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doVisualPositioning() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doVisualPositioning(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoVisualPositioning(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vlam::sa::ImageEnhancementIn,::vpresult::VPService_t>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_doPoseEstimation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_doPoseEstimation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t>* streamer) {
                       return this->StreameddoPoseEstimation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_doPoseEstimation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status doPoseEstimation(::grpc::ServerContext* /*context*/, const ::vlam::pe::PoseEstimationIn* /*request*/, ::vpresult::VPService_t* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddoPoseEstimation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vlam::pe::PoseEstimationIn,::vpresult::VPService_t>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unitTest_SAModule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unitTest_SAModule() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn>* streamer) {
                       return this->StreamedunitTest_SAModule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unitTest_SAModule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unitTest_SAModule(::grpc::ServerContext* /*context*/, const ::vlam::sa::ImageEnhancementIn* /*request*/, ::vlam::pe::PoseEstimationIn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunitTest_SAModule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vlam::sa::ImageEnhancementIn,::vlam::pe::PoseEstimationIn>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_doVisualPositioning<WithStreamedUnaryMethod_doPoseEstimation<WithStreamedUnaryMethod_unitTest_SAModule<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_doVisualPositioning<WithStreamedUnaryMethod_doPoseEstimation<WithStreamedUnaryMethod_unitTest_SAModule<Service > > > StreamedService;
};

class DBPlatform final {
 public:
  static constexpr char const* service_full_name() {
    return "vlam.internal.DBPlatform";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::vlam::sa::FeatureExtractionOut* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::sa::FeatureExtractionOut>> AsyncgetVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::sa::FeatureExtractionOut>>(AsyncgetVisualFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::sa::FeatureExtractionOut>> PrepareAsyncgetVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vlam::sa::FeatureExtractionOut>>(PrepareAsyncgetVisualFeaturesRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vlam::sa::FeatureExtractionOut>* AsyncgetVisualFeaturesRaw(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vlam::sa::FeatureExtractionOut>* PrepareAsyncgetVisualFeaturesRaw(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::vlam::sa::FeatureExtractionOut* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>> AsyncgetVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>>(AsyncgetVisualFeaturesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>> PrepareAsyncgetVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>>(PrepareAsyncgetVisualFeaturesRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>* AsyncgetVisualFeaturesRaw(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>* PrepareAsyncgetVisualFeaturesRaw(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_getVisualFeatures_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status getVisualFeatures(::grpc::ServerContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_getVisualFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_getVisualFeatures() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_getVisualFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVisualFeatures(::grpc::ServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVisualFeatures(::grpc::ServerContext* context, ::vlam::sa::FeatureExtractionIn* request, ::grpc::ServerAsyncResponseWriter< ::vlam::sa::FeatureExtractionOut>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_getVisualFeatures<Service > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_getVisualFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_getVisualFeatures() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response) { return this->getVisualFeatures(context, request, response); }));}
    void SetMessageAllocatorFor_getVisualFeatures(
        ::grpc::experimental::MessageAllocator< ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_getVisualFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVisualFeatures(::grpc::ServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getVisualFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getVisualFeatures(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_getVisualFeatures<Service > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_getVisualFeatures<Service > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_getVisualFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_getVisualFeatures() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_getVisualFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVisualFeatures(::grpc::ServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_getVisualFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_getVisualFeatures() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_getVisualFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVisualFeatures(::grpc::ServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetVisualFeatures(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_getVisualFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_getVisualFeatures() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->getVisualFeatures(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_getVisualFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getVisualFeatures(::grpc::ServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* getVisualFeatures(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* getVisualFeatures(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getVisualFeatures : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_getVisualFeatures() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut>* streamer) {
                       return this->StreamedgetVisualFeatures(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_getVisualFeatures() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getVisualFeatures(::grpc::ServerContext* /*context*/, const ::vlam::sa::FeatureExtractionIn* /*request*/, ::vlam::sa::FeatureExtractionOut* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetVisualFeatures(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vlam::sa::FeatureExtractionIn,::vlam::sa::FeatureExtractionOut>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_getVisualFeatures<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_getVisualFeatures<Service > StreamedService;
};

}  // namespace internal
}  // namespace vlam


#endif  // GRPC_InternalRPC_2eproto__INCLUDED
