// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vpresult.proto

#include "vpresult.pb.h"
#include "vpresult.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vpresult {

static const char* LocationService_method_names[] = {
  "/vpresult.LocationService/getLocationPose",
  "/vpresult.LocationService/getLocationInfo",
};

std::unique_ptr< LocationService::Stub> LocationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LocationService::Stub> stub(new LocationService::Stub(channel, options));
  return stub;
}

LocationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getLocationPose_(LocationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getLocationInfo_(LocationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LocationService::Stub::getLocationPose(::grpc::ClientContext* context, const ::vpdata::VPData& request, ::vpresult::VPService_t* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vpdata::VPData, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLocationPose_, context, request, response);
}

void LocationService::Stub::experimental_async::getLocationPose(::grpc::ClientContext* context, const ::vpdata::VPData* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vpdata::VPData, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocationPose_, context, request, response, std::move(f));
}

void LocationService::Stub::experimental_async::getLocationPose(::grpc::ClientContext* context, const ::vpdata::VPData* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocationPose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* LocationService::Stub::PrepareAsyncgetLocationPoseRaw(::grpc::ClientContext* context, const ::vpdata::VPData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vpresult::VPService_t, ::vpdata::VPData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLocationPose_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* LocationService::Stub::AsyncgetLocationPoseRaw(::grpc::ClientContext* context, const ::vpdata::VPData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLocationPoseRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::getLocationInfo(::grpc::ClientContext* context, const ::vpdata::VPData& request, ::google::protobuf::FloatValue* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vpdata::VPData, ::google::protobuf::FloatValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getLocationInfo_, context, request, response);
}

void LocationService::Stub::experimental_async::getLocationInfo(::grpc::ClientContext* context, const ::vpdata::VPData* request, ::google::protobuf::FloatValue* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vpdata::VPData, ::google::protobuf::FloatValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocationInfo_, context, request, response, std::move(f));
}

void LocationService::Stub::experimental_async::getLocationInfo(::grpc::ClientContext* context, const ::vpdata::VPData* request, ::google::protobuf::FloatValue* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getLocationInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::FloatValue>* LocationService::Stub::PrepareAsyncgetLocationInfoRaw(::grpc::ClientContext* context, const ::vpdata::VPData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::FloatValue, ::vpdata::VPData, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getLocationInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::FloatValue>* LocationService::Stub::AsyncgetLocationInfoRaw(::grpc::ClientContext* context, const ::vpdata::VPData& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetLocationInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

LocationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::vpdata::VPData, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vpdata::VPData* req,
             ::vpresult::VPService_t* resp) {
               return service->getLocationPose(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::vpdata::VPData, ::google::protobuf::FloatValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vpdata::VPData* req,
             ::google::protobuf::FloatValue* resp) {
               return service->getLocationInfo(ctx, req, resp);
             }, this)));
}

LocationService::Service::~Service() {
}

::grpc::Status LocationService::Service::getLocationPose(::grpc::ServerContext* context, const ::vpdata::VPData* request, ::vpresult::VPService_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::getLocationInfo(::grpc::ServerContext* context, const ::vpdata::VPData* request, ::google::protobuf::FloatValue* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vpresult

