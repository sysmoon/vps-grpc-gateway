// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: InternalRPC.proto

#include "InternalRPC.pb.h"
#include "InternalRPC.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vlam {
namespace internal {

static const char* Positioning_method_names[] = {
  "/vlam.internal.Positioning/doVisualPositioning",
  "/vlam.internal.Positioning/doPoseEstimation",
  "/vlam.internal.Positioning/unitTest_SAModule",
};

std::unique_ptr< Positioning::Stub> Positioning::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Positioning::Stub> stub(new Positioning::Stub(channel, options));
  return stub;
}

Positioning::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_doVisualPositioning_(Positioning_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_doPoseEstimation_(Positioning_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_unitTest_SAModule_(Positioning_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Positioning::Stub::doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::vpresult::VPService_t* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doVisualPositioning_, context, request, response);
}

void Positioning::Stub::experimental_async::doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doVisualPositioning_, context, request, response, std::move(f));
}

void Positioning::Stub::experimental_async::doVisualPositioning(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doVisualPositioning_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* Positioning::Stub::PrepareAsyncdoVisualPositioningRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vpresult::VPService_t, ::vlam::sa::ImageEnhancementIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doVisualPositioning_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* Positioning::Stub::AsyncdoVisualPositioningRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoVisualPositioningRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Positioning::Stub::doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::vpresult::VPService_t* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_doPoseEstimation_, context, request, response);
}

void Positioning::Stub::experimental_async::doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doPoseEstimation_, context, request, response, std::move(f));
}

void Positioning::Stub::experimental_async::doPoseEstimation(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_doPoseEstimation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* Positioning::Stub::PrepareAsyncdoPoseEstimationRaw(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vpresult::VPService_t, ::vlam::pe::PoseEstimationIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_doPoseEstimation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vpresult::VPService_t>* Positioning::Stub::AsyncdoPoseEstimationRaw(::grpc::ClientContext* context, const ::vlam::pe::PoseEstimationIn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdoPoseEstimationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Positioning::Stub::unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::vlam::pe::PoseEstimationIn* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_unitTest_SAModule_, context, request, response);
}

void Positioning::Stub::experimental_async::unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unitTest_SAModule_, context, request, response, std::move(f));
}

void Positioning::Stub::experimental_async::unitTest_SAModule(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_unitTest_SAModule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>* Positioning::Stub::PrepareAsyncunitTest_SAModuleRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vlam::pe::PoseEstimationIn, ::vlam::sa::ImageEnhancementIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_unitTest_SAModule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vlam::pe::PoseEstimationIn>* Positioning::Stub::AsyncunitTest_SAModuleRaw(::grpc::ClientContext* context, const ::vlam::sa::ImageEnhancementIn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncunitTest_SAModuleRaw(context, request, cq);
  result->StartCall();
  return result;
}

Positioning::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Positioning_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Positioning::Service, ::vlam::sa::ImageEnhancementIn, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Positioning::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vlam::sa::ImageEnhancementIn* req,
             ::vpresult::VPService_t* resp) {
               return service->doVisualPositioning(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Positioning_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Positioning::Service, ::vlam::pe::PoseEstimationIn, ::vpresult::VPService_t, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Positioning::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vlam::pe::PoseEstimationIn* req,
             ::vpresult::VPService_t* resp) {
               return service->doPoseEstimation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Positioning_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Positioning::Service, ::vlam::sa::ImageEnhancementIn, ::vlam::pe::PoseEstimationIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Positioning::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vlam::sa::ImageEnhancementIn* req,
             ::vlam::pe::PoseEstimationIn* resp) {
               return service->unitTest_SAModule(ctx, req, resp);
             }, this)));
}

Positioning::Service::~Service() {
}

::grpc::Status Positioning::Service::doVisualPositioning(::grpc::ServerContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vpresult::VPService_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Positioning::Service::doPoseEstimation(::grpc::ServerContext* context, const ::vlam::pe::PoseEstimationIn* request, ::vpresult::VPService_t* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Positioning::Service::unitTest_SAModule(::grpc::ServerContext* context, const ::vlam::sa::ImageEnhancementIn* request, ::vlam::pe::PoseEstimationIn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* DBPlatform_method_names[] = {
  "/vlam.internal.DBPlatform/getVisualFeatures",
};

std::unique_ptr< DBPlatform::Stub> DBPlatform::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DBPlatform::Stub> stub(new DBPlatform::Stub(channel, options));
  return stub;
}

DBPlatform::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_getVisualFeatures_(DBPlatform_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DBPlatform::Stub::getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::vlam::sa::FeatureExtractionOut* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_getVisualFeatures_, context, request, response);
}

void DBPlatform::Stub::experimental_async::getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVisualFeatures_, context, request, response, std::move(f));
}

void DBPlatform::Stub::experimental_async::getVisualFeatures(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_getVisualFeatures_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>* DBPlatform::Stub::PrepareAsyncgetVisualFeaturesRaw(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vlam::sa::FeatureExtractionOut, ::vlam::sa::FeatureExtractionIn, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_getVisualFeatures_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vlam::sa::FeatureExtractionOut>* DBPlatform::Stub::AsyncgetVisualFeaturesRaw(::grpc::ClientContext* context, const ::vlam::sa::FeatureExtractionIn& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncgetVisualFeaturesRaw(context, request, cq);
  result->StartCall();
  return result;
}

DBPlatform::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DBPlatform_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DBPlatform::Service, ::vlam::sa::FeatureExtractionIn, ::vlam::sa::FeatureExtractionOut, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DBPlatform::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vlam::sa::FeatureExtractionIn* req,
             ::vlam::sa::FeatureExtractionOut* resp) {
               return service->getVisualFeatures(ctx, req, resp);
             }, this)));
}

DBPlatform::Service::~Service() {
}

::grpc::Status DBPlatform::Service::getVisualFeatures(::grpc::ServerContext* context, const ::vlam::sa::FeatureExtractionIn* request, ::vlam::sa::FeatureExtractionOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vlam
}  // namespace internal

