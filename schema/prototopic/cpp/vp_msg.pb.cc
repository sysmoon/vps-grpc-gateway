// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_msg.proto

#include "vp_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vpdata {
constexpr VPHeader::VPHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ars32telcopci_()
  , _ars32telcopci_cached_byte_size_()
  , arf64lastloc_()
  , _arf64lastloc_cached_byte_size_()
  , arf32extrinsic_()
  , _arf32extrinsic_cached_byte_size_()
  , strschemaver_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strdevicename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strosinfo_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , strtargetenv_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , u64tssend_(PROTOBUF_ULONGLONG(0))
  , s32telcorssi_(0){}
struct VPHeaderDefaultTypeInternal {
  constexpr VPHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPHeaderDefaultTypeInternal() {}
  union {
    VPHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPHeaderDefaultTypeInternal _VPHeader_default_instance_;
constexpr VPBody::VPBody(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stgps_()
  , stimu_()
  , stbarometer_()
  , stmagneticcompass_()
  , stgpslocationinfo_()
  , staccelerometerinfo_()
  , stgyroscopeinfo_()
  , strotationvectorinfo_()
  , ststepcounterinfo_()
  , ststepdetectorinfo_()
  , stmagneticfieldinfo_()
  , stpressureinfo_()
  , stsubcameras_()
  , ststate_(nullptr)
  , stcamera_(nullptr){}
struct VPBodyDefaultTypeInternal {
  constexpr VPBodyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPBodyDefaultTypeInternal() {}
  union {
    VPBody _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPBodyDefaultTypeInternal _VPBody_default_instance_;
constexpr VPData::VPData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stvpheader_(nullptr)
  , stvpbody_(nullptr){}
struct VPDataDefaultTypeInternal {
  constexpr VPDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPDataDefaultTypeInternal() {}
  union {
    VPData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPDataDefaultTypeInternal _VPData_default_instance_;
}  // namespace vpdata
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vp_5fmsg_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vp_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vp_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vp_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, strschemaver_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, strdevicename_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, strosinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, ars32telcopci_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, s32telcorssi_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, u64tssend_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, arf64lastloc_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, arf32extrinsic_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPHeader, strtargetenv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, ststate_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stcamera_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stgps_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stimu_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stbarometer_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stmagneticcompass_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stgpslocationinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, staccelerometerinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stgyroscopeinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, strotationvectorinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, ststepcounterinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, ststepdetectorinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stmagneticfieldinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stpressureinfo_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPBody, stsubcameras_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::VPData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::VPData, stvpheader_),
  PROTOBUF_FIELD_OFFSET(::vpdata::VPData, stvpbody_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vpdata::VPHeader)},
  { 14, -1, sizeof(::vpdata::VPBody)},
  { 34, -1, sizeof(::vpdata::VPData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::_VPHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::_VPBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::_VPData_default_instance_),
};

const char descriptor_table_protodef_vp_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014vp_msg.proto\022\006vpdata\032\016vp_state.proto\032\017"
  "vp_camera.proto\032\020vp_sensors.proto\"\316\001\n\010VP"
  "Header\022\024\n\014strSchemaVer\030\001 \001(\t\022\025\n\rstrDevic"
  "eName\030\002 \001(\t\022\021\n\tstrOSInfo\030\003 \001(\t\022\025\n\rars32T"
  "elcoPCI\030\004 \003(\005\022\024\n\014s32TelcoRSSI\030\005 \001(\005\022\021\n\tu"
  "64TSSend\030\006 \001(\004\022\024\n\014arf64LastLoc\030\007 \003(\001\022\026\n\016"
  "arf32Extrinsic\030\010 \003(\002\022\024\n\014strTargetEnv\030\t \001"
  "(\t\"\267\006\n\006VPBody\022(\n\007stState\030\001 \001(\0132\027.vpdata."
  "state.VPState_t\022)\n\010stCamera\030\002 \001(\0132\027.vpda"
  "ta.camera.Camera_t\022$\n\005stGPS\030\003 \003(\0132\025.vpda"
  "ta.sensors.GPS_t\022$\n\005stIMU\030\004 \003(\0132\025.vpdata"
  ".sensors.IMU_t\0220\n\013stBaroMeter\030\005 \003(\0132\033.vp"
  "data.sensors.Barometer_t\0225\n\021stMagneticCo"
  "mpass\030\006 \003(\0132\032.vpdata.sensors.MCompass_t\022"
  "<\n\021stGPSLocationInfo\030\007 \003(\0132!.vpdata.sens"
  "ors.GPSLocationInfo_t\022@\n\023stAccelerometer"
  "Info\030\010 \003(\0132#.vpdata.sensors.Acceleromete"
  "rInfo_t\0228\n\017stGyroscopeInfo\030\t \003(\0132\037.vpdat"
  "a.sensors.GyroscopeInfo_t\022B\n\024stRotationV"
  "ectorInfo\030\n \003(\0132$.vpdata.sensors.Rotatio"
  "nVectorInfo_t\022<\n\021stStepCounterInfo\030\013 \003(\013"
  "2!.vpdata.sensors.StepCounterInfo_t\022>\n\022s"
  "tStepDetectorInfo\030\014 \003(\0132\".vpdata.sensors"
  ".StepDetectorInfo_t\022@\n\023stMagneticFieldIn"
  "fo\030\r \003(\0132#.vpdata.sensors.MagneticFieldI"
  "nfo_t\0226\n\016stPressureInfo\030\016 \003(\0132\036.vpdata.s"
  "ensors.PressureInfo_t\022-\n\014stSubCameras\030\025 "
  "\003(\0132\027.vpdata.camera.Camera_t\"P\n\006VPData\022$"
  "\n\nstVPHeader\030\001 \001(\0132\020.vpdata.VPHeader\022 \n\010"
  "stVPBody\030\002 \001(\0132\016.vpdata.VPBodyB\025\n\023msgman"
  "ager.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vp_5fmsg_2eproto_deps[3] = {
  &::descriptor_table_vp_5fcamera_2eproto,
  &::descriptor_table_vp_5fsensors_2eproto,
  &::descriptor_table_vp_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vp_5fmsg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fmsg_2eproto = {
  false, false, 1221, descriptor_table_protodef_vp_5fmsg_2eproto, "vp_msg.proto", 
  &descriptor_table_vp_5fmsg_2eproto_once, descriptor_table_vp_5fmsg_2eproto_deps, 3, 3,
  schemas, file_default_instances, TableStruct_vp_5fmsg_2eproto::offsets,
  file_level_metadata_vp_5fmsg_2eproto, file_level_enum_descriptors_vp_5fmsg_2eproto, file_level_service_descriptors_vp_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vp_5fmsg_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fmsg_2eproto);
  return descriptor_table_vp_5fmsg_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vp_5fmsg_2eproto(&descriptor_table_vp_5fmsg_2eproto);
namespace vpdata {

// ===================================================================

class VPHeader::_Internal {
 public:
};

VPHeader::VPHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ars32telcopci_(arena),
  arf64lastloc_(arena),
  arf32extrinsic_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.VPHeader)
}
VPHeader::VPHeader(const VPHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ars32telcopci_(from.ars32telcopci_),
      arf64lastloc_(from.arf64lastloc_),
      arf32extrinsic_(from.arf32extrinsic_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strschemaver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strschemaver().empty()) {
    strschemaver_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strschemaver(), 
      GetArena());
  }
  strdevicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strdevicename().empty()) {
    strdevicename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strdevicename(), 
      GetArena());
  }
  strosinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strosinfo().empty()) {
    strosinfo_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strosinfo(), 
      GetArena());
  }
  strtargetenv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_strtargetenv().empty()) {
    strtargetenv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_strtargetenv(), 
      GetArena());
  }
  ::memcpy(&u64tssend_, &from.u64tssend_,
    static_cast<size_t>(reinterpret_cast<char*>(&s32telcorssi_) -
    reinterpret_cast<char*>(&u64tssend_)) + sizeof(s32telcorssi_));
  // @@protoc_insertion_point(copy_constructor:vpdata.VPHeader)
}

void VPHeader::SharedCtor() {
strschemaver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
strdevicename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
strosinfo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
strtargetenv_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&u64tssend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&s32telcorssi_) -
    reinterpret_cast<char*>(&u64tssend_)) + sizeof(s32telcorssi_));
}

VPHeader::~VPHeader() {
  // @@protoc_insertion_point(destructor:vpdata.VPHeader)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  strschemaver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strdevicename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strosinfo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  strtargetenv_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VPHeader::ArenaDtor(void* object) {
  VPHeader* _this = reinterpret_cast< VPHeader* >(object);
  (void)_this;
}
void VPHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.VPHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ars32telcopci_.Clear();
  arf64lastloc_.Clear();
  arf32extrinsic_.Clear();
  strschemaver_.ClearToEmpty();
  strdevicename_.ClearToEmpty();
  strosinfo_.ClearToEmpty();
  strtargetenv_.ClearToEmpty();
  ::memset(&u64tssend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s32telcorssi_) -
      reinterpret_cast<char*>(&u64tssend_)) + sizeof(s32telcorssi_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string strSchemaVer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_strschemaver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vpdata.VPHeader.strSchemaVer"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strDeviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_strdevicename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vpdata.VPHeader.strDeviceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string strOSInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_strosinfo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vpdata.VPHeader.strOSInfo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ars32TelcoPCI = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ars32telcopci(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_ars32telcopci(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 s32TelcoRSSI = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          s32telcorssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 u64TSSend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          u64tssend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double arf64LastLoc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arf64lastloc(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          _internal_add_arf64lastloc(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float arf32Extrinsic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32extrinsic(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_arf32extrinsic(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string strTargetEnv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_strtargetenv();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "vpdata.VPHeader.strTargetEnv"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.VPHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string strSchemaVer = 1;
  if (this->strschemaver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strschemaver().data(), static_cast<int>(this->_internal_strschemaver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vpdata.VPHeader.strSchemaVer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_strschemaver(), target);
  }

  // string strDeviceName = 2;
  if (this->strdevicename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strdevicename().data(), static_cast<int>(this->_internal_strdevicename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vpdata.VPHeader.strDeviceName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strdevicename(), target);
  }

  // string strOSInfo = 3;
  if (this->strosinfo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strosinfo().data(), static_cast<int>(this->_internal_strosinfo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vpdata.VPHeader.strOSInfo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strosinfo(), target);
  }

  // repeated int32 ars32TelcoPCI = 4;
  {
    int byte_size = _ars32telcopci_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_ars32telcopci(), byte_size, target);
    }
  }

  // int32 s32TelcoRSSI = 5;
  if (this->s32telcorssi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_s32telcorssi(), target);
  }

  // uint64 u64TSSend = 6;
  if (this->u64tssend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_u64tssend(), target);
  }

  // repeated double arf64LastLoc = 7;
  if (this->_internal_arf64lastloc_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_arf64lastloc(), target);
  }

  // repeated float arf32Extrinsic = 8;
  if (this->_internal_arf32extrinsic_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_arf32extrinsic(), target);
  }

  // string strTargetEnv = 9;
  if (this->strtargetenv().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strtargetenv().data(), static_cast<int>(this->_internal_strtargetenv().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vpdata.VPHeader.strTargetEnv");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_strtargetenv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.VPHeader)
  return target;
}

size_t VPHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.VPHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ars32TelcoPCI = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ars32telcopci_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ars32telcopci_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double arf64LastLoc = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf64lastloc_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf64lastloc_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float arf32Extrinsic = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32extrinsic_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32extrinsic_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string strSchemaVer = 1;
  if (this->strschemaver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strschemaver());
  }

  // string strDeviceName = 2;
  if (this->strdevicename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strdevicename());
  }

  // string strOSInfo = 3;
  if (this->strosinfo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strosinfo());
  }

  // string strTargetEnv = 9;
  if (this->strtargetenv().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strtargetenv());
  }

  // uint64 u64TSSend = 6;
  if (this->u64tssend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tssend());
  }

  // int32 s32TelcoRSSI = 5;
  if (this->s32telcorssi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_s32telcorssi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.VPHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const VPHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.VPHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.VPHeader)
    MergeFrom(*source);
  }
}

void VPHeader::MergeFrom(const VPHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.VPHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ars32telcopci_.MergeFrom(from.ars32telcopci_);
  arf64lastloc_.MergeFrom(from.arf64lastloc_);
  arf32extrinsic_.MergeFrom(from.arf32extrinsic_);
  if (from.strschemaver().size() > 0) {
    _internal_set_strschemaver(from._internal_strschemaver());
  }
  if (from.strdevicename().size() > 0) {
    _internal_set_strdevicename(from._internal_strdevicename());
  }
  if (from.strosinfo().size() > 0) {
    _internal_set_strosinfo(from._internal_strosinfo());
  }
  if (from.strtargetenv().size() > 0) {
    _internal_set_strtargetenv(from._internal_strtargetenv());
  }
  if (from.u64tssend() != 0) {
    _internal_set_u64tssend(from._internal_u64tssend());
  }
  if (from.s32telcorssi() != 0) {
    _internal_set_s32telcorssi(from._internal_s32telcorssi());
  }
}

void VPHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.VPHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPHeader::CopyFrom(const VPHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.VPHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPHeader::IsInitialized() const {
  return true;
}

void VPHeader::InternalSwap(VPHeader* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ars32telcopci_.InternalSwap(&other->ars32telcopci_);
  arf64lastloc_.InternalSwap(&other->arf64lastloc_);
  arf32extrinsic_.InternalSwap(&other->arf32extrinsic_);
  strschemaver_.Swap(&other->strschemaver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strdevicename_.Swap(&other->strdevicename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strosinfo_.Swap(&other->strosinfo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  strtargetenv_.Swap(&other->strtargetenv_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPHeader, s32telcorssi_)
      + sizeof(VPHeader::s32telcorssi_)
      - PROTOBUF_FIELD_OFFSET(VPHeader, u64tssend_)>(
          reinterpret_cast<char*>(&u64tssend_),
          reinterpret_cast<char*>(&other->u64tssend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VPBody::_Internal {
 public:
  static const ::vpdata::state::VPState_t& ststate(const VPBody* msg);
  static const ::vpdata::camera::Camera_t& stcamera(const VPBody* msg);
};

const ::vpdata::state::VPState_t&
VPBody::_Internal::ststate(const VPBody* msg) {
  return *msg->ststate_;
}
const ::vpdata::camera::Camera_t&
VPBody::_Internal::stcamera(const VPBody* msg) {
  return *msg->stcamera_;
}
void VPBody::clear_ststate() {
  if (GetArena() == nullptr && ststate_ != nullptr) {
    delete ststate_;
  }
  ststate_ = nullptr;
}
void VPBody::clear_stcamera() {
  if (GetArena() == nullptr && stcamera_ != nullptr) {
    delete stcamera_;
  }
  stcamera_ = nullptr;
}
void VPBody::clear_stgps() {
  stgps_.Clear();
}
void VPBody::clear_stimu() {
  stimu_.Clear();
}
void VPBody::clear_stbarometer() {
  stbarometer_.Clear();
}
void VPBody::clear_stmagneticcompass() {
  stmagneticcompass_.Clear();
}
void VPBody::clear_stgpslocationinfo() {
  stgpslocationinfo_.Clear();
}
void VPBody::clear_staccelerometerinfo() {
  staccelerometerinfo_.Clear();
}
void VPBody::clear_stgyroscopeinfo() {
  stgyroscopeinfo_.Clear();
}
void VPBody::clear_strotationvectorinfo() {
  strotationvectorinfo_.Clear();
}
void VPBody::clear_ststepcounterinfo() {
  ststepcounterinfo_.Clear();
}
void VPBody::clear_ststepdetectorinfo() {
  ststepdetectorinfo_.Clear();
}
void VPBody::clear_stmagneticfieldinfo() {
  stmagneticfieldinfo_.Clear();
}
void VPBody::clear_stpressureinfo() {
  stpressureinfo_.Clear();
}
void VPBody::clear_stsubcameras() {
  stsubcameras_.Clear();
}
VPBody::VPBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stgps_(arena),
  stimu_(arena),
  stbarometer_(arena),
  stmagneticcompass_(arena),
  stgpslocationinfo_(arena),
  staccelerometerinfo_(arena),
  stgyroscopeinfo_(arena),
  strotationvectorinfo_(arena),
  ststepcounterinfo_(arena),
  ststepdetectorinfo_(arena),
  stmagneticfieldinfo_(arena),
  stpressureinfo_(arena),
  stsubcameras_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.VPBody)
}
VPBody::VPBody(const VPBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stgps_(from.stgps_),
      stimu_(from.stimu_),
      stbarometer_(from.stbarometer_),
      stmagneticcompass_(from.stmagneticcompass_),
      stgpslocationinfo_(from.stgpslocationinfo_),
      staccelerometerinfo_(from.staccelerometerinfo_),
      stgyroscopeinfo_(from.stgyroscopeinfo_),
      strotationvectorinfo_(from.strotationvectorinfo_),
      ststepcounterinfo_(from.ststepcounterinfo_),
      ststepdetectorinfo_(from.ststepdetectorinfo_),
      stmagneticfieldinfo_(from.stmagneticfieldinfo_),
      stpressureinfo_(from.stpressureinfo_),
      stsubcameras_(from.stsubcameras_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ststate()) {
    ststate_ = new ::vpdata::state::VPState_t(*from.ststate_);
  } else {
    ststate_ = nullptr;
  }
  if (from._internal_has_stcamera()) {
    stcamera_ = new ::vpdata::camera::Camera_t(*from.stcamera_);
  } else {
    stcamera_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vpdata.VPBody)
}

void VPBody::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ststate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stcamera_) -
    reinterpret_cast<char*>(&ststate_)) + sizeof(stcamera_));
}

VPBody::~VPBody() {
  // @@protoc_insertion_point(destructor:vpdata.VPBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ststate_;
  if (this != internal_default_instance()) delete stcamera_;
}

void VPBody::ArenaDtor(void* object) {
  VPBody* _this = reinterpret_cast< VPBody* >(object);
  (void)_this;
}
void VPBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPBody::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.VPBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stgps_.Clear();
  stimu_.Clear();
  stbarometer_.Clear();
  stmagneticcompass_.Clear();
  stgpslocationinfo_.Clear();
  staccelerometerinfo_.Clear();
  stgyroscopeinfo_.Clear();
  strotationvectorinfo_.Clear();
  ststepcounterinfo_.Clear();
  ststepdetectorinfo_.Clear();
  stmagneticfieldinfo_.Clear();
  stpressureinfo_.Clear();
  stsubcameras_.Clear();
  if (GetArena() == nullptr && ststate_ != nullptr) {
    delete ststate_;
  }
  ststate_ = nullptr;
  if (GetArena() == nullptr && stcamera_ != nullptr) {
    delete stcamera_;
  }
  stcamera_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vpdata.state.VPState_t stState = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ststate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vpdata.camera.Camera_t stCamera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stcamera(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.GPS_t stGPS = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stgps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.IMU_t stIMU = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stimu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.Barometer_t stBaroMeter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stbarometer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.MCompass_t stMagneticCompass = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stmagneticcompass(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.GPSLocationInfo_t stGPSLocationInfo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stgpslocationinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.AccelerometerInfo_t stAccelerometerInfo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_staccelerometerinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.GyroscopeInfo_t stGyroscopeInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stgyroscopeinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.RotationVectorInfo_t stRotationVectorInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_strotationvectorinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.StepCounterInfo_t stStepCounterInfo = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ststepcounterinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.StepDetectorInfo_t stStepDetectorInfo = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ststepdetectorinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.MagneticFieldInfo_t stMagneticFieldInfo = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stmagneticfieldinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.sensors.PressureInfo_t stPressureInfo = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stpressureinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .vpdata.camera.Camera_t stSubCameras = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_stsubcameras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.VPBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vpdata.state.VPState_t stState = 1;
  if (this->has_ststate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ststate(this), target, stream);
  }

  // .vpdata.camera.Camera_t stCamera = 2;
  if (this->has_stcamera()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stcamera(this), target, stream);
  }

  // repeated .vpdata.sensors.GPS_t stGPS = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stgps_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_stgps(i), target, stream);
  }

  // repeated .vpdata.sensors.IMU_t stIMU = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stimu_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_stimu(i), target, stream);
  }

  // repeated .vpdata.sensors.Barometer_t stBaroMeter = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stbarometer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_stbarometer(i), target, stream);
  }

  // repeated .vpdata.sensors.MCompass_t stMagneticCompass = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stmagneticcompass_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_stmagneticcompass(i), target, stream);
  }

  // repeated .vpdata.sensors.GPSLocationInfo_t stGPSLocationInfo = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stgpslocationinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_stgpslocationinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.AccelerometerInfo_t stAccelerometerInfo = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_staccelerometerinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_staccelerometerinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.GyroscopeInfo_t stGyroscopeInfo = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stgyroscopeinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_stgyroscopeinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.RotationVectorInfo_t stRotationVectorInfo = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_strotationvectorinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_strotationvectorinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.StepCounterInfo_t stStepCounterInfo = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ststepcounterinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_ststepcounterinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.StepDetectorInfo_t stStepDetectorInfo = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ststepdetectorinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_ststepdetectorinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.MagneticFieldInfo_t stMagneticFieldInfo = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stmagneticfieldinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_stmagneticfieldinfo(i), target, stream);
  }

  // repeated .vpdata.sensors.PressureInfo_t stPressureInfo = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stpressureinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_stpressureinfo(i), target, stream);
  }

  // repeated .vpdata.camera.Camera_t stSubCameras = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stsubcameras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_stsubcameras(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.VPBody)
  return target;
}

size_t VPBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.VPBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vpdata.sensors.GPS_t stGPS = 3;
  total_size += 1UL * this->_internal_stgps_size();
  for (const auto& msg : this->stgps_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.IMU_t stIMU = 4;
  total_size += 1UL * this->_internal_stimu_size();
  for (const auto& msg : this->stimu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.Barometer_t stBaroMeter = 5;
  total_size += 1UL * this->_internal_stbarometer_size();
  for (const auto& msg : this->stbarometer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.MCompass_t stMagneticCompass = 6;
  total_size += 1UL * this->_internal_stmagneticcompass_size();
  for (const auto& msg : this->stmagneticcompass_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.GPSLocationInfo_t stGPSLocationInfo = 7;
  total_size += 1UL * this->_internal_stgpslocationinfo_size();
  for (const auto& msg : this->stgpslocationinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.AccelerometerInfo_t stAccelerometerInfo = 8;
  total_size += 1UL * this->_internal_staccelerometerinfo_size();
  for (const auto& msg : this->staccelerometerinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.GyroscopeInfo_t stGyroscopeInfo = 9;
  total_size += 1UL * this->_internal_stgyroscopeinfo_size();
  for (const auto& msg : this->stgyroscopeinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.RotationVectorInfo_t stRotationVectorInfo = 10;
  total_size += 1UL * this->_internal_strotationvectorinfo_size();
  for (const auto& msg : this->strotationvectorinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.StepCounterInfo_t stStepCounterInfo = 11;
  total_size += 1UL * this->_internal_ststepcounterinfo_size();
  for (const auto& msg : this->ststepcounterinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.StepDetectorInfo_t stStepDetectorInfo = 12;
  total_size += 1UL * this->_internal_ststepdetectorinfo_size();
  for (const auto& msg : this->ststepdetectorinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.MagneticFieldInfo_t stMagneticFieldInfo = 13;
  total_size += 1UL * this->_internal_stmagneticfieldinfo_size();
  for (const auto& msg : this->stmagneticfieldinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.sensors.PressureInfo_t stPressureInfo = 14;
  total_size += 1UL * this->_internal_stpressureinfo_size();
  for (const auto& msg : this->stpressureinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vpdata.camera.Camera_t stSubCameras = 21;
  total_size += 2UL * this->_internal_stsubcameras_size();
  for (const auto& msg : this->stsubcameras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vpdata.state.VPState_t stState = 1;
  if (this->has_ststate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ststate_);
  }

  // .vpdata.camera.Camera_t stCamera = 2;
  if (this->has_stcamera()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stcamera_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.VPBody)
  GOOGLE_DCHECK_NE(&from, this);
  const VPBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.VPBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.VPBody)
    MergeFrom(*source);
  }
}

void VPBody::MergeFrom(const VPBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.VPBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stgps_.MergeFrom(from.stgps_);
  stimu_.MergeFrom(from.stimu_);
  stbarometer_.MergeFrom(from.stbarometer_);
  stmagneticcompass_.MergeFrom(from.stmagneticcompass_);
  stgpslocationinfo_.MergeFrom(from.stgpslocationinfo_);
  staccelerometerinfo_.MergeFrom(from.staccelerometerinfo_);
  stgyroscopeinfo_.MergeFrom(from.stgyroscopeinfo_);
  strotationvectorinfo_.MergeFrom(from.strotationvectorinfo_);
  ststepcounterinfo_.MergeFrom(from.ststepcounterinfo_);
  ststepdetectorinfo_.MergeFrom(from.ststepdetectorinfo_);
  stmagneticfieldinfo_.MergeFrom(from.stmagneticfieldinfo_);
  stpressureinfo_.MergeFrom(from.stpressureinfo_);
  stsubcameras_.MergeFrom(from.stsubcameras_);
  if (from.has_ststate()) {
    _internal_mutable_ststate()->::vpdata::state::VPState_t::MergeFrom(from._internal_ststate());
  }
  if (from.has_stcamera()) {
    _internal_mutable_stcamera()->::vpdata::camera::Camera_t::MergeFrom(from._internal_stcamera());
  }
}

void VPBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.VPBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPBody::CopyFrom(const VPBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.VPBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPBody::IsInitialized() const {
  return true;
}

void VPBody::InternalSwap(VPBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stgps_.InternalSwap(&other->stgps_);
  stimu_.InternalSwap(&other->stimu_);
  stbarometer_.InternalSwap(&other->stbarometer_);
  stmagneticcompass_.InternalSwap(&other->stmagneticcompass_);
  stgpslocationinfo_.InternalSwap(&other->stgpslocationinfo_);
  staccelerometerinfo_.InternalSwap(&other->staccelerometerinfo_);
  stgyroscopeinfo_.InternalSwap(&other->stgyroscopeinfo_);
  strotationvectorinfo_.InternalSwap(&other->strotationvectorinfo_);
  ststepcounterinfo_.InternalSwap(&other->ststepcounterinfo_);
  ststepdetectorinfo_.InternalSwap(&other->ststepdetectorinfo_);
  stmagneticfieldinfo_.InternalSwap(&other->stmagneticfieldinfo_);
  stpressureinfo_.InternalSwap(&other->stpressureinfo_);
  stsubcameras_.InternalSwap(&other->stsubcameras_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPBody, stcamera_)
      + sizeof(VPBody::stcamera_)
      - PROTOBUF_FIELD_OFFSET(VPBody, ststate_)>(
          reinterpret_cast<char*>(&ststate_),
          reinterpret_cast<char*>(&other->ststate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VPData::_Internal {
 public:
  static const ::vpdata::VPHeader& stvpheader(const VPData* msg);
  static const ::vpdata::VPBody& stvpbody(const VPData* msg);
};

const ::vpdata::VPHeader&
VPData::_Internal::stvpheader(const VPData* msg) {
  return *msg->stvpheader_;
}
const ::vpdata::VPBody&
VPData::_Internal::stvpbody(const VPData* msg) {
  return *msg->stvpbody_;
}
VPData::VPData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.VPData)
}
VPData::VPData(const VPData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stvpheader()) {
    stvpheader_ = new ::vpdata::VPHeader(*from.stvpheader_);
  } else {
    stvpheader_ = nullptr;
  }
  if (from._internal_has_stvpbody()) {
    stvpbody_ = new ::vpdata::VPBody(*from.stvpbody_);
  } else {
    stvpbody_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:vpdata.VPData)
}

void VPData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stvpheader_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stvpbody_) -
    reinterpret_cast<char*>(&stvpheader_)) + sizeof(stvpbody_));
}

VPData::~VPData() {
  // @@protoc_insertion_point(destructor:vpdata.VPData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stvpheader_;
  if (this != internal_default_instance()) delete stvpbody_;
}

void VPData::ArenaDtor(void* object) {
  VPData* _this = reinterpret_cast< VPData* >(object);
  (void)_this;
}
void VPData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPData::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.VPData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stvpheader_ != nullptr) {
    delete stvpheader_;
  }
  stvpheader_ = nullptr;
  if (GetArena() == nullptr && stvpbody_ != nullptr) {
    delete stvpbody_;
  }
  stvpbody_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vpdata.VPHeader stVPHeader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpheader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vpdata.VPBody stVPBody = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpbody(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.VPData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vpdata.VPHeader stVPHeader = 1;
  if (this->has_stvpheader()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stvpheader(this), target, stream);
  }

  // .vpdata.VPBody stVPBody = 2;
  if (this->has_stvpbody()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stvpbody(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.VPData)
  return target;
}

size_t VPData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.VPData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vpdata.VPHeader stVPHeader = 1;
  if (this->has_stvpheader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpheader_);
  }

  // .vpdata.VPBody stVPBody = 2;
  if (this->has_stvpbody()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpbody_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.VPData)
  GOOGLE_DCHECK_NE(&from, this);
  const VPData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.VPData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.VPData)
    MergeFrom(*source);
  }
}

void VPData::MergeFrom(const VPData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.VPData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stvpheader()) {
    _internal_mutable_stvpheader()->::vpdata::VPHeader::MergeFrom(from._internal_stvpheader());
  }
  if (from.has_stvpbody()) {
    _internal_mutable_stvpbody()->::vpdata::VPBody::MergeFrom(from._internal_stvpbody());
  }
}

void VPData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.VPData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPData::CopyFrom(const VPData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.VPData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPData::IsInitialized() const {
  return true;
}

void VPData::InternalSwap(VPData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPData, stvpbody_)
      + sizeof(VPData::stvpbody_)
      - PROTOBUF_FIELD_OFFSET(VPData, stvpheader_)>(
          reinterpret_cast<char*>(&stvpheader_),
          reinterpret_cast<char*>(&other->stvpheader_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vpdata::VPHeader* Arena::CreateMaybeMessage< ::vpdata::VPHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::VPHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::VPBody* Arena::CreateMaybeMessage< ::vpdata::VPBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::VPBody >(arena);
}
template<> PROTOBUF_NOINLINE ::vpdata::VPData* Arena::CreateMaybeMessage< ::vpdata::VPData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::VPData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
