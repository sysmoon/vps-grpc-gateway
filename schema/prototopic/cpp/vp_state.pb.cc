// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vp_state.proto

#include "vp_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace vpdata {
namespace state {
constexpr VPState_t::VPState_t(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arf64lastlocation_()
  , _arf64lastlocation_cached_byte_size_()
  , arf32lastorientation_()
  , _arf32lastorientation_cached_byte_size_()
  , arf32lastdrpose_()
  , _arf32lastdrpose_cached_byte_size_()
  , arf32curdrpose_()
  , _arf32curdrpose_cached_byte_size_()
  , stframeposeinfoset_()
  , stparamset_()
  , stlinearvelocitykf_(nullptr)
  , stvpsposekf_(nullptr)
  , u64tslastloc_(PROTOBUF_ULONGLONG(0))
  , evpstatus_(0)

  , evpstatustrackingmode_(0)
{}
struct VPState_tDefaultTypeInternal {
  constexpr VPState_tDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VPState_tDefaultTypeInternal() {}
  union {
    VPState_t _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VPState_tDefaultTypeInternal _VPState_t_default_instance_;
}  // namespace state
}  // namespace vpdata
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vp_5fstate_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vp_5fstate_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vp_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vp_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, evpstatus_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, u64tslastloc_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, arf64lastlocation_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, arf32lastorientation_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, arf32lastdrpose_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, arf32curdrpose_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, evpstatustrackingmode_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, stframeposeinfoset_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, stlinearvelocitykf_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, stvpsposekf_),
  PROTOBUF_FIELD_OFFSET(::vpdata::state::VPState_t, stparamset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::vpdata::state::VPState_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::vpdata::state::_VPState_t_default_instance_),
};

const char descriptor_table_protodef_vp_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016vp_state.proto\022\014vpdata.state\032\021vp_track"
  "ing.proto\"\242\004\n\tVPState_t\0223\n\teVPStatus\030\001 \001"
  "(\0162 .vpdata.state.VPState_t.VPStatus\022\024\n\014"
  "u64TSLastLoc\030\002 \001(\004\022\031\n\021arf64LastLocation\030"
  "\003 \003(\001\022\034\n\024arf32LastOrientation\030\004 \003(\002\022\027\n\017a"
  "rf32LastDRPose\030\005 \003(\002\022\026\n\016arf32CurDRPose\030\006"
  " \003(\002\022@\n\025eVPStatusTrackingMode\030\007 \001(\0162!.vp"
  ".tracking.VPStatusTrackingMode\0228\n\022stFram"
  "ePoseInfoSet\030\010 \003(\0132\034.vp.tracking.FramePo"
  "seInfo_t\0227\n\022stLinearVelocityKF\030\t \001(\0132\033.v"
  "p.tracking.KalmanFilter_t\0220\n\013stVPSPoseKF"
  "\030\n \001(\0132\033.vp.tracking.KalmanFilter_t\022(\n\ns"
  "tParamSet\030\013 \003(\0132\024.vp.tracking.Param_t\"O\n"
  "\010VPStatus\022\023\n\017eUNKNOWN_STATUS\020\000\022\t\n\005eINIT\020"
  "\001\022\n\n\006eTRACK\020\002\022\014\n\010eCOSTING\020\003\022\t\n\005eFAIL\020\004B\025"
  "\n\023msgmanager.protobufb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vp_5fstate_2eproto_deps[1] = {
  &::descriptor_table_vp_5ftracking_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vp_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vp_5fstate_2eproto = {
  false, false, 629, descriptor_table_protodef_vp_5fstate_2eproto, "vp_state.proto", 
  &descriptor_table_vp_5fstate_2eproto_once, descriptor_table_vp_5fstate_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_vp_5fstate_2eproto::offsets,
  file_level_metadata_vp_5fstate_2eproto, file_level_enum_descriptors_vp_5fstate_2eproto, file_level_service_descriptors_vp_5fstate_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_vp_5fstate_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fstate_2eproto);
  return descriptor_table_vp_5fstate_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_vp_5fstate_2eproto(&descriptor_table_vp_5fstate_2eproto);
namespace vpdata {
namespace state {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VPState_t_VPStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vp_5fstate_2eproto);
  return file_level_enum_descriptors_vp_5fstate_2eproto[0];
}
bool VPState_t_VPStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VPState_t_VPStatus VPState_t::eUNKNOWN_STATUS;
constexpr VPState_t_VPStatus VPState_t::eINIT;
constexpr VPState_t_VPStatus VPState_t::eTRACK;
constexpr VPState_t_VPStatus VPState_t::eCOSTING;
constexpr VPState_t_VPStatus VPState_t::eFAIL;
constexpr VPState_t_VPStatus VPState_t::VPStatus_MIN;
constexpr VPState_t_VPStatus VPState_t::VPStatus_MAX;
constexpr int VPState_t::VPStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class VPState_t::_Internal {
 public:
  static const ::vp::tracking::KalmanFilter_t& stlinearvelocitykf(const VPState_t* msg);
  static const ::vp::tracking::KalmanFilter_t& stvpsposekf(const VPState_t* msg);
};

const ::vp::tracking::KalmanFilter_t&
VPState_t::_Internal::stlinearvelocitykf(const VPState_t* msg) {
  return *msg->stlinearvelocitykf_;
}
const ::vp::tracking::KalmanFilter_t&
VPState_t::_Internal::stvpsposekf(const VPState_t* msg) {
  return *msg->stvpsposekf_;
}
void VPState_t::clear_stframeposeinfoset() {
  stframeposeinfoset_.Clear();
}
void VPState_t::clear_stlinearvelocitykf() {
  if (GetArena() == nullptr && stlinearvelocitykf_ != nullptr) {
    delete stlinearvelocitykf_;
  }
  stlinearvelocitykf_ = nullptr;
}
void VPState_t::clear_stvpsposekf() {
  if (GetArena() == nullptr && stvpsposekf_ != nullptr) {
    delete stvpsposekf_;
  }
  stvpsposekf_ = nullptr;
}
void VPState_t::clear_stparamset() {
  stparamset_.Clear();
}
VPState_t::VPState_t(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arf64lastlocation_(arena),
  arf32lastorientation_(arena),
  arf32lastdrpose_(arena),
  arf32curdrpose_(arena),
  stframeposeinfoset_(arena),
  stparamset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:vpdata.state.VPState_t)
}
VPState_t::VPState_t(const VPState_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arf64lastlocation_(from.arf64lastlocation_),
      arf32lastorientation_(from.arf32lastorientation_),
      arf32lastdrpose_(from.arf32lastdrpose_),
      arf32curdrpose_(from.arf32curdrpose_),
      stframeposeinfoset_(from.stframeposeinfoset_),
      stparamset_(from.stparamset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stlinearvelocitykf()) {
    stlinearvelocitykf_ = new ::vp::tracking::KalmanFilter_t(*from.stlinearvelocitykf_);
  } else {
    stlinearvelocitykf_ = nullptr;
  }
  if (from._internal_has_stvpsposekf()) {
    stvpsposekf_ = new ::vp::tracking::KalmanFilter_t(*from.stvpsposekf_);
  } else {
    stvpsposekf_ = nullptr;
  }
  ::memcpy(&u64tslastloc_, &from.u64tslastloc_,
    static_cast<size_t>(reinterpret_cast<char*>(&evpstatustrackingmode_) -
    reinterpret_cast<char*>(&u64tslastloc_)) + sizeof(evpstatustrackingmode_));
  // @@protoc_insertion_point(copy_constructor:vpdata.state.VPState_t)
}

void VPState_t::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stlinearvelocitykf_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&evpstatustrackingmode_) -
    reinterpret_cast<char*>(&stlinearvelocitykf_)) + sizeof(evpstatustrackingmode_));
}

VPState_t::~VPState_t() {
  // @@protoc_insertion_point(destructor:vpdata.state.VPState_t)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VPState_t::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stlinearvelocitykf_;
  if (this != internal_default_instance()) delete stvpsposekf_;
}

void VPState_t::ArenaDtor(void* object) {
  VPState_t* _this = reinterpret_cast< VPState_t* >(object);
  (void)_this;
}
void VPState_t::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VPState_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VPState_t::Clear() {
// @@protoc_insertion_point(message_clear_start:vpdata.state.VPState_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arf64lastlocation_.Clear();
  arf32lastorientation_.Clear();
  arf32lastdrpose_.Clear();
  arf32curdrpose_.Clear();
  stframeposeinfoset_.Clear();
  stparamset_.Clear();
  if (GetArena() == nullptr && stlinearvelocitykf_ != nullptr) {
    delete stlinearvelocitykf_;
  }
  stlinearvelocitykf_ = nullptr;
  if (GetArena() == nullptr && stvpsposekf_ != nullptr) {
    delete stvpsposekf_;
  }
  stvpsposekf_ = nullptr;
  ::memset(&u64tslastloc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&evpstatustrackingmode_) -
      reinterpret_cast<char*>(&u64tslastloc_)) + sizeof(evpstatustrackingmode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VPState_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .vpdata.state.VPState_t.VPStatus eVPStatus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evpstatus(static_cast<::vpdata::state::VPState_t_VPStatus>(val));
        } else goto handle_unusual;
        continue;
      // uint64 u64TSLastLoc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          u64tslastloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double arf64LastLocation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_arf64lastlocation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_arf64lastlocation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated float arf32LastOrientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32lastorientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          _internal_add_arf32lastorientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float arf32LastDRPose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32lastdrpose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_arf32lastdrpose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float arf32CurDRPose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_arf32curdrpose(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53) {
          _internal_add_arf32curdrpose(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_evpstatustrackingmode(static_cast<::vp::tracking::VPStatusTrackingMode>(val));
        } else goto handle_unusual;
        continue;
      // repeated .vp.tracking.FramePoseInfo_t stFramePoseInfoSet = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stframeposeinfoset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlinearvelocitykf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .vp.tracking.KalmanFilter_t stVPSPoseKF = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_stvpsposekf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .vp.tracking.Param_t stParamSet = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stparamset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VPState_t::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vpdata.state.VPState_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .vpdata.state.VPState_t.VPStatus eVPStatus = 1;
  if (this->evpstatus() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_evpstatus(), target);
  }

  // uint64 u64TSLastLoc = 2;
  if (this->u64tslastloc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_u64tslastloc(), target);
  }

  // repeated double arf64LastLocation = 3;
  if (this->_internal_arf64lastlocation_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_arf64lastlocation(), target);
  }

  // repeated float arf32LastOrientation = 4;
  if (this->_internal_arf32lastorientation_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_arf32lastorientation(), target);
  }

  // repeated float arf32LastDRPose = 5;
  if (this->_internal_arf32lastdrpose_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_arf32lastdrpose(), target);
  }

  // repeated float arf32CurDRPose = 6;
  if (this->_internal_arf32curdrpose_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_arf32curdrpose(), target);
  }

  // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 7;
  if (this->evpstatustrackingmode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_evpstatustrackingmode(), target);
  }

  // repeated .vp.tracking.FramePoseInfo_t stFramePoseInfoSet = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stframeposeinfoset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_stframeposeinfoset(i), target, stream);
  }

  // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 9;
  if (this->has_stlinearvelocitykf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stlinearvelocitykf(this), target, stream);
  }

  // .vp.tracking.KalmanFilter_t stVPSPoseKF = 10;
  if (this->has_stvpsposekf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::stvpsposekf(this), target, stream);
  }

  // repeated .vp.tracking.Param_t stParamSet = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stparamset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_stparamset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vpdata.state.VPState_t)
  return target;
}

size_t VPState_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vpdata.state.VPState_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double arf64LastLocation = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf64lastlocation_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf64lastlocation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float arf32LastOrientation = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32lastorientation_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32lastorientation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float arf32LastDRPose = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32lastdrpose_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32lastdrpose_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float arf32CurDRPose = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_arf32curdrpose_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _arf32curdrpose_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .vp.tracking.FramePoseInfo_t stFramePoseInfoSet = 8;
  total_size += 1UL * this->_internal_stframeposeinfoset_size();
  for (const auto& msg : this->stframeposeinfoset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .vp.tracking.Param_t stParamSet = 11;
  total_size += 1UL * this->_internal_stparamset_size();
  for (const auto& msg : this->stparamset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .vp.tracking.KalmanFilter_t stLinearVelocityKF = 9;
  if (this->has_stlinearvelocitykf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlinearvelocitykf_);
  }

  // .vp.tracking.KalmanFilter_t stVPSPoseKF = 10;
  if (this->has_stvpsposekf()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stvpsposekf_);
  }

  // uint64 u64TSLastLoc = 2;
  if (this->u64tslastloc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_u64tslastloc());
  }

  // .vpdata.state.VPState_t.VPStatus eVPStatus = 1;
  if (this->evpstatus() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evpstatus());
  }

  // .vp.tracking.VPStatusTrackingMode eVPStatusTrackingMode = 7;
  if (this->evpstatustrackingmode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_evpstatustrackingmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VPState_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:vpdata.state.VPState_t)
  GOOGLE_DCHECK_NE(&from, this);
  const VPState_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VPState_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:vpdata.state.VPState_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:vpdata.state.VPState_t)
    MergeFrom(*source);
  }
}

void VPState_t::MergeFrom(const VPState_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:vpdata.state.VPState_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arf64lastlocation_.MergeFrom(from.arf64lastlocation_);
  arf32lastorientation_.MergeFrom(from.arf32lastorientation_);
  arf32lastdrpose_.MergeFrom(from.arf32lastdrpose_);
  arf32curdrpose_.MergeFrom(from.arf32curdrpose_);
  stframeposeinfoset_.MergeFrom(from.stframeposeinfoset_);
  stparamset_.MergeFrom(from.stparamset_);
  if (from.has_stlinearvelocitykf()) {
    _internal_mutable_stlinearvelocitykf()->::vp::tracking::KalmanFilter_t::MergeFrom(from._internal_stlinearvelocitykf());
  }
  if (from.has_stvpsposekf()) {
    _internal_mutable_stvpsposekf()->::vp::tracking::KalmanFilter_t::MergeFrom(from._internal_stvpsposekf());
  }
  if (from.u64tslastloc() != 0) {
    _internal_set_u64tslastloc(from._internal_u64tslastloc());
  }
  if (from.evpstatus() != 0) {
    _internal_set_evpstatus(from._internal_evpstatus());
  }
  if (from.evpstatustrackingmode() != 0) {
    _internal_set_evpstatustrackingmode(from._internal_evpstatustrackingmode());
  }
}

void VPState_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:vpdata.state.VPState_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VPState_t::CopyFrom(const VPState_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vpdata.state.VPState_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VPState_t::IsInitialized() const {
  return true;
}

void VPState_t::InternalSwap(VPState_t* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  arf64lastlocation_.InternalSwap(&other->arf64lastlocation_);
  arf32lastorientation_.InternalSwap(&other->arf32lastorientation_);
  arf32lastdrpose_.InternalSwap(&other->arf32lastdrpose_);
  arf32curdrpose_.InternalSwap(&other->arf32curdrpose_);
  stframeposeinfoset_.InternalSwap(&other->stframeposeinfoset_);
  stparamset_.InternalSwap(&other->stparamset_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VPState_t, evpstatustrackingmode_)
      + sizeof(VPState_t::evpstatustrackingmode_)
      - PROTOBUF_FIELD_OFFSET(VPState_t, stlinearvelocitykf_)>(
          reinterpret_cast<char*>(&stlinearvelocitykf_),
          reinterpret_cast<char*>(&other->stlinearvelocitykf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VPState_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace state
}  // namespace vpdata
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vpdata::state::VPState_t* Arena::CreateMaybeMessage< ::vpdata::state::VPState_t >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vpdata::state::VPState_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
