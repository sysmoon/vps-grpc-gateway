// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vpresult.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vpresult_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vpresult_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "prdb_meta.pb.h"
#include "vp_tracking.pb.h"
#include "vp_msg.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vpresult_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vpresult_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vpresult_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_vpresult_2eproto_metadata_getter(int index);
namespace vpresult {
class VPService_t;
struct VPService_tDefaultTypeInternal;
extern VPService_tDefaultTypeInternal _VPService_t_default_instance_;
}  // namespace vpresult
PROTOBUF_NAMESPACE_OPEN
template<> ::vpresult::VPService_t* Arena::CreateMaybeMessage<::vpresult::VPService_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vpresult {

// ===================================================================

class VPService_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vpresult.VPService_t) */ {
 public:
  inline VPService_t() : VPService_t(nullptr) {}
  virtual ~VPService_t();
  explicit constexpr VPService_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VPService_t(const VPService_t& from);
  VPService_t(VPService_t&& from) noexcept
    : VPService_t() {
    *this = ::std::move(from);
  }

  inline VPService_t& operator=(const VPService_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline VPService_t& operator=(VPService_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VPService_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const VPService_t* internal_default_instance() {
    return reinterpret_cast<const VPService_t*>(
               &_VPService_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VPService_t& a, VPService_t& b) {
    a.Swap(&b);
  }
  inline void Swap(VPService_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VPService_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VPService_t* New() const final {
    return CreateMaybeMessage<VPService_t>(nullptr);
  }

  VPService_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VPService_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VPService_t& from);
  void MergeFrom(const VPService_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VPService_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vpresult.VPService_t";
  }
  protected:
  explicit VPService_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_vpresult_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStVPResultFieldNumber = 1,
    kStVPResultTrackingModeFieldNumber = 2,
  };
  // .prdb.meta.Meta_t stVPResult = 1;
  bool has_stvpresult() const;
  private:
  bool _internal_has_stvpresult() const;
  public:
  void clear_stvpresult();
  const ::prdb::meta::Meta_t& stvpresult() const;
  ::prdb::meta::Meta_t* release_stvpresult();
  ::prdb::meta::Meta_t* mutable_stvpresult();
  void set_allocated_stvpresult(::prdb::meta::Meta_t* stvpresult);
  private:
  const ::prdb::meta::Meta_t& _internal_stvpresult() const;
  ::prdb::meta::Meta_t* _internal_mutable_stvpresult();
  public:
  void unsafe_arena_set_allocated_stvpresult(
      ::prdb::meta::Meta_t* stvpresult);
  ::prdb::meta::Meta_t* unsafe_arena_release_stvpresult();

  // .vp.tracking.MetaTrackingMode_t stVPResultTrackingMode = 2;
  bool has_stvpresulttrackingmode() const;
  private:
  bool _internal_has_stvpresulttrackingmode() const;
  public:
  void clear_stvpresulttrackingmode();
  const ::vp::tracking::MetaTrackingMode_t& stvpresulttrackingmode() const;
  ::vp::tracking::MetaTrackingMode_t* release_stvpresulttrackingmode();
  ::vp::tracking::MetaTrackingMode_t* mutable_stvpresulttrackingmode();
  void set_allocated_stvpresulttrackingmode(::vp::tracking::MetaTrackingMode_t* stvpresulttrackingmode);
  private:
  const ::vp::tracking::MetaTrackingMode_t& _internal_stvpresulttrackingmode() const;
  ::vp::tracking::MetaTrackingMode_t* _internal_mutable_stvpresulttrackingmode();
  public:
  void unsafe_arena_set_allocated_stvpresulttrackingmode(
      ::vp::tracking::MetaTrackingMode_t* stvpresulttrackingmode);
  ::vp::tracking::MetaTrackingMode_t* unsafe_arena_release_stvpresulttrackingmode();

  // @@protoc_insertion_point(class_scope:vpresult.VPService_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::prdb::meta::Meta_t* stvpresult_;
  ::vp::tracking::MetaTrackingMode_t* stvpresulttrackingmode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vpresult_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VPService_t

// .prdb.meta.Meta_t stVPResult = 1;
inline bool VPService_t::_internal_has_stvpresult() const {
  return this != internal_default_instance() && stvpresult_ != nullptr;
}
inline bool VPService_t::has_stvpresult() const {
  return _internal_has_stvpresult();
}
inline const ::prdb::meta::Meta_t& VPService_t::_internal_stvpresult() const {
  const ::prdb::meta::Meta_t* p = stvpresult_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::Meta_t&>(
      ::prdb::meta::_Meta_t_default_instance_);
}
inline const ::prdb::meta::Meta_t& VPService_t::stvpresult() const {
  // @@protoc_insertion_point(field_get:vpresult.VPService_t.stVPResult)
  return _internal_stvpresult();
}
inline void VPService_t::unsafe_arena_set_allocated_stvpresult(
    ::prdb::meta::Meta_t* stvpresult) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpresult_);
  }
  stvpresult_ = stvpresult;
  if (stvpresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpresult.VPService_t.stVPResult)
}
inline ::prdb::meta::Meta_t* VPService_t::release_stvpresult() {
  
  ::prdb::meta::Meta_t* temp = stvpresult_;
  stvpresult_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::Meta_t* VPService_t::unsafe_arena_release_stvpresult() {
  // @@protoc_insertion_point(field_release:vpresult.VPService_t.stVPResult)
  
  ::prdb::meta::Meta_t* temp = stvpresult_;
  stvpresult_ = nullptr;
  return temp;
}
inline ::prdb::meta::Meta_t* VPService_t::_internal_mutable_stvpresult() {
  
  if (stvpresult_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::Meta_t>(GetArena());
    stvpresult_ = p;
  }
  return stvpresult_;
}
inline ::prdb::meta::Meta_t* VPService_t::mutable_stvpresult() {
  // @@protoc_insertion_point(field_mutable:vpresult.VPService_t.stVPResult)
  return _internal_mutable_stvpresult();
}
inline void VPService_t::set_allocated_stvpresult(::prdb::meta::Meta_t* stvpresult) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpresult_);
  }
  if (stvpresult) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpresult)->GetArena();
    if (message_arena != submessage_arena) {
      stvpresult = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpresult, submessage_arena);
    }
    
  } else {
    
  }
  stvpresult_ = stvpresult;
  // @@protoc_insertion_point(field_set_allocated:vpresult.VPService_t.stVPResult)
}

// .vp.tracking.MetaTrackingMode_t stVPResultTrackingMode = 2;
inline bool VPService_t::_internal_has_stvpresulttrackingmode() const {
  return this != internal_default_instance() && stvpresulttrackingmode_ != nullptr;
}
inline bool VPService_t::has_stvpresulttrackingmode() const {
  return _internal_has_stvpresulttrackingmode();
}
inline const ::vp::tracking::MetaTrackingMode_t& VPService_t::_internal_stvpresulttrackingmode() const {
  const ::vp::tracking::MetaTrackingMode_t* p = stvpresulttrackingmode_;
  return p != nullptr ? *p : reinterpret_cast<const ::vp::tracking::MetaTrackingMode_t&>(
      ::vp::tracking::_MetaTrackingMode_t_default_instance_);
}
inline const ::vp::tracking::MetaTrackingMode_t& VPService_t::stvpresulttrackingmode() const {
  // @@protoc_insertion_point(field_get:vpresult.VPService_t.stVPResultTrackingMode)
  return _internal_stvpresulttrackingmode();
}
inline void VPService_t::unsafe_arena_set_allocated_stvpresulttrackingmode(
    ::vp::tracking::MetaTrackingMode_t* stvpresulttrackingmode) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpresulttrackingmode_);
  }
  stvpresulttrackingmode_ = stvpresulttrackingmode;
  if (stvpresulttrackingmode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:vpresult.VPService_t.stVPResultTrackingMode)
}
inline ::vp::tracking::MetaTrackingMode_t* VPService_t::release_stvpresulttrackingmode() {
  
  ::vp::tracking::MetaTrackingMode_t* temp = stvpresulttrackingmode_;
  stvpresulttrackingmode_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::vp::tracking::MetaTrackingMode_t* VPService_t::unsafe_arena_release_stvpresulttrackingmode() {
  // @@protoc_insertion_point(field_release:vpresult.VPService_t.stVPResultTrackingMode)
  
  ::vp::tracking::MetaTrackingMode_t* temp = stvpresulttrackingmode_;
  stvpresulttrackingmode_ = nullptr;
  return temp;
}
inline ::vp::tracking::MetaTrackingMode_t* VPService_t::_internal_mutable_stvpresulttrackingmode() {
  
  if (stvpresulttrackingmode_ == nullptr) {
    auto* p = CreateMaybeMessage<::vp::tracking::MetaTrackingMode_t>(GetArena());
    stvpresulttrackingmode_ = p;
  }
  return stvpresulttrackingmode_;
}
inline ::vp::tracking::MetaTrackingMode_t* VPService_t::mutable_stvpresulttrackingmode() {
  // @@protoc_insertion_point(field_mutable:vpresult.VPService_t.stVPResultTrackingMode)
  return _internal_mutable_stvpresulttrackingmode();
}
inline void VPService_t::set_allocated_stvpresulttrackingmode(::vp::tracking::MetaTrackingMode_t* stvpresulttrackingmode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpresulttrackingmode_);
  }
  if (stvpresulttrackingmode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stvpresulttrackingmode)->GetArena();
    if (message_arena != submessage_arena) {
      stvpresulttrackingmode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stvpresulttrackingmode, submessage_arena);
    }
    
  } else {
    
  }
  stvpresulttrackingmode_ = stvpresulttrackingmode;
  // @@protoc_insertion_point(field_set_allocated:vpresult.VPService_t.stVPResultTrackingMode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace vpresult

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vpresult_2eproto
