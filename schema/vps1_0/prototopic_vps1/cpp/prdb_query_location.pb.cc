// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_query_location.proto

#include "prdb_query_location.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace prdb {
namespace location {
constexpr SingleLocationQ::SingleLocationQ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stlocation_(nullptr)
  , stdirectionvector_(nullptr)
  , f32searchradius_(0)
  , f32heightlimit_(0)
  , n16searchmaxk_(0)
  , f32directionrange_(0){}
struct SingleLocationQDefaultTypeInternal {
  constexpr SingleLocationQDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SingleLocationQDefaultTypeInternal() {}
  union {
    SingleLocationQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SingleLocationQDefaultTypeInternal _SingleLocationQ_default_instance_;
constexpr LocationQ::LocationQ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stqueryset_(){}
struct LocationQDefaultTypeInternal {
  constexpr LocationQDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationQDefaultTypeInternal() {}
  union {
    LocationQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationQDefaultTypeInternal _LocationQ_default_instance_;
}  // namespace location
}  // namespace prdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prdb_5fquery_5flocation_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prdb_5fquery_5flocation_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prdb_5fquery_5flocation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prdb_5fquery_5flocation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, stlocation_),
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, f32searchradius_),
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, f32heightlimit_),
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, n16searchmaxk_),
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, stdirectionvector_),
  PROTOBUF_FIELD_OFFSET(::prdb::location::SingleLocationQ, f32directionrange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::location::LocationQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::location::LocationQ, stqueryset_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prdb::location::SingleLocationQ)},
  { 11, -1, sizeof(::prdb::location::LocationQ)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::location::_SingleLocationQ_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::location::_LocationQ_default_instance_),
};

const char descriptor_table_protodef_prdb_5fquery_5flocation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031prdb_query_location.proto\022\rprdb.locati"
  "on\032\017prdb_meta.proto\"\313\001\n\017SingleLocationQ\022"
  "&\n\nstLocation\030\001 \001(\0132\022.prdb.meta.XYZ64_t\022"
  "\027\n\017f32SearchRadius\030\002 \001(\002\022\026\n\016f32HeightLim"
  "it\030\003 \001(\002\022\025\n\rn16SearchMaxK\030\004 \001(\005\022-\n\021stDir"
  "ectionVector\030\005 \001(\0132\022.prdb.meta.XYZ32_t\022\031"
  "\n\021f32DirectionRange\030\006 \001(\002\"\?\n\tLocationQ\0222"
  "\n\nstQuerySet\030\001 \003(\0132\036.prdb.location.Singl"
  "eLocationQB\013\n\tdbms.prdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prdb_5fquery_5flocation_2eproto_deps[1] = {
  &::descriptor_table_prdb_5fmeta_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prdb_5fquery_5flocation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5fquery_5flocation_2eproto = {
  false, false, 351, descriptor_table_protodef_prdb_5fquery_5flocation_2eproto, "prdb_query_location.proto", 
  &descriptor_table_prdb_5fquery_5flocation_2eproto_once, descriptor_table_prdb_5fquery_5flocation_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_prdb_5fquery_5flocation_2eproto::offsets,
  file_level_metadata_prdb_5fquery_5flocation_2eproto, file_level_enum_descriptors_prdb_5fquery_5flocation_2eproto, file_level_service_descriptors_prdb_5fquery_5flocation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_prdb_5fquery_5flocation_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prdb_5fquery_5flocation_2eproto);
  return descriptor_table_prdb_5fquery_5flocation_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prdb_5fquery_5flocation_2eproto(&descriptor_table_prdb_5fquery_5flocation_2eproto);
namespace prdb {
namespace location {

// ===================================================================

class SingleLocationQ::_Internal {
 public:
  static const ::prdb::meta::XYZ64_t& stlocation(const SingleLocationQ* msg);
  static const ::prdb::meta::XYZ32_t& stdirectionvector(const SingleLocationQ* msg);
};

const ::prdb::meta::XYZ64_t&
SingleLocationQ::_Internal::stlocation(const SingleLocationQ* msg) {
  return *msg->stlocation_;
}
const ::prdb::meta::XYZ32_t&
SingleLocationQ::_Internal::stdirectionvector(const SingleLocationQ* msg) {
  return *msg->stdirectionvector_;
}
void SingleLocationQ::clear_stlocation() {
  if (GetArena() == nullptr && stlocation_ != nullptr) {
    delete stlocation_;
  }
  stlocation_ = nullptr;
}
void SingleLocationQ::clear_stdirectionvector() {
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
}
SingleLocationQ::SingleLocationQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.location.SingleLocationQ)
}
SingleLocationQ::SingleLocationQ(const SingleLocationQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stlocation()) {
    stlocation_ = new ::prdb::meta::XYZ64_t(*from.stlocation_);
  } else {
    stlocation_ = nullptr;
  }
  if (from._internal_has_stdirectionvector()) {
    stdirectionvector_ = new ::prdb::meta::XYZ32_t(*from.stdirectionvector_);
  } else {
    stdirectionvector_ = nullptr;
  }
  ::memcpy(&f32searchradius_, &from.f32searchradius_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32directionrange_) -
    reinterpret_cast<char*>(&f32searchradius_)) + sizeof(f32directionrange_));
  // @@protoc_insertion_point(copy_constructor:prdb.location.SingleLocationQ)
}

void SingleLocationQ::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stlocation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32directionrange_) -
    reinterpret_cast<char*>(&stlocation_)) + sizeof(f32directionrange_));
}

SingleLocationQ::~SingleLocationQ() {
  // @@protoc_insertion_point(destructor:prdb.location.SingleLocationQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SingleLocationQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stlocation_;
  if (this != internal_default_instance()) delete stdirectionvector_;
}

void SingleLocationQ::ArenaDtor(void* object) {
  SingleLocationQ* _this = reinterpret_cast< SingleLocationQ* >(object);
  (void)_this;
}
void SingleLocationQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SingleLocationQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SingleLocationQ::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.location.SingleLocationQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stlocation_ != nullptr) {
    delete stlocation_;
  }
  stlocation_ = nullptr;
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
  ::memset(&f32searchradius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32directionrange_) -
      reinterpret_cast<char*>(&f32searchradius_)) + sizeof(f32directionrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SingleLocationQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .prdb.meta.XYZ64_t stLocation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32SearchRadius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          f32searchradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float f32HeightLimit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          f32heightlimit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 n16SearchMaxK = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          n16searchmaxk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ32_t stDirectionVector = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdirectionvector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32DirectionRange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          f32directionrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SingleLocationQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.location.SingleLocationQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prdb.meta.XYZ64_t stLocation = 1;
  if (this->has_stlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stlocation(this), target, stream);
  }

  // float f32SearchRadius = 2;
  if (!(this->f32searchradius() <= 0 && this->f32searchradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_f32searchradius(), target);
  }

  // float f32HeightLimit = 3;
  if (!(this->f32heightlimit() <= 0 && this->f32heightlimit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_f32heightlimit(), target);
  }

  // int32 n16SearchMaxK = 4;
  if (this->n16searchmaxk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_n16searchmaxk(), target);
  }

  // .prdb.meta.XYZ32_t stDirectionVector = 5;
  if (this->has_stdirectionvector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stdirectionvector(this), target, stream);
  }

  // float f32DirectionRange = 6;
  if (!(this->f32directionrange() <= 0 && this->f32directionrange() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f32directionrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.location.SingleLocationQ)
  return target;
}

size_t SingleLocationQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.location.SingleLocationQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prdb.meta.XYZ64_t stLocation = 1;
  if (this->has_stlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stlocation_);
  }

  // .prdb.meta.XYZ32_t stDirectionVector = 5;
  if (this->has_stdirectionvector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdirectionvector_);
  }

  // float f32SearchRadius = 2;
  if (!(this->f32searchradius() <= 0 && this->f32searchradius() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32HeightLimit = 3;
  if (!(this->f32heightlimit() <= 0 && this->f32heightlimit() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 n16SearchMaxK = 4;
  if (this->n16searchmaxk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_n16searchmaxk());
  }

  // float f32DirectionRange = 6;
  if (!(this->f32directionrange() <= 0 && this->f32directionrange() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SingleLocationQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.location.SingleLocationQ)
  GOOGLE_DCHECK_NE(&from, this);
  const SingleLocationQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SingleLocationQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.location.SingleLocationQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.location.SingleLocationQ)
    MergeFrom(*source);
  }
}

void SingleLocationQ::MergeFrom(const SingleLocationQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.location.SingleLocationQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stlocation()) {
    _internal_mutable_stlocation()->::prdb::meta::XYZ64_t::MergeFrom(from._internal_stlocation());
  }
  if (from.has_stdirectionvector()) {
    _internal_mutable_stdirectionvector()->::prdb::meta::XYZ32_t::MergeFrom(from._internal_stdirectionvector());
  }
  if (!(from.f32searchradius() <= 0 && from.f32searchradius() >= 0)) {
    _internal_set_f32searchradius(from._internal_f32searchradius());
  }
  if (!(from.f32heightlimit() <= 0 && from.f32heightlimit() >= 0)) {
    _internal_set_f32heightlimit(from._internal_f32heightlimit());
  }
  if (from.n16searchmaxk() != 0) {
    _internal_set_n16searchmaxk(from._internal_n16searchmaxk());
  }
  if (!(from.f32directionrange() <= 0 && from.f32directionrange() >= 0)) {
    _internal_set_f32directionrange(from._internal_f32directionrange());
  }
}

void SingleLocationQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.location.SingleLocationQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleLocationQ::CopyFrom(const SingleLocationQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.location.SingleLocationQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleLocationQ::IsInitialized() const {
  return true;
}

void SingleLocationQ::InternalSwap(SingleLocationQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SingleLocationQ, f32directionrange_)
      + sizeof(SingleLocationQ::f32directionrange_)
      - PROTOBUF_FIELD_OFFSET(SingleLocationQ, stlocation_)>(
          reinterpret_cast<char*>(&stlocation_),
          reinterpret_cast<char*>(&other->stlocation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SingleLocationQ::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LocationQ::_Internal {
 public:
};

LocationQ::LocationQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stqueryset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.location.LocationQ)
}
LocationQ::LocationQ(const LocationQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stqueryset_(from.stqueryset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:prdb.location.LocationQ)
}

void LocationQ::SharedCtor() {
}

LocationQ::~LocationQ() {
  // @@protoc_insertion_point(destructor:prdb.location.LocationQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocationQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocationQ::ArenaDtor(void* object) {
  LocationQ* _this = reinterpret_cast< LocationQ* >(object);
  (void)_this;
}
void LocationQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocationQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LocationQ::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.location.LocationQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stqueryset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocationQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .prdb.location.SingleLocationQ stQuerySet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stqueryset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocationQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.location.LocationQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .prdb.location.SingleLocationQ stQuerySet = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stqueryset_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stqueryset(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.location.LocationQ)
  return target;
}

size_t LocationQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.location.LocationQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .prdb.location.SingleLocationQ stQuerySet = 1;
  total_size += 1UL * this->_internal_stqueryset_size();
  for (const auto& msg : this->stqueryset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocationQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.location.LocationQ)
  GOOGLE_DCHECK_NE(&from, this);
  const LocationQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocationQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.location.LocationQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.location.LocationQ)
    MergeFrom(*source);
  }
}

void LocationQ::MergeFrom(const LocationQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.location.LocationQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stqueryset_.MergeFrom(from.stqueryset_);
}

void LocationQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.location.LocationQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationQ::CopyFrom(const LocationQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.location.LocationQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationQ::IsInitialized() const {
  return true;
}

void LocationQ::InternalSwap(LocationQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stqueryset_.InternalSwap(&other->stqueryset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocationQ::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace location
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prdb::location::SingleLocationQ* Arena::CreateMaybeMessage< ::prdb::location::SingleLocationQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::location::SingleLocationQ >(arena);
}
template<> PROTOBUF_NOINLINE ::prdb::location::LocationQ* Arena::CreateMaybeMessage< ::prdb::location::LocationQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::location::LocationQ >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
