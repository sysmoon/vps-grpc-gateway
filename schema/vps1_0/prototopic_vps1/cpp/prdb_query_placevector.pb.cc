// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_query_placevector.proto

#include "prdb_query_placevector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace prdb {
namespace placevector {
constexpr PlaceVectorQ::PlaceVectorQ(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stnetvladvector_(nullptr)
  , stsearchlocation_(nullptr)
  , stdirectionvector_(nullptr)
  , u8nearestmaxk_(0u)
  , u8distancetype_(0u)
  , f32distancethreshold_(0)
  , f32searchradius_(0)
  , f32directionrange_(0){}
struct PlaceVectorQDefaultTypeInternal {
  constexpr PlaceVectorQDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlaceVectorQDefaultTypeInternal() {}
  union {
    PlaceVectorQ _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlaceVectorQDefaultTypeInternal _PlaceVectorQ_default_instance_;
}  // namespace placevector
}  // namespace prdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_prdb_5fquery_5fplacevector_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_prdb_5fquery_5fplacevector_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_prdb_5fquery_5fplacevector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_prdb_5fquery_5fplacevector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, stnetvladvector_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, u8nearestmaxk_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, u8distancetype_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, f32distancethreshold_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, stsearchlocation_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, f32searchradius_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, stdirectionvector_),
  PROTOBUF_FIELD_OFFSET(::prdb::placevector::PlaceVectorQ, f32directionrange_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::prdb::placevector::PlaceVectorQ)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::prdb::placevector::_PlaceVectorQ_default_instance_),
};

const char descriptor_table_protodef_prdb_5fquery_5fplacevector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034prdb_query_placevector.proto\022\020prdb.pla"
  "cevector\032\017prdb_meta.proto\032\022prdb_netvlad."
  "proto\"\236\002\n\014PlaceVectorQ\0220\n\017stNetVLADVecto"
  "r\030\001 \001(\0132\027.prdb.netvlad.NetVLAD_t\022\025\n\ru8Ne"
  "arestMaxK\030\002 \001(\r\022\026\n\016u8DistanceType\030\003 \001(\r\022"
  "\034\n\024f32DistanceThreshold\030\004 \001(\002\022,\n\020stSearc"
  "hLocation\030\005 \001(\0132\022.prdb.meta.XYZ64_t\022\027\n\017f"
  "32SearchRadius\030\006 \001(\002\022-\n\021stDirectionVecto"
  "r\030\007 \001(\0132\022.prdb.meta.XYZ32_t\022\031\n\021f32Direct"
  "ionRange\030\010 \001(\002B\013\n\tdbms.prdbb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_prdb_5fquery_5fplacevector_2eproto_deps[2] = {
  &::descriptor_table_prdb_5fmeta_2eproto,
  &::descriptor_table_prdb_5fnetvlad_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_prdb_5fquery_5fplacevector_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5fquery_5fplacevector_2eproto = {
  false, false, 395, descriptor_table_protodef_prdb_5fquery_5fplacevector_2eproto, "prdb_query_placevector.proto", 
  &descriptor_table_prdb_5fquery_5fplacevector_2eproto_once, descriptor_table_prdb_5fquery_5fplacevector_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_prdb_5fquery_5fplacevector_2eproto::offsets,
  file_level_metadata_prdb_5fquery_5fplacevector_2eproto, file_level_enum_descriptors_prdb_5fquery_5fplacevector_2eproto, file_level_service_descriptors_prdb_5fquery_5fplacevector_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_prdb_5fquery_5fplacevector_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_prdb_5fquery_5fplacevector_2eproto);
  return descriptor_table_prdb_5fquery_5fplacevector_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_prdb_5fquery_5fplacevector_2eproto(&descriptor_table_prdb_5fquery_5fplacevector_2eproto);
namespace prdb {
namespace placevector {

// ===================================================================

class PlaceVectorQ::_Internal {
 public:
  static const ::prdb::netvlad::NetVLAD_t& stnetvladvector(const PlaceVectorQ* msg);
  static const ::prdb::meta::XYZ64_t& stsearchlocation(const PlaceVectorQ* msg);
  static const ::prdb::meta::XYZ32_t& stdirectionvector(const PlaceVectorQ* msg);
};

const ::prdb::netvlad::NetVLAD_t&
PlaceVectorQ::_Internal::stnetvladvector(const PlaceVectorQ* msg) {
  return *msg->stnetvladvector_;
}
const ::prdb::meta::XYZ64_t&
PlaceVectorQ::_Internal::stsearchlocation(const PlaceVectorQ* msg) {
  return *msg->stsearchlocation_;
}
const ::prdb::meta::XYZ32_t&
PlaceVectorQ::_Internal::stdirectionvector(const PlaceVectorQ* msg) {
  return *msg->stdirectionvector_;
}
void PlaceVectorQ::clear_stnetvladvector() {
  if (GetArena() == nullptr && stnetvladvector_ != nullptr) {
    delete stnetvladvector_;
  }
  stnetvladvector_ = nullptr;
}
void PlaceVectorQ::clear_stsearchlocation() {
  if (GetArena() == nullptr && stsearchlocation_ != nullptr) {
    delete stsearchlocation_;
  }
  stsearchlocation_ = nullptr;
}
void PlaceVectorQ::clear_stdirectionvector() {
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
}
PlaceVectorQ::PlaceVectorQ(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:prdb.placevector.PlaceVectorQ)
}
PlaceVectorQ::PlaceVectorQ(const PlaceVectorQ& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stnetvladvector()) {
    stnetvladvector_ = new ::prdb::netvlad::NetVLAD_t(*from.stnetvladvector_);
  } else {
    stnetvladvector_ = nullptr;
  }
  if (from._internal_has_stsearchlocation()) {
    stsearchlocation_ = new ::prdb::meta::XYZ64_t(*from.stsearchlocation_);
  } else {
    stsearchlocation_ = nullptr;
  }
  if (from._internal_has_stdirectionvector()) {
    stdirectionvector_ = new ::prdb::meta::XYZ32_t(*from.stdirectionvector_);
  } else {
    stdirectionvector_ = nullptr;
  }
  ::memcpy(&u8nearestmaxk_, &from.u8nearestmaxk_,
    static_cast<size_t>(reinterpret_cast<char*>(&f32directionrange_) -
    reinterpret_cast<char*>(&u8nearestmaxk_)) + sizeof(f32directionrange_));
  // @@protoc_insertion_point(copy_constructor:prdb.placevector.PlaceVectorQ)
}

void PlaceVectorQ::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stnetvladvector_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&f32directionrange_) -
    reinterpret_cast<char*>(&stnetvladvector_)) + sizeof(f32directionrange_));
}

PlaceVectorQ::~PlaceVectorQ() {
  // @@protoc_insertion_point(destructor:prdb.placevector.PlaceVectorQ)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlaceVectorQ::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete stnetvladvector_;
  if (this != internal_default_instance()) delete stsearchlocation_;
  if (this != internal_default_instance()) delete stdirectionvector_;
}

void PlaceVectorQ::ArenaDtor(void* object) {
  PlaceVectorQ* _this = reinterpret_cast< PlaceVectorQ* >(object);
  (void)_this;
}
void PlaceVectorQ::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlaceVectorQ::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlaceVectorQ::Clear() {
// @@protoc_insertion_point(message_clear_start:prdb.placevector.PlaceVectorQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && stnetvladvector_ != nullptr) {
    delete stnetvladvector_;
  }
  stnetvladvector_ = nullptr;
  if (GetArena() == nullptr && stsearchlocation_ != nullptr) {
    delete stsearchlocation_;
  }
  stsearchlocation_ = nullptr;
  if (GetArena() == nullptr && stdirectionvector_ != nullptr) {
    delete stdirectionvector_;
  }
  stdirectionvector_ = nullptr;
  ::memset(&u8nearestmaxk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f32directionrange_) -
      reinterpret_cast<char*>(&u8nearestmaxk_)) + sizeof(f32directionrange_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlaceVectorQ::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .prdb.netvlad.NetVLAD_t stNetVLADVector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stnetvladvector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 u8NearestMaxK = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          u8nearestmaxk_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 u8DistanceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          u8distancetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32DistanceThreshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          f32distancethreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ64_t stSearchLocation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stsearchlocation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32SearchRadius = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          f32searchradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .prdb.meta.XYZ32_t stDirectionVector = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stdirectionvector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float f32DirectionRange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          f32directionrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceVectorQ::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:prdb.placevector.PlaceVectorQ)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .prdb.netvlad.NetVLAD_t stNetVLADVector = 1;
  if (this->has_stnetvladvector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::stnetvladvector(this), target, stream);
  }

  // uint32 u8NearestMaxK = 2;
  if (this->u8nearestmaxk() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_u8nearestmaxk(), target);
  }

  // uint32 u8DistanceType = 3;
  if (this->u8distancetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_u8distancetype(), target);
  }

  // float f32DistanceThreshold = 4;
  if (!(this->f32distancethreshold() <= 0 && this->f32distancethreshold() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f32distancethreshold(), target);
  }

  // .prdb.meta.XYZ64_t stSearchLocation = 5;
  if (this->has_stsearchlocation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stsearchlocation(this), target, stream);
  }

  // float f32SearchRadius = 6;
  if (!(this->f32searchradius() <= 0 && this->f32searchradius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_f32searchradius(), target);
  }

  // .prdb.meta.XYZ32_t stDirectionVector = 7;
  if (this->has_stdirectionvector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::stdirectionvector(this), target, stream);
  }

  // float f32DirectionRange = 8;
  if (!(this->f32directionrange() <= 0 && this->f32directionrange() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_f32directionrange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:prdb.placevector.PlaceVectorQ)
  return target;
}

size_t PlaceVectorQ::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:prdb.placevector.PlaceVectorQ)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .prdb.netvlad.NetVLAD_t stNetVLADVector = 1;
  if (this->has_stnetvladvector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stnetvladvector_);
  }

  // .prdb.meta.XYZ64_t stSearchLocation = 5;
  if (this->has_stsearchlocation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stsearchlocation_);
  }

  // .prdb.meta.XYZ32_t stDirectionVector = 7;
  if (this->has_stdirectionvector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stdirectionvector_);
  }

  // uint32 u8NearestMaxK = 2;
  if (this->u8nearestmaxk() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u8nearestmaxk());
  }

  // uint32 u8DistanceType = 3;
  if (this->u8distancetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_u8distancetype());
  }

  // float f32DistanceThreshold = 4;
  if (!(this->f32distancethreshold() <= 0 && this->f32distancethreshold() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32SearchRadius = 6;
  if (!(this->f32searchradius() <= 0 && this->f32searchradius() >= 0)) {
    total_size += 1 + 4;
  }

  // float f32DirectionRange = 8;
  if (!(this->f32directionrange() <= 0 && this->f32directionrange() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceVectorQ::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:prdb.placevector.PlaceVectorQ)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceVectorQ* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceVectorQ>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:prdb.placevector.PlaceVectorQ)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:prdb.placevector.PlaceVectorQ)
    MergeFrom(*source);
  }
}

void PlaceVectorQ::MergeFrom(const PlaceVectorQ& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:prdb.placevector.PlaceVectorQ)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_stnetvladvector()) {
    _internal_mutable_stnetvladvector()->::prdb::netvlad::NetVLAD_t::MergeFrom(from._internal_stnetvladvector());
  }
  if (from.has_stsearchlocation()) {
    _internal_mutable_stsearchlocation()->::prdb::meta::XYZ64_t::MergeFrom(from._internal_stsearchlocation());
  }
  if (from.has_stdirectionvector()) {
    _internal_mutable_stdirectionvector()->::prdb::meta::XYZ32_t::MergeFrom(from._internal_stdirectionvector());
  }
  if (from.u8nearestmaxk() != 0) {
    _internal_set_u8nearestmaxk(from._internal_u8nearestmaxk());
  }
  if (from.u8distancetype() != 0) {
    _internal_set_u8distancetype(from._internal_u8distancetype());
  }
  if (!(from.f32distancethreshold() <= 0 && from.f32distancethreshold() >= 0)) {
    _internal_set_f32distancethreshold(from._internal_f32distancethreshold());
  }
  if (!(from.f32searchradius() <= 0 && from.f32searchradius() >= 0)) {
    _internal_set_f32searchradius(from._internal_f32searchradius());
  }
  if (!(from.f32directionrange() <= 0 && from.f32directionrange() >= 0)) {
    _internal_set_f32directionrange(from._internal_f32directionrange());
  }
}

void PlaceVectorQ::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:prdb.placevector.PlaceVectorQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceVectorQ::CopyFrom(const PlaceVectorQ& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:prdb.placevector.PlaceVectorQ)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceVectorQ::IsInitialized() const {
  return true;
}

void PlaceVectorQ::InternalSwap(PlaceVectorQ* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlaceVectorQ, f32directionrange_)
      + sizeof(PlaceVectorQ::f32directionrange_)
      - PROTOBUF_FIELD_OFFSET(PlaceVectorQ, stnetvladvector_)>(
          reinterpret_cast<char*>(&stnetvladvector_),
          reinterpret_cast<char*>(&other->stnetvladvector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceVectorQ::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace placevector
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::prdb::placevector::PlaceVectorQ* Arena::CreateMaybeMessage< ::prdb::placevector::PlaceVectorQ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::prdb::placevector::PlaceVectorQ >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
