// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_query_location.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prdb_5fquery_5flocation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prdb_5fquery_5flocation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "prdb_meta.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prdb_5fquery_5flocation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prdb_5fquery_5flocation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5fquery_5flocation_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_prdb_5fquery_5flocation_2eproto_metadata_getter(int index);
namespace prdb {
namespace location {
class LocationQ;
struct LocationQDefaultTypeInternal;
extern LocationQDefaultTypeInternal _LocationQ_default_instance_;
class SingleLocationQ;
struct SingleLocationQDefaultTypeInternal;
extern SingleLocationQDefaultTypeInternal _SingleLocationQ_default_instance_;
}  // namespace location
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> ::prdb::location::LocationQ* Arena::CreateMaybeMessage<::prdb::location::LocationQ>(Arena*);
template<> ::prdb::location::SingleLocationQ* Arena::CreateMaybeMessage<::prdb::location::SingleLocationQ>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prdb {
namespace location {

// ===================================================================

class SingleLocationQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prdb.location.SingleLocationQ) */ {
 public:
  inline SingleLocationQ() : SingleLocationQ(nullptr) {}
  virtual ~SingleLocationQ();
  explicit constexpr SingleLocationQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SingleLocationQ(const SingleLocationQ& from);
  SingleLocationQ(SingleLocationQ&& from) noexcept
    : SingleLocationQ() {
    *this = ::std::move(from);
  }

  inline SingleLocationQ& operator=(const SingleLocationQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline SingleLocationQ& operator=(SingleLocationQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SingleLocationQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const SingleLocationQ* internal_default_instance() {
    return reinterpret_cast<const SingleLocationQ*>(
               &_SingleLocationQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SingleLocationQ& a, SingleLocationQ& b) {
    a.Swap(&b);
  }
  inline void Swap(SingleLocationQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SingleLocationQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SingleLocationQ* New() const final {
    return CreateMaybeMessage<SingleLocationQ>(nullptr);
  }

  SingleLocationQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SingleLocationQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SingleLocationQ& from);
  void MergeFrom(const SingleLocationQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SingleLocationQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prdb.location.SingleLocationQ";
  }
  protected:
  explicit SingleLocationQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prdb_5fquery_5flocation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStLocationFieldNumber = 1,
    kStDirectionVectorFieldNumber = 5,
    kF32SearchRadiusFieldNumber = 2,
    kF32HeightLimitFieldNumber = 3,
    kN16SearchMaxKFieldNumber = 4,
    kF32DirectionRangeFieldNumber = 6,
  };
  // .prdb.meta.XYZ64_t stLocation = 1;
  bool has_stlocation() const;
  private:
  bool _internal_has_stlocation() const;
  public:
  void clear_stlocation();
  const ::prdb::meta::XYZ64_t& stlocation() const;
  ::prdb::meta::XYZ64_t* release_stlocation();
  ::prdb::meta::XYZ64_t* mutable_stlocation();
  void set_allocated_stlocation(::prdb::meta::XYZ64_t* stlocation);
  private:
  const ::prdb::meta::XYZ64_t& _internal_stlocation() const;
  ::prdb::meta::XYZ64_t* _internal_mutable_stlocation();
  public:
  void unsafe_arena_set_allocated_stlocation(
      ::prdb::meta::XYZ64_t* stlocation);
  ::prdb::meta::XYZ64_t* unsafe_arena_release_stlocation();

  // .prdb.meta.XYZ32_t stDirectionVector = 5;
  bool has_stdirectionvector() const;
  private:
  bool _internal_has_stdirectionvector() const;
  public:
  void clear_stdirectionvector();
  const ::prdb::meta::XYZ32_t& stdirectionvector() const;
  ::prdb::meta::XYZ32_t* release_stdirectionvector();
  ::prdb::meta::XYZ32_t* mutable_stdirectionvector();
  void set_allocated_stdirectionvector(::prdb::meta::XYZ32_t* stdirectionvector);
  private:
  const ::prdb::meta::XYZ32_t& _internal_stdirectionvector() const;
  ::prdb::meta::XYZ32_t* _internal_mutable_stdirectionvector();
  public:
  void unsafe_arena_set_allocated_stdirectionvector(
      ::prdb::meta::XYZ32_t* stdirectionvector);
  ::prdb::meta::XYZ32_t* unsafe_arena_release_stdirectionvector();

  // float f32SearchRadius = 2;
  void clear_f32searchradius();
  float f32searchradius() const;
  void set_f32searchradius(float value);
  private:
  float _internal_f32searchradius() const;
  void _internal_set_f32searchradius(float value);
  public:

  // float f32HeightLimit = 3;
  void clear_f32heightlimit();
  float f32heightlimit() const;
  void set_f32heightlimit(float value);
  private:
  float _internal_f32heightlimit() const;
  void _internal_set_f32heightlimit(float value);
  public:

  // int32 n16SearchMaxK = 4;
  void clear_n16searchmaxk();
  ::PROTOBUF_NAMESPACE_ID::int32 n16searchmaxk() const;
  void set_n16searchmaxk(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n16searchmaxk() const;
  void _internal_set_n16searchmaxk(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float f32DirectionRange = 6;
  void clear_f32directionrange();
  float f32directionrange() const;
  void set_f32directionrange(float value);
  private:
  float _internal_f32directionrange() const;
  void _internal_set_f32directionrange(float value);
  public:

  // @@protoc_insertion_point(class_scope:prdb.location.SingleLocationQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::prdb::meta::XYZ64_t* stlocation_;
  ::prdb::meta::XYZ32_t* stdirectionvector_;
  float f32searchradius_;
  float f32heightlimit_;
  ::PROTOBUF_NAMESPACE_ID::int32 n16searchmaxk_;
  float f32directionrange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prdb_5fquery_5flocation_2eproto;
};
// -------------------------------------------------------------------

class LocationQ PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prdb.location.LocationQ) */ {
 public:
  inline LocationQ() : LocationQ(nullptr) {}
  virtual ~LocationQ();
  explicit constexpr LocationQ(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocationQ(const LocationQ& from);
  LocationQ(LocationQ&& from) noexcept
    : LocationQ() {
    *this = ::std::move(from);
  }

  inline LocationQ& operator=(const LocationQ& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationQ& operator=(LocationQ&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocationQ& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocationQ* internal_default_instance() {
    return reinterpret_cast<const LocationQ*>(
               &_LocationQ_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocationQ& a, LocationQ& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationQ* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationQ* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocationQ* New() const final {
    return CreateMaybeMessage<LocationQ>(nullptr);
  }

  LocationQ* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocationQ>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocationQ& from);
  void MergeFrom(const LocationQ& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationQ* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prdb.location.LocationQ";
  }
  protected:
  explicit LocationQ(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prdb_5fquery_5flocation_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStQuerySetFieldNumber = 1,
  };
  // repeated .prdb.location.SingleLocationQ stQuerySet = 1;
  int stqueryset_size() const;
  private:
  int _internal_stqueryset_size() const;
  public:
  void clear_stqueryset();
  ::prdb::location::SingleLocationQ* mutable_stqueryset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::location::SingleLocationQ >*
      mutable_stqueryset();
  private:
  const ::prdb::location::SingleLocationQ& _internal_stqueryset(int index) const;
  ::prdb::location::SingleLocationQ* _internal_add_stqueryset();
  public:
  const ::prdb::location::SingleLocationQ& stqueryset(int index) const;
  ::prdb::location::SingleLocationQ* add_stqueryset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::location::SingleLocationQ >&
      stqueryset() const;

  // @@protoc_insertion_point(class_scope:prdb.location.LocationQ)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::location::SingleLocationQ > stqueryset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prdb_5fquery_5flocation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SingleLocationQ

// .prdb.meta.XYZ64_t stLocation = 1;
inline bool SingleLocationQ::_internal_has_stlocation() const {
  return this != internal_default_instance() && stlocation_ != nullptr;
}
inline bool SingleLocationQ::has_stlocation() const {
  return _internal_has_stlocation();
}
inline const ::prdb::meta::XYZ64_t& SingleLocationQ::_internal_stlocation() const {
  const ::prdb::meta::XYZ64_t* p = stlocation_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ64_t&>(
      ::prdb::meta::_XYZ64_t_default_instance_);
}
inline const ::prdb::meta::XYZ64_t& SingleLocationQ::stlocation() const {
  // @@protoc_insertion_point(field_get:prdb.location.SingleLocationQ.stLocation)
  return _internal_stlocation();
}
inline void SingleLocationQ::unsafe_arena_set_allocated_stlocation(
    ::prdb::meta::XYZ64_t* stlocation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation_);
  }
  stlocation_ = stlocation;
  if (stlocation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prdb.location.SingleLocationQ.stLocation)
}
inline ::prdb::meta::XYZ64_t* SingleLocationQ::release_stlocation() {
  
  ::prdb::meta::XYZ64_t* temp = stlocation_;
  stlocation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ64_t* SingleLocationQ::unsafe_arena_release_stlocation() {
  // @@protoc_insertion_point(field_release:prdb.location.SingleLocationQ.stLocation)
  
  ::prdb::meta::XYZ64_t* temp = stlocation_;
  stlocation_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ64_t* SingleLocationQ::_internal_mutable_stlocation() {
  
  if (stlocation_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ64_t>(GetArena());
    stlocation_ = p;
  }
  return stlocation_;
}
inline ::prdb::meta::XYZ64_t* SingleLocationQ::mutable_stlocation() {
  // @@protoc_insertion_point(field_mutable:prdb.location.SingleLocationQ.stLocation)
  return _internal_mutable_stlocation();
}
inline void SingleLocationQ::set_allocated_stlocation(::prdb::meta::XYZ64_t* stlocation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation_);
  }
  if (stlocation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stlocation)->GetArena();
    if (message_arena != submessage_arena) {
      stlocation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stlocation, submessage_arena);
    }
    
  } else {
    
  }
  stlocation_ = stlocation;
  // @@protoc_insertion_point(field_set_allocated:prdb.location.SingleLocationQ.stLocation)
}

// float f32SearchRadius = 2;
inline void SingleLocationQ::clear_f32searchradius() {
  f32searchradius_ = 0;
}
inline float SingleLocationQ::_internal_f32searchradius() const {
  return f32searchradius_;
}
inline float SingleLocationQ::f32searchradius() const {
  // @@protoc_insertion_point(field_get:prdb.location.SingleLocationQ.f32SearchRadius)
  return _internal_f32searchradius();
}
inline void SingleLocationQ::_internal_set_f32searchradius(float value) {
  
  f32searchradius_ = value;
}
inline void SingleLocationQ::set_f32searchradius(float value) {
  _internal_set_f32searchradius(value);
  // @@protoc_insertion_point(field_set:prdb.location.SingleLocationQ.f32SearchRadius)
}

// float f32HeightLimit = 3;
inline void SingleLocationQ::clear_f32heightlimit() {
  f32heightlimit_ = 0;
}
inline float SingleLocationQ::_internal_f32heightlimit() const {
  return f32heightlimit_;
}
inline float SingleLocationQ::f32heightlimit() const {
  // @@protoc_insertion_point(field_get:prdb.location.SingleLocationQ.f32HeightLimit)
  return _internal_f32heightlimit();
}
inline void SingleLocationQ::_internal_set_f32heightlimit(float value) {
  
  f32heightlimit_ = value;
}
inline void SingleLocationQ::set_f32heightlimit(float value) {
  _internal_set_f32heightlimit(value);
  // @@protoc_insertion_point(field_set:prdb.location.SingleLocationQ.f32HeightLimit)
}

// int32 n16SearchMaxK = 4;
inline void SingleLocationQ::clear_n16searchmaxk() {
  n16searchmaxk_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleLocationQ::_internal_n16searchmaxk() const {
  return n16searchmaxk_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SingleLocationQ::n16searchmaxk() const {
  // @@protoc_insertion_point(field_get:prdb.location.SingleLocationQ.n16SearchMaxK)
  return _internal_n16searchmaxk();
}
inline void SingleLocationQ::_internal_set_n16searchmaxk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n16searchmaxk_ = value;
}
inline void SingleLocationQ::set_n16searchmaxk(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n16searchmaxk(value);
  // @@protoc_insertion_point(field_set:prdb.location.SingleLocationQ.n16SearchMaxK)
}

// .prdb.meta.XYZ32_t stDirectionVector = 5;
inline bool SingleLocationQ::_internal_has_stdirectionvector() const {
  return this != internal_default_instance() && stdirectionvector_ != nullptr;
}
inline bool SingleLocationQ::has_stdirectionvector() const {
  return _internal_has_stdirectionvector();
}
inline const ::prdb::meta::XYZ32_t& SingleLocationQ::_internal_stdirectionvector() const {
  const ::prdb::meta::XYZ32_t* p = stdirectionvector_;
  return p != nullptr ? *p : reinterpret_cast<const ::prdb::meta::XYZ32_t&>(
      ::prdb::meta::_XYZ32_t_default_instance_);
}
inline const ::prdb::meta::XYZ32_t& SingleLocationQ::stdirectionvector() const {
  // @@protoc_insertion_point(field_get:prdb.location.SingleLocationQ.stDirectionVector)
  return _internal_stdirectionvector();
}
inline void SingleLocationQ::unsafe_arena_set_allocated_stdirectionvector(
    ::prdb::meta::XYZ32_t* stdirectionvector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector_);
  }
  stdirectionvector_ = stdirectionvector;
  if (stdirectionvector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prdb.location.SingleLocationQ.stDirectionVector)
}
inline ::prdb::meta::XYZ32_t* SingleLocationQ::release_stdirectionvector() {
  
  ::prdb::meta::XYZ32_t* temp = stdirectionvector_;
  stdirectionvector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prdb::meta::XYZ32_t* SingleLocationQ::unsafe_arena_release_stdirectionvector() {
  // @@protoc_insertion_point(field_release:prdb.location.SingleLocationQ.stDirectionVector)
  
  ::prdb::meta::XYZ32_t* temp = stdirectionvector_;
  stdirectionvector_ = nullptr;
  return temp;
}
inline ::prdb::meta::XYZ32_t* SingleLocationQ::_internal_mutable_stdirectionvector() {
  
  if (stdirectionvector_ == nullptr) {
    auto* p = CreateMaybeMessage<::prdb::meta::XYZ32_t>(GetArena());
    stdirectionvector_ = p;
  }
  return stdirectionvector_;
}
inline ::prdb::meta::XYZ32_t* SingleLocationQ::mutable_stdirectionvector() {
  // @@protoc_insertion_point(field_mutable:prdb.location.SingleLocationQ.stDirectionVector)
  return _internal_mutable_stdirectionvector();
}
inline void SingleLocationQ::set_allocated_stdirectionvector(::prdb::meta::XYZ32_t* stdirectionvector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector_);
  }
  if (stdirectionvector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stdirectionvector)->GetArena();
    if (message_arena != submessage_arena) {
      stdirectionvector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stdirectionvector, submessage_arena);
    }
    
  } else {
    
  }
  stdirectionvector_ = stdirectionvector;
  // @@protoc_insertion_point(field_set_allocated:prdb.location.SingleLocationQ.stDirectionVector)
}

// float f32DirectionRange = 6;
inline void SingleLocationQ::clear_f32directionrange() {
  f32directionrange_ = 0;
}
inline float SingleLocationQ::_internal_f32directionrange() const {
  return f32directionrange_;
}
inline float SingleLocationQ::f32directionrange() const {
  // @@protoc_insertion_point(field_get:prdb.location.SingleLocationQ.f32DirectionRange)
  return _internal_f32directionrange();
}
inline void SingleLocationQ::_internal_set_f32directionrange(float value) {
  
  f32directionrange_ = value;
}
inline void SingleLocationQ::set_f32directionrange(float value) {
  _internal_set_f32directionrange(value);
  // @@protoc_insertion_point(field_set:prdb.location.SingleLocationQ.f32DirectionRange)
}

// -------------------------------------------------------------------

// LocationQ

// repeated .prdb.location.SingleLocationQ stQuerySet = 1;
inline int LocationQ::_internal_stqueryset_size() const {
  return stqueryset_.size();
}
inline int LocationQ::stqueryset_size() const {
  return _internal_stqueryset_size();
}
inline void LocationQ::clear_stqueryset() {
  stqueryset_.Clear();
}
inline ::prdb::location::SingleLocationQ* LocationQ::mutable_stqueryset(int index) {
  // @@protoc_insertion_point(field_mutable:prdb.location.LocationQ.stQuerySet)
  return stqueryset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::location::SingleLocationQ >*
LocationQ::mutable_stqueryset() {
  // @@protoc_insertion_point(field_mutable_list:prdb.location.LocationQ.stQuerySet)
  return &stqueryset_;
}
inline const ::prdb::location::SingleLocationQ& LocationQ::_internal_stqueryset(int index) const {
  return stqueryset_.Get(index);
}
inline const ::prdb::location::SingleLocationQ& LocationQ::stqueryset(int index) const {
  // @@protoc_insertion_point(field_get:prdb.location.LocationQ.stQuerySet)
  return _internal_stqueryset(index);
}
inline ::prdb::location::SingleLocationQ* LocationQ::_internal_add_stqueryset() {
  return stqueryset_.Add();
}
inline ::prdb::location::SingleLocationQ* LocationQ::add_stqueryset() {
  // @@protoc_insertion_point(field_add:prdb.location.LocationQ.stQuerySet)
  return _internal_add_stqueryset();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::location::SingleLocationQ >&
LocationQ::stqueryset() const {
  // @@protoc_insertion_point(field_list:prdb.location.LocationQ.stQuerySet)
  return stqueryset_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace location
}  // namespace prdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prdb_5fquery_5flocation_2eproto
