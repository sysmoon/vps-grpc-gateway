// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prdb_netvlad.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_prdb_5fnetvlad_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_prdb_5fnetvlad_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_prdb_5fnetvlad_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_prdb_5fnetvlad_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_prdb_5fnetvlad_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_prdb_5fnetvlad_2eproto_metadata_getter(int index);
namespace prdb {
namespace netvlad {
class NetVLAD_t;
struct NetVLAD_tDefaultTypeInternal;
extern NetVLAD_tDefaultTypeInternal _NetVLAD_t_default_instance_;
class NetvladDB_t;
struct NetvladDB_tDefaultTypeInternal;
extern NetvladDB_tDefaultTypeInternal _NetvladDB_t_default_instance_;
}  // namespace netvlad
}  // namespace prdb
PROTOBUF_NAMESPACE_OPEN
template<> ::prdb::netvlad::NetVLAD_t* Arena::CreateMaybeMessage<::prdb::netvlad::NetVLAD_t>(Arena*);
template<> ::prdb::netvlad::NetvladDB_t* Arena::CreateMaybeMessage<::prdb::netvlad::NetvladDB_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prdb {
namespace netvlad {

// ===================================================================

class NetVLAD_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prdb.netvlad.NetVLAD_t) */ {
 public:
  inline NetVLAD_t() : NetVLAD_t(nullptr) {}
  virtual ~NetVLAD_t();
  explicit constexpr NetVLAD_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetVLAD_t(const NetVLAD_t& from);
  NetVLAD_t(NetVLAD_t&& from) noexcept
    : NetVLAD_t() {
    *this = ::std::move(from);
  }

  inline NetVLAD_t& operator=(const NetVLAD_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetVLAD_t& operator=(NetVLAD_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetVLAD_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetVLAD_t* internal_default_instance() {
    return reinterpret_cast<const NetVLAD_t*>(
               &_NetVLAD_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetVLAD_t& a, NetVLAD_t& b) {
    a.Swap(&b);
  }
  inline void Swap(NetVLAD_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetVLAD_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetVLAD_t* New() const final {
    return CreateMaybeMessage<NetVLAD_t>(nullptr);
  }

  NetVLAD_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetVLAD_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetVLAD_t& from);
  void MergeFrom(const NetVLAD_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetVLAD_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prdb.netvlad.NetVLAD_t";
  }
  protected:
  explicit NetVLAD_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prdb_5fnetvlad_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArf32DescriptorFieldNumber = 1,
  };
  // repeated float arf32Descriptor = 1;
  int arf32descriptor_size() const;
  private:
  int _internal_arf32descriptor_size() const;
  public:
  void clear_arf32descriptor();
  private:
  float _internal_arf32descriptor(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_arf32descriptor() const;
  void _internal_add_arf32descriptor(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_arf32descriptor();
  public:
  float arf32descriptor(int index) const;
  void set_arf32descriptor(int index, float value);
  void add_arf32descriptor(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      arf32descriptor() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_arf32descriptor();

  // @@protoc_insertion_point(class_scope:prdb.netvlad.NetVLAD_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > arf32descriptor_;
  mutable std::atomic<int> _arf32descriptor_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prdb_5fnetvlad_2eproto;
};
// -------------------------------------------------------------------

class NetvladDB_t PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prdb.netvlad.NetvladDB_t) */ {
 public:
  inline NetvladDB_t() : NetvladDB_t(nullptr) {}
  virtual ~NetvladDB_t();
  explicit constexpr NetvladDB_t(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetvladDB_t(const NetvladDB_t& from);
  NetvladDB_t(NetvladDB_t&& from) noexcept
    : NetvladDB_t() {
    *this = ::std::move(from);
  }

  inline NetvladDB_t& operator=(const NetvladDB_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetvladDB_t& operator=(NetvladDB_t&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetvladDB_t& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetvladDB_t* internal_default_instance() {
    return reinterpret_cast<const NetvladDB_t*>(
               &_NetvladDB_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetvladDB_t& a, NetvladDB_t& b) {
    a.Swap(&b);
  }
  inline void Swap(NetvladDB_t* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetvladDB_t* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetvladDB_t* New() const final {
    return CreateMaybeMessage<NetvladDB_t>(nullptr);
  }

  NetvladDB_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetvladDB_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetvladDB_t& from);
  void MergeFrom(const NetvladDB_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetvladDB_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prdb.netvlad.NetvladDB_t";
  }
  protected:
  explicit NetvladDB_t(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_prdb_5fnetvlad_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStDescriptorVectorFieldNumber = 1,
  };
  // repeated .prdb.netvlad.NetVLAD_t stDescriptorVector = 1;
  int stdescriptorvector_size() const;
  private:
  int _internal_stdescriptorvector_size() const;
  public:
  void clear_stdescriptorvector();
  ::prdb::netvlad::NetVLAD_t* mutable_stdescriptorvector(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::netvlad::NetVLAD_t >*
      mutable_stdescriptorvector();
  private:
  const ::prdb::netvlad::NetVLAD_t& _internal_stdescriptorvector(int index) const;
  ::prdb::netvlad::NetVLAD_t* _internal_add_stdescriptorvector();
  public:
  const ::prdb::netvlad::NetVLAD_t& stdescriptorvector(int index) const;
  ::prdb::netvlad::NetVLAD_t* add_stdescriptorvector();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::netvlad::NetVLAD_t >&
      stdescriptorvector() const;

  // @@protoc_insertion_point(class_scope:prdb.netvlad.NetvladDB_t)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::netvlad::NetVLAD_t > stdescriptorvector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_prdb_5fnetvlad_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetVLAD_t

// repeated float arf32Descriptor = 1;
inline int NetVLAD_t::_internal_arf32descriptor_size() const {
  return arf32descriptor_.size();
}
inline int NetVLAD_t::arf32descriptor_size() const {
  return _internal_arf32descriptor_size();
}
inline void NetVLAD_t::clear_arf32descriptor() {
  arf32descriptor_.Clear();
}
inline float NetVLAD_t::_internal_arf32descriptor(int index) const {
  return arf32descriptor_.Get(index);
}
inline float NetVLAD_t::arf32descriptor(int index) const {
  // @@protoc_insertion_point(field_get:prdb.netvlad.NetVLAD_t.arf32Descriptor)
  return _internal_arf32descriptor(index);
}
inline void NetVLAD_t::set_arf32descriptor(int index, float value) {
  arf32descriptor_.Set(index, value);
  // @@protoc_insertion_point(field_set:prdb.netvlad.NetVLAD_t.arf32Descriptor)
}
inline void NetVLAD_t::_internal_add_arf32descriptor(float value) {
  arf32descriptor_.Add(value);
}
inline void NetVLAD_t::add_arf32descriptor(float value) {
  _internal_add_arf32descriptor(value);
  // @@protoc_insertion_point(field_add:prdb.netvlad.NetVLAD_t.arf32Descriptor)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NetVLAD_t::_internal_arf32descriptor() const {
  return arf32descriptor_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
NetVLAD_t::arf32descriptor() const {
  // @@protoc_insertion_point(field_list:prdb.netvlad.NetVLAD_t.arf32Descriptor)
  return _internal_arf32descriptor();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NetVLAD_t::_internal_mutable_arf32descriptor() {
  return &arf32descriptor_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
NetVLAD_t::mutable_arf32descriptor() {
  // @@protoc_insertion_point(field_mutable_list:prdb.netvlad.NetVLAD_t.arf32Descriptor)
  return _internal_mutable_arf32descriptor();
}

// -------------------------------------------------------------------

// NetvladDB_t

// repeated .prdb.netvlad.NetVLAD_t stDescriptorVector = 1;
inline int NetvladDB_t::_internal_stdescriptorvector_size() const {
  return stdescriptorvector_.size();
}
inline int NetvladDB_t::stdescriptorvector_size() const {
  return _internal_stdescriptorvector_size();
}
inline void NetvladDB_t::clear_stdescriptorvector() {
  stdescriptorvector_.Clear();
}
inline ::prdb::netvlad::NetVLAD_t* NetvladDB_t::mutable_stdescriptorvector(int index) {
  // @@protoc_insertion_point(field_mutable:prdb.netvlad.NetvladDB_t.stDescriptorVector)
  return stdescriptorvector_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::netvlad::NetVLAD_t >*
NetvladDB_t::mutable_stdescriptorvector() {
  // @@protoc_insertion_point(field_mutable_list:prdb.netvlad.NetvladDB_t.stDescriptorVector)
  return &stdescriptorvector_;
}
inline const ::prdb::netvlad::NetVLAD_t& NetvladDB_t::_internal_stdescriptorvector(int index) const {
  return stdescriptorvector_.Get(index);
}
inline const ::prdb::netvlad::NetVLAD_t& NetvladDB_t::stdescriptorvector(int index) const {
  // @@protoc_insertion_point(field_get:prdb.netvlad.NetvladDB_t.stDescriptorVector)
  return _internal_stdescriptorvector(index);
}
inline ::prdb::netvlad::NetVLAD_t* NetvladDB_t::_internal_add_stdescriptorvector() {
  return stdescriptorvector_.Add();
}
inline ::prdb::netvlad::NetVLAD_t* NetvladDB_t::add_stdescriptorvector() {
  // @@protoc_insertion_point(field_add:prdb.netvlad.NetvladDB_t.stDescriptorVector)
  return _internal_add_stdescriptorvector();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prdb::netvlad::NetVLAD_t >&
NetvladDB_t::stdescriptorvector() const {
  // @@protoc_insertion_point(field_list:prdb.netvlad.NetvladDB_t.stDescriptorVector)
  return stdescriptorvector_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace netvlad
}  // namespace prdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_prdb_5fnetvlad_2eproto
