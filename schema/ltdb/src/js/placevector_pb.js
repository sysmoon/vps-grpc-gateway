// source: placevector.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var vgeodb_common_pb = require('./vgeodb_common_pb.js');
goog.object.extend(proto, vgeodb_common_pb);
goog.exportSymbol('proto.VgeoDB.GlobFeatDesc_t', null, global);
goog.exportSymbol('proto.VgeoDB.GlobFeatDesc_t.eDescType', null, global);
goog.exportSymbol('proto.VgeoDB.NetVLADDesc_t', null, global);
goog.exportSymbol('proto.VgeoDB.NetVLADDesc_t.eDescType', null, global);
goog.exportSymbol('proto.VgeoDB.PlaceVector', null, global);
goog.exportSymbol('proto.VgeoDB.PlaceVectorDesc', null, global);
goog.exportSymbol('proto.VgeoDB.PlaceVectorDesc.UdescriptorCase', null, global);
goog.exportSymbol('proto.VgeoDB.PlaceVectorMeta_t', null, global);
goog.exportSymbol('proto.VgeoDB.PlaceVectorSet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.PlaceVectorMeta_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.PlaceVectorMeta_t.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.PlaceVectorMeta_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.PlaceVectorMeta_t.displayName = 'proto.VgeoDB.PlaceVectorMeta_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.NetVLADDesc_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.NetVLADDesc_t.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.NetVLADDesc_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.NetVLADDesc_t.displayName = 'proto.VgeoDB.NetVLADDesc_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.GlobFeatDesc_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.GlobFeatDesc_t.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.GlobFeatDesc_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.GlobFeatDesc_t.displayName = 'proto.VgeoDB.GlobFeatDesc_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.PlaceVectorDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VgeoDB.PlaceVectorDesc.oneofGroups_);
};
goog.inherits(proto.VgeoDB.PlaceVectorDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.PlaceVectorDesc.displayName = 'proto.VgeoDB.PlaceVectorDesc';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.PlaceVector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.PlaceVector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.PlaceVector.displayName = 'proto.VgeoDB.PlaceVector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.PlaceVectorSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.VgeoDB.PlaceVectorSet.repeatedFields_, null);
};
goog.inherits(proto.VgeoDB.PlaceVectorSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.PlaceVectorSet.displayName = 'proto.VgeoDB.PlaceVectorSet';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.PlaceVectorMeta_t.repeatedFields_ = [7,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.PlaceVectorMeta_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.PlaceVectorMeta_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVectorMeta_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    un64uniqueid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    un64keyframeindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    un64groupid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    un64timestamp: jspb.Message.getFieldWithDefault(msg, 4, 0),
    stavglocation: (f = msg.getStavglocation()) && vgeodb_common_pb.XYZ64_t.toObject(includeInstance, f),
    storientaton: (f = msg.getStorientaton()) && vgeodb_common_pb.Orientation32_t.toObject(includeInstance, f),
    arstlocationsetList: jspb.Message.toObjectList(msg.getArstlocationsetList(),
    vgeodb_common_pb.XYZ64_t.toObject, includeInstance),
    stdirectionvector: (f = msg.getStdirectionvector()) && vgeodb_common_pb.XYZ32_t.toObject(includeInstance, f),
    arun64uniqueidofkeypointList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    arun64belong3dpointindexList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    fsimilarity: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t}
 */
proto.VgeoDB.PlaceVectorMeta_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.PlaceVectorMeta_t;
  return proto.VgeoDB.PlaceVectorMeta_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.PlaceVectorMeta_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t}
 */
proto.VgeoDB.PlaceVectorMeta_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64uniqueid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64keyframeindex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64groupid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUn64timestamp(value);
      break;
    case 5:
      var value = new vgeodb_common_pb.XYZ64_t;
      reader.readMessage(value,vgeodb_common_pb.XYZ64_t.deserializeBinaryFromReader);
      msg.setStavglocation(value);
      break;
    case 6:
      var value = new vgeodb_common_pb.Orientation32_t;
      reader.readMessage(value,vgeodb_common_pb.Orientation32_t.deserializeBinaryFromReader);
      msg.setStorientaton(value);
      break;
    case 7:
      var value = new vgeodb_common_pb.XYZ64_t;
      reader.readMessage(value,vgeodb_common_pb.XYZ64_t.deserializeBinaryFromReader);
      msg.addArstlocationset(value);
      break;
    case 8:
      var value = new vgeodb_common_pb.XYZ32_t;
      reader.readMessage(value,vgeodb_common_pb.XYZ32_t.deserializeBinaryFromReader);
      msg.setStdirectionvector(value);
      break;
    case 9:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArun64uniqueidofkeypoint(values[i]);
      }
      break;
    case 10:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint64() : [reader.readUint64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArun64belong3dpointindex(values[i]);
      }
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFsimilarity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.PlaceVectorMeta_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.PlaceVectorMeta_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVectorMeta_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUn64uniqueid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUn64keyframeindex();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUn64groupid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUn64timestamp();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getStavglocation();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      vgeodb_common_pb.XYZ64_t.serializeBinaryToWriter
    );
  }
  f = message.getStorientaton();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      vgeodb_common_pb.Orientation32_t.serializeBinaryToWriter
    );
  }
  f = message.getArstlocationsetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      vgeodb_common_pb.XYZ64_t.serializeBinaryToWriter
    );
  }
  f = message.getStdirectionvector();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      vgeodb_common_pb.XYZ32_t.serializeBinaryToWriter
    );
  }
  f = message.getArun64uniqueidofkeypointList();
  if (f.length > 0) {
    writer.writePackedUint64(
      9,
      f
    );
  }
  f = message.getArun64belong3dpointindexList();
  if (f.length > 0) {
    writer.writePackedUint64(
      10,
      f
    );
  }
  f = message.getFsimilarity();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
};


/**
 * optional uint64 un64UniqueID = 1;
 * @return {number}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getUn64uniqueid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setUn64uniqueid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 un64KeyframeIndex = 2;
 * @return {number}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getUn64keyframeindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setUn64keyframeindex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 un64GroupID = 3;
 * @return {number}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getUn64groupid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setUn64groupid = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 un64Timestamp = 4;
 * @return {number}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getUn64timestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setUn64timestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional common.XYZ64_t stAvgLocation = 5;
 * @return {?proto.VgeoDB.common.XYZ64_t}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getStavglocation = function() {
  return /** @type{?proto.VgeoDB.common.XYZ64_t} */ (
    jspb.Message.getWrapperField(this, vgeodb_common_pb.XYZ64_t, 5));
};


/**
 * @param {?proto.VgeoDB.common.XYZ64_t|undefined} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
*/
proto.VgeoDB.PlaceVectorMeta_t.prototype.setStavglocation = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.clearStavglocation = function() {
  return this.setStavglocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.hasStavglocation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional common.Orientation32_t stOrientaton = 6;
 * @return {?proto.VgeoDB.common.Orientation32_t}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getStorientaton = function() {
  return /** @type{?proto.VgeoDB.common.Orientation32_t} */ (
    jspb.Message.getWrapperField(this, vgeodb_common_pb.Orientation32_t, 6));
};


/**
 * @param {?proto.VgeoDB.common.Orientation32_t|undefined} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
*/
proto.VgeoDB.PlaceVectorMeta_t.prototype.setStorientaton = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.clearStorientaton = function() {
  return this.setStorientaton(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.hasStorientaton = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated common.XYZ64_t arstLocationSet = 7;
 * @return {!Array<!proto.VgeoDB.common.XYZ64_t>}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getArstlocationsetList = function() {
  return /** @type{!Array<!proto.VgeoDB.common.XYZ64_t>} */ (
    jspb.Message.getRepeatedWrapperField(this, vgeodb_common_pb.XYZ64_t, 7));
};


/**
 * @param {!Array<!proto.VgeoDB.common.XYZ64_t>} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
*/
proto.VgeoDB.PlaceVectorMeta_t.prototype.setArstlocationsetList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.VgeoDB.common.XYZ64_t=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.common.XYZ64_t}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.addArstlocationset = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.VgeoDB.common.XYZ64_t, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.clearArstlocationsetList = function() {
  return this.setArstlocationsetList([]);
};


/**
 * optional common.XYZ32_t stDirectionVector = 8;
 * @return {?proto.VgeoDB.common.XYZ32_t}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getStdirectionvector = function() {
  return /** @type{?proto.VgeoDB.common.XYZ32_t} */ (
    jspb.Message.getWrapperField(this, vgeodb_common_pb.XYZ32_t, 8));
};


/**
 * @param {?proto.VgeoDB.common.XYZ32_t|undefined} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
*/
proto.VgeoDB.PlaceVectorMeta_t.prototype.setStdirectionvector = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.clearStdirectionvector = function() {
  return this.setStdirectionvector(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.hasStdirectionvector = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated uint64 arun64UniqueIDofKeypoint = 9;
 * @return {!Array<number>}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getArun64uniqueidofkeypointList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setArun64uniqueidofkeypointList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.addArun64uniqueidofkeypoint = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.clearArun64uniqueidofkeypointList = function() {
  return this.setArun64uniqueidofkeypointList([]);
};


/**
 * repeated uint64 arun64Belong3DPointIndex = 10;
 * @return {!Array<number>}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getArun64belong3dpointindexList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setArun64belong3dpointindexList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.addArun64belong3dpointindex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.clearArun64belong3dpointindexList = function() {
  return this.setArun64belong3dpointindexList([]);
};


/**
 * optional float fSimilarity = 11;
 * @return {number}
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.getFsimilarity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.PlaceVectorMeta_t} returns this
 */
proto.VgeoDB.PlaceVectorMeta_t.prototype.setFsimilarity = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.NetVLADDesc_t.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.NetVLADDesc_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.NetVLADDesc_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.NetVLADDesc_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.NetVLADDesc_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    arfnetvladdescriptorList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    etype: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.NetVLADDesc_t}
 */
proto.VgeoDB.NetVLADDesc_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.NetVLADDesc_t;
  return proto.VgeoDB.NetVLADDesc_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.NetVLADDesc_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.NetVLADDesc_t}
 */
proto.VgeoDB.NetVLADDesc_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArfnetvladdescriptor(values[i]);
      }
      break;
    case 2:
      var value = /** @type {!proto.VgeoDB.NetVLADDesc_t.eDescType} */ (reader.readEnum());
      msg.setEtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.NetVLADDesc_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.NetVLADDesc_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.NetVLADDesc_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.NetVLADDesc_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArfnetvladdescriptorList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getEtype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VgeoDB.NetVLADDesc_t.eDescType = {
  VLAD_4096_V1: 0
};

/**
 * repeated float arfNetVLADDescriptor = 1;
 * @return {!Array<number>}
 */
proto.VgeoDB.NetVLADDesc_t.prototype.getArfnetvladdescriptorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.NetVLADDesc_t} returns this
 */
proto.VgeoDB.NetVLADDesc_t.prototype.setArfnetvladdescriptorList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.NetVLADDesc_t} returns this
 */
proto.VgeoDB.NetVLADDesc_t.prototype.addArfnetvladdescriptor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.NetVLADDesc_t} returns this
 */
proto.VgeoDB.NetVLADDesc_t.prototype.clearArfnetvladdescriptorList = function() {
  return this.setArfnetvladdescriptorList([]);
};


/**
 * optional eDescType eType = 2;
 * @return {!proto.VgeoDB.NetVLADDesc_t.eDescType}
 */
proto.VgeoDB.NetVLADDesc_t.prototype.getEtype = function() {
  return /** @type {!proto.VgeoDB.NetVLADDesc_t.eDescType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.VgeoDB.NetVLADDesc_t.eDescType} value
 * @return {!proto.VgeoDB.NetVLADDesc_t} returns this
 */
proto.VgeoDB.NetVLADDesc_t.prototype.setEtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.GlobFeatDesc_t.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.GlobFeatDesc_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.GlobFeatDesc_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.GlobFeatDesc_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    arunglobfeatdescriptorList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    etype: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.GlobFeatDesc_t}
 */
proto.VgeoDB.GlobFeatDesc_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.GlobFeatDesc_t;
  return proto.VgeoDB.GlobFeatDesc_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.GlobFeatDesc_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.GlobFeatDesc_t}
 */
proto.VgeoDB.GlobFeatDesc_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addArunglobfeatdescriptor(values[i]);
      }
      break;
    case 3:
      var value = /** @type {!proto.VgeoDB.GlobFeatDesc_t.eDescType} */ (reader.readEnum());
      msg.setEtype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.GlobFeatDesc_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.GlobFeatDesc_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.GlobFeatDesc_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArunglobfeatdescriptorList();
  if (f.length > 0) {
    writer.writePackedUint32(
      2,
      f
    );
  }
  f = message.getEtype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.VgeoDB.GlobFeatDesc_t.eDescType = {
  GLOB_8192_V1: 0
};

/**
 * repeated uint32 arunGlobFeatDescriptor = 2;
 * @return {!Array<number>}
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.getArunglobfeatdescriptorList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.VgeoDB.GlobFeatDesc_t} returns this
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.setArunglobfeatdescriptorList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.GlobFeatDesc_t} returns this
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.addArunglobfeatdescriptor = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.GlobFeatDesc_t} returns this
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.clearArunglobfeatdescriptorList = function() {
  return this.setArunglobfeatdescriptorList([]);
};


/**
 * optional eDescType eType = 3;
 * @return {!proto.VgeoDB.GlobFeatDesc_t.eDescType}
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.getEtype = function() {
  return /** @type {!proto.VgeoDB.GlobFeatDesc_t.eDescType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.VgeoDB.GlobFeatDesc_t.eDescType} value
 * @return {!proto.VgeoDB.GlobFeatDesc_t} returns this
 */
proto.VgeoDB.GlobFeatDesc_t.prototype.setEtype = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VgeoDB.PlaceVectorDesc.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.VgeoDB.PlaceVectorDesc.UdescriptorCase = {
  UDESCRIPTOR_NOT_SET: 0,
  STNETVLADDESCRIPTOR: 1,
  STGLOBFEATDESCRIPTOR: 2
};

/**
 * @return {proto.VgeoDB.PlaceVectorDesc.UdescriptorCase}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.getUdescriptorCase = function() {
  return /** @type {proto.VgeoDB.PlaceVectorDesc.UdescriptorCase} */(jspb.Message.computeOneofCase(this, proto.VgeoDB.PlaceVectorDesc.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.PlaceVectorDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.PlaceVectorDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVectorDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    stnetvladdescriptor: (f = msg.getStnetvladdescriptor()) && proto.VgeoDB.NetVLADDesc_t.toObject(includeInstance, f),
    stglobfeatdescriptor: (f = msg.getStglobfeatdescriptor()) && proto.VgeoDB.GlobFeatDesc_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.PlaceVectorDesc}
 */
proto.VgeoDB.PlaceVectorDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.PlaceVectorDesc;
  return proto.VgeoDB.PlaceVectorDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.PlaceVectorDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.PlaceVectorDesc}
 */
proto.VgeoDB.PlaceVectorDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.NetVLADDesc_t;
      reader.readMessage(value,proto.VgeoDB.NetVLADDesc_t.deserializeBinaryFromReader);
      msg.setStnetvladdescriptor(value);
      break;
    case 2:
      var value = new proto.VgeoDB.GlobFeatDesc_t;
      reader.readMessage(value,proto.VgeoDB.GlobFeatDesc_t.deserializeBinaryFromReader);
      msg.setStglobfeatdescriptor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.PlaceVectorDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.PlaceVectorDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVectorDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStnetvladdescriptor();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VgeoDB.NetVLADDesc_t.serializeBinaryToWriter
    );
  }
  f = message.getStglobfeatdescriptor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VgeoDB.GlobFeatDesc_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional NetVLADDesc_t stNetVLADDescriptor = 1;
 * @return {?proto.VgeoDB.NetVLADDesc_t}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.getStnetvladdescriptor = function() {
  return /** @type{?proto.VgeoDB.NetVLADDesc_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.NetVLADDesc_t, 1));
};


/**
 * @param {?proto.VgeoDB.NetVLADDesc_t|undefined} value
 * @return {!proto.VgeoDB.PlaceVectorDesc} returns this
*/
proto.VgeoDB.PlaceVectorDesc.prototype.setStnetvladdescriptor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.VgeoDB.PlaceVectorDesc.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVectorDesc} returns this
 */
proto.VgeoDB.PlaceVectorDesc.prototype.clearStnetvladdescriptor = function() {
  return this.setStnetvladdescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.hasStnetvladdescriptor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GlobFeatDesc_t stGlobFeatDescriptor = 2;
 * @return {?proto.VgeoDB.GlobFeatDesc_t}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.getStglobfeatdescriptor = function() {
  return /** @type{?proto.VgeoDB.GlobFeatDesc_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.GlobFeatDesc_t, 2));
};


/**
 * @param {?proto.VgeoDB.GlobFeatDesc_t|undefined} value
 * @return {!proto.VgeoDB.PlaceVectorDesc} returns this
*/
proto.VgeoDB.PlaceVectorDesc.prototype.setStglobfeatdescriptor = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.VgeoDB.PlaceVectorDesc.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVectorDesc} returns this
 */
proto.VgeoDB.PlaceVectorDesc.prototype.clearStglobfeatdescriptor = function() {
  return this.setStglobfeatdescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVectorDesc.prototype.hasStglobfeatdescriptor = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.PlaceVector.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.PlaceVector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.PlaceVector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVector.toObject = function(includeInstance, msg) {
  var f, obj = {
    stmeta: (f = msg.getStmeta()) && proto.VgeoDB.PlaceVectorMeta_t.toObject(includeInstance, f),
    udescriptor: (f = msg.getUdescriptor()) && proto.VgeoDB.PlaceVectorDesc.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.PlaceVector}
 */
proto.VgeoDB.PlaceVector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.PlaceVector;
  return proto.VgeoDB.PlaceVector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.PlaceVector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.PlaceVector}
 */
proto.VgeoDB.PlaceVector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.PlaceVectorMeta_t;
      reader.readMessage(value,proto.VgeoDB.PlaceVectorMeta_t.deserializeBinaryFromReader);
      msg.setStmeta(value);
      break;
    case 2:
      var value = new proto.VgeoDB.PlaceVectorDesc;
      reader.readMessage(value,proto.VgeoDB.PlaceVectorDesc.deserializeBinaryFromReader);
      msg.setUdescriptor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.PlaceVector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.PlaceVector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.PlaceVector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStmeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VgeoDB.PlaceVectorMeta_t.serializeBinaryToWriter
    );
  }
  f = message.getUdescriptor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VgeoDB.PlaceVectorDesc.serializeBinaryToWriter
    );
  }
};


/**
 * optional PlaceVectorMeta_t stMeta = 1;
 * @return {?proto.VgeoDB.PlaceVectorMeta_t}
 */
proto.VgeoDB.PlaceVector.prototype.getStmeta = function() {
  return /** @type{?proto.VgeoDB.PlaceVectorMeta_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.PlaceVectorMeta_t, 1));
};


/**
 * @param {?proto.VgeoDB.PlaceVectorMeta_t|undefined} value
 * @return {!proto.VgeoDB.PlaceVector} returns this
*/
proto.VgeoDB.PlaceVector.prototype.setStmeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVector} returns this
 */
proto.VgeoDB.PlaceVector.prototype.clearStmeta = function() {
  return this.setStmeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVector.prototype.hasStmeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PlaceVectorDesc uDescriptor = 2;
 * @return {?proto.VgeoDB.PlaceVectorDesc}
 */
proto.VgeoDB.PlaceVector.prototype.getUdescriptor = function() {
  return /** @type{?proto.VgeoDB.PlaceVectorDesc} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.PlaceVectorDesc, 2));
};


/**
 * @param {?proto.VgeoDB.PlaceVectorDesc|undefined} value
 * @return {!proto.VgeoDB.PlaceVector} returns this
*/
proto.VgeoDB.PlaceVector.prototype.setUdescriptor = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.PlaceVector} returns this
 */
proto.VgeoDB.PlaceVector.prototype.clearUdescriptor = function() {
  return this.setUdescriptor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.PlaceVector.prototype.hasUdescriptor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.VgeoDB.PlaceVectorSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.PlaceVectorSet.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.PlaceVectorSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.PlaceVectorSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVectorSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    arstplacevectorList: jspb.Message.toObjectList(msg.getArstplacevectorList(),
    proto.VgeoDB.PlaceVector.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.PlaceVectorSet}
 */
proto.VgeoDB.PlaceVectorSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.PlaceVectorSet;
  return proto.VgeoDB.PlaceVectorSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.PlaceVectorSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.PlaceVectorSet}
 */
proto.VgeoDB.PlaceVectorSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.PlaceVector;
      reader.readMessage(value,proto.VgeoDB.PlaceVector.deserializeBinaryFromReader);
      msg.addArstplacevector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.PlaceVectorSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.PlaceVectorSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.PlaceVectorSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.PlaceVectorSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getArstplacevectorList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.VgeoDB.PlaceVector.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PlaceVector arstPlaceVector = 1;
 * @return {!Array<!proto.VgeoDB.PlaceVector>}
 */
proto.VgeoDB.PlaceVectorSet.prototype.getArstplacevectorList = function() {
  return /** @type{!Array<!proto.VgeoDB.PlaceVector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.VgeoDB.PlaceVector, 1));
};


/**
 * @param {!Array<!proto.VgeoDB.PlaceVector>} value
 * @return {!proto.VgeoDB.PlaceVectorSet} returns this
*/
proto.VgeoDB.PlaceVectorSet.prototype.setArstplacevectorList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.VgeoDB.PlaceVector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.VgeoDB.PlaceVector}
 */
proto.VgeoDB.PlaceVectorSet.prototype.addArstplacevector = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.VgeoDB.PlaceVector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.VgeoDB.PlaceVectorSet} returns this
 */
proto.VgeoDB.PlaceVectorSet.prototype.clearArstplacevectorList = function() {
  return this.setArstplacevectorList([]);
};


goog.object.extend(exports, proto.VgeoDB);
