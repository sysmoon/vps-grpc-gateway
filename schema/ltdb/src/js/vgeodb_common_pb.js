// source: vgeodb_common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.VgeoDB.common.Extrinsic_t', null, global);
goog.exportSymbol('proto.VgeoDB.common.Orientation32_t', null, global);
goog.exportSymbol('proto.VgeoDB.common.Point2DFloat_t', null, global);
goog.exportSymbol('proto.VgeoDB.common.Point2DInt_t', null, global);
goog.exportSymbol('proto.VgeoDB.common.UVPoint_t', null, global);
goog.exportSymbol('proto.VgeoDB.common.UVPoint_t.UuvpointCase', null, global);
goog.exportSymbol('proto.VgeoDB.common.XYZ32_t', null, global);
goog.exportSymbol('proto.VgeoDB.common.XYZ64_t', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.XYZ64_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.common.XYZ64_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.XYZ64_t.displayName = 'proto.VgeoDB.common.XYZ64_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.XYZ32_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.common.XYZ32_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.XYZ32_t.displayName = 'proto.VgeoDB.common.XYZ32_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.Orientation32_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.common.Orientation32_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.Orientation32_t.displayName = 'proto.VgeoDB.common.Orientation32_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.Extrinsic_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.common.Extrinsic_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.Extrinsic_t.displayName = 'proto.VgeoDB.common.Extrinsic_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.Point2DInt_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.common.Point2DInt_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.Point2DInt_t.displayName = 'proto.VgeoDB.common.Point2DInt_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.Point2DFloat_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VgeoDB.common.Point2DFloat_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.Point2DFloat_t.displayName = 'proto.VgeoDB.common.Point2DFloat_t';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VgeoDB.common.UVPoint_t = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.VgeoDB.common.UVPoint_t.oneofGroups_);
};
goog.inherits(proto.VgeoDB.common.UVPoint_t, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VgeoDB.common.UVPoint_t.displayName = 'proto.VgeoDB.common.UVPoint_t';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.XYZ64_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.XYZ64_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.XYZ64_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.XYZ64_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    f64x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    f64y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    f64z: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.XYZ64_t}
 */
proto.VgeoDB.common.XYZ64_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.XYZ64_t;
  return proto.VgeoDB.common.XYZ64_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.XYZ64_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.XYZ64_t}
 */
proto.VgeoDB.common.XYZ64_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64x(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64y(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setF64z(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.XYZ64_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.XYZ64_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.XYZ64_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.XYZ64_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getF64x();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getF64y();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getF64z();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double f64X = 1;
 * @return {number}
 */
proto.VgeoDB.common.XYZ64_t.prototype.getF64x = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.XYZ64_t} returns this
 */
proto.VgeoDB.common.XYZ64_t.prototype.setF64x = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double f64Y = 2;
 * @return {number}
 */
proto.VgeoDB.common.XYZ64_t.prototype.getF64y = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.XYZ64_t} returns this
 */
proto.VgeoDB.common.XYZ64_t.prototype.setF64y = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double f64Z = 3;
 * @return {number}
 */
proto.VgeoDB.common.XYZ64_t.prototype.getF64z = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.XYZ64_t} returns this
 */
proto.VgeoDB.common.XYZ64_t.prototype.setF64z = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.XYZ32_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.XYZ32_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.XYZ32_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.XYZ32_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    fx: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    fy: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    fz: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.XYZ32_t}
 */
proto.VgeoDB.common.XYZ32_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.XYZ32_t;
  return proto.VgeoDB.common.XYZ32_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.XYZ32_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.XYZ32_t}
 */
proto.VgeoDB.common.XYZ32_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.XYZ32_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.XYZ32_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.XYZ32_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.XYZ32_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFx();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFy();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFz();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float fX = 1;
 * @return {number}
 */
proto.VgeoDB.common.XYZ32_t.prototype.getFx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.XYZ32_t} returns this
 */
proto.VgeoDB.common.XYZ32_t.prototype.setFx = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float fY = 2;
 * @return {number}
 */
proto.VgeoDB.common.XYZ32_t.prototype.getFy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.XYZ32_t} returns this
 */
proto.VgeoDB.common.XYZ32_t.prototype.setFy = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float fZ = 3;
 * @return {number}
 */
proto.VgeoDB.common.XYZ32_t.prototype.getFz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.XYZ32_t} returns this
 */
proto.VgeoDB.common.XYZ32_t.prototype.setFz = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.Orientation32_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.Orientation32_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.Orientation32_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Orientation32_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    fqx: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    fqy: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    fqz: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    fqw: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.Orientation32_t}
 */
proto.VgeoDB.common.Orientation32_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.Orientation32_t;
  return proto.VgeoDB.common.Orientation32_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.Orientation32_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.Orientation32_t}
 */
proto.VgeoDB.common.Orientation32_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFqx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFqy(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFqz(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFqw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.Orientation32_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.Orientation32_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.Orientation32_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Orientation32_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFqx();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFqy();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getFqz();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getFqw();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional float fqX = 1;
 * @return {number}
 */
proto.VgeoDB.common.Orientation32_t.prototype.getFqx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Orientation32_t} returns this
 */
proto.VgeoDB.common.Orientation32_t.prototype.setFqx = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float fqY = 2;
 * @return {number}
 */
proto.VgeoDB.common.Orientation32_t.prototype.getFqy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Orientation32_t} returns this
 */
proto.VgeoDB.common.Orientation32_t.prototype.setFqy = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float fqZ = 3;
 * @return {number}
 */
proto.VgeoDB.common.Orientation32_t.prototype.getFqz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Orientation32_t} returns this
 */
proto.VgeoDB.common.Orientation32_t.prototype.setFqz = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float fqW = 4;
 * @return {number}
 */
proto.VgeoDB.common.Orientation32_t.prototype.getFqw = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Orientation32_t} returns this
 */
proto.VgeoDB.common.Orientation32_t.prototype.setFqw = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.Extrinsic_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.Extrinsic_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.Extrinsic_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Extrinsic_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    sttranslate: (f = msg.getSttranslate()) && proto.VgeoDB.common.XYZ32_t.toObject(includeInstance, f),
    storientation: (f = msg.getStorientation()) && proto.VgeoDB.common.Orientation32_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.Extrinsic_t}
 */
proto.VgeoDB.common.Extrinsic_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.Extrinsic_t;
  return proto.VgeoDB.common.Extrinsic_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.Extrinsic_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.Extrinsic_t}
 */
proto.VgeoDB.common.Extrinsic_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.common.XYZ32_t;
      reader.readMessage(value,proto.VgeoDB.common.XYZ32_t.deserializeBinaryFromReader);
      msg.setSttranslate(value);
      break;
    case 2:
      var value = new proto.VgeoDB.common.Orientation32_t;
      reader.readMessage(value,proto.VgeoDB.common.Orientation32_t.deserializeBinaryFromReader);
      msg.setStorientation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.Extrinsic_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.Extrinsic_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.Extrinsic_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Extrinsic_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSttranslate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VgeoDB.common.XYZ32_t.serializeBinaryToWriter
    );
  }
  f = message.getStorientation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VgeoDB.common.Orientation32_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional XYZ32_t stTranslate = 1;
 * @return {?proto.VgeoDB.common.XYZ32_t}
 */
proto.VgeoDB.common.Extrinsic_t.prototype.getSttranslate = function() {
  return /** @type{?proto.VgeoDB.common.XYZ32_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.common.XYZ32_t, 1));
};


/**
 * @param {?proto.VgeoDB.common.XYZ32_t|undefined} value
 * @return {!proto.VgeoDB.common.Extrinsic_t} returns this
*/
proto.VgeoDB.common.Extrinsic_t.prototype.setSttranslate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.common.Extrinsic_t} returns this
 */
proto.VgeoDB.common.Extrinsic_t.prototype.clearSttranslate = function() {
  return this.setSttranslate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.common.Extrinsic_t.prototype.hasSttranslate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Orientation32_t stOrientation = 2;
 * @return {?proto.VgeoDB.common.Orientation32_t}
 */
proto.VgeoDB.common.Extrinsic_t.prototype.getStorientation = function() {
  return /** @type{?proto.VgeoDB.common.Orientation32_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.common.Orientation32_t, 2));
};


/**
 * @param {?proto.VgeoDB.common.Orientation32_t|undefined} value
 * @return {!proto.VgeoDB.common.Extrinsic_t} returns this
*/
proto.VgeoDB.common.Extrinsic_t.prototype.setStorientation = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.common.Extrinsic_t} returns this
 */
proto.VgeoDB.common.Extrinsic_t.prototype.clearStorientation = function() {
  return this.setStorientation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.common.Extrinsic_t.prototype.hasStorientation = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.Point2DInt_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.Point2DInt_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.Point2DInt_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Point2DInt_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    unu: jspb.Message.getFieldWithDefault(msg, 1, 0),
    unv: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.Point2DInt_t}
 */
proto.VgeoDB.common.Point2DInt_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.Point2DInt_t;
  return proto.VgeoDB.common.Point2DInt_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.Point2DInt_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.Point2DInt_t}
 */
proto.VgeoDB.common.Point2DInt_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnu(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.Point2DInt_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.Point2DInt_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.Point2DInt_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Point2DInt_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnu();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUnv();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 unU = 1;
 * @return {number}
 */
proto.VgeoDB.common.Point2DInt_t.prototype.getUnu = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Point2DInt_t} returns this
 */
proto.VgeoDB.common.Point2DInt_t.prototype.setUnu = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 unV = 2;
 * @return {number}
 */
proto.VgeoDB.common.Point2DInt_t.prototype.getUnv = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Point2DInt_t} returns this
 */
proto.VgeoDB.common.Point2DInt_t.prototype.setUnv = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.Point2DFloat_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.Point2DFloat_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.Point2DFloat_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Point2DFloat_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    fu: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    fv: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.Point2DFloat_t}
 */
proto.VgeoDB.common.Point2DFloat_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.Point2DFloat_t;
  return proto.VgeoDB.common.Point2DFloat_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.Point2DFloat_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.Point2DFloat_t}
 */
proto.VgeoDB.common.Point2DFloat_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFu(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFv(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.Point2DFloat_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.Point2DFloat_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.Point2DFloat_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.Point2DFloat_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFu();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFv();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float fU = 1;
 * @return {number}
 */
proto.VgeoDB.common.Point2DFloat_t.prototype.getFu = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Point2DFloat_t} returns this
 */
proto.VgeoDB.common.Point2DFloat_t.prototype.setFu = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float fV = 2;
 * @return {number}
 */
proto.VgeoDB.common.Point2DFloat_t.prototype.getFv = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.VgeoDB.common.Point2DFloat_t} returns this
 */
proto.VgeoDB.common.Point2DFloat_t.prototype.setFv = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.VgeoDB.common.UVPoint_t.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.VgeoDB.common.UVPoint_t.UuvpointCase = {
  UUVPOINT_NOT_SET: 0,
  STPOINTINT: 1,
  STPOINTFLOAT: 2
};

/**
 * @return {proto.VgeoDB.common.UVPoint_t.UuvpointCase}
 */
proto.VgeoDB.common.UVPoint_t.prototype.getUuvpointCase = function() {
  return /** @type {proto.VgeoDB.common.UVPoint_t.UuvpointCase} */(jspb.Message.computeOneofCase(this, proto.VgeoDB.common.UVPoint_t.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VgeoDB.common.UVPoint_t.prototype.toObject = function(opt_includeInstance) {
  return proto.VgeoDB.common.UVPoint_t.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VgeoDB.common.UVPoint_t} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.UVPoint_t.toObject = function(includeInstance, msg) {
  var f, obj = {
    stpointint: (f = msg.getStpointint()) && proto.VgeoDB.common.Point2DInt_t.toObject(includeInstance, f),
    stpointfloat: (f = msg.getStpointfloat()) && proto.VgeoDB.common.Point2DFloat_t.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VgeoDB.common.UVPoint_t}
 */
proto.VgeoDB.common.UVPoint_t.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VgeoDB.common.UVPoint_t;
  return proto.VgeoDB.common.UVPoint_t.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VgeoDB.common.UVPoint_t} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VgeoDB.common.UVPoint_t}
 */
proto.VgeoDB.common.UVPoint_t.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.VgeoDB.common.Point2DInt_t;
      reader.readMessage(value,proto.VgeoDB.common.Point2DInt_t.deserializeBinaryFromReader);
      msg.setStpointint(value);
      break;
    case 2:
      var value = new proto.VgeoDB.common.Point2DFloat_t;
      reader.readMessage(value,proto.VgeoDB.common.Point2DFloat_t.deserializeBinaryFromReader);
      msg.setStpointfloat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VgeoDB.common.UVPoint_t.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VgeoDB.common.UVPoint_t.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VgeoDB.common.UVPoint_t} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VgeoDB.common.UVPoint_t.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStpointint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.VgeoDB.common.Point2DInt_t.serializeBinaryToWriter
    );
  }
  f = message.getStpointfloat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.VgeoDB.common.Point2DFloat_t.serializeBinaryToWriter
    );
  }
};


/**
 * optional Point2DInt_t stPointInt = 1;
 * @return {?proto.VgeoDB.common.Point2DInt_t}
 */
proto.VgeoDB.common.UVPoint_t.prototype.getStpointint = function() {
  return /** @type{?proto.VgeoDB.common.Point2DInt_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.common.Point2DInt_t, 1));
};


/**
 * @param {?proto.VgeoDB.common.Point2DInt_t|undefined} value
 * @return {!proto.VgeoDB.common.UVPoint_t} returns this
*/
proto.VgeoDB.common.UVPoint_t.prototype.setStpointint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.VgeoDB.common.UVPoint_t.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.common.UVPoint_t} returns this
 */
proto.VgeoDB.common.UVPoint_t.prototype.clearStpointint = function() {
  return this.setStpointint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.common.UVPoint_t.prototype.hasStpointint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Point2DFloat_t stPointFloat = 2;
 * @return {?proto.VgeoDB.common.Point2DFloat_t}
 */
proto.VgeoDB.common.UVPoint_t.prototype.getStpointfloat = function() {
  return /** @type{?proto.VgeoDB.common.Point2DFloat_t} */ (
    jspb.Message.getWrapperField(this, proto.VgeoDB.common.Point2DFloat_t, 2));
};


/**
 * @param {?proto.VgeoDB.common.Point2DFloat_t|undefined} value
 * @return {!proto.VgeoDB.common.UVPoint_t} returns this
*/
proto.VgeoDB.common.UVPoint_t.prototype.setStpointfloat = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.VgeoDB.common.UVPoint_t.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.VgeoDB.common.UVPoint_t} returns this
 */
proto.VgeoDB.common.UVPoint_t.prototype.clearStpointfloat = function() {
  return this.setStpointfloat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.VgeoDB.common.UVPoint_t.prototype.hasStpointfloat = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.VgeoDB.common);
